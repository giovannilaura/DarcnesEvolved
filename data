apple2.c:    apple2->keyboard_latch = key | 0x80;
apple2.c:    return apple2->keyboard_latch;
apple2.c:    apple2->keyboard_latch &= 0x7f;
apple2.c:    if (addr < 0xc080) { /* Built-In I/O */
apple2.c:	    a2v_io(apple2->vdp, addr);
apple2.c:	if (apple2->cards[card] && apple2->cards[card]->read) {
apple2.c:	    return apple2->cards[card]->read(apple2->cards[card], addr);
apple2.c:	if (apple2->cards[card] && apple2->cards[card]->rom) {
apple2.c:	    return apple2->cards[card]->rom[addr & 0xff];
apple2.c:    if (addr < 0xc080) { /* Built-In I/O */
apple2.c:	if (addr < 0xc010) { /* keyboard, read-only (ignore) */
apple2.c:	    a2v_io(apple2->vdp, addr);
apple2.c:	if (apple2->cards[card] && apple2->cards[card]->write) {
apple2.c:	    apple2->cards[card]->write(apple2->cards[card], addr, data);
apple2.c:    return apple2->memory[addr];
apple2.c:    apple2->memory[addr] = data;
apple2.c:    } else if (apple2->langcard_readable) {
apple2.c:	    return apple2->langcard_low_bank[addr & 0x0fff];
apple2.c:	    return apple2->langcard_high_bank[addr & 0x1fff];
apple2.c:	rom_bank = (addr - 0xd000) >> 11;
apple2.c:	if (!apple2->roms[rom_bank]) {
apple2.c:	return apple2->roms[rom_bank][addr & 0x7ff];
apple2.c:    } else if (apple2->langcard_writable) {
apple2.c:	    apple2->langcard_low_bank[addr & 0x0fff] = data;
apple2.c:	    apple2->langcard_high_bank[addr & 0x1fff] = data;
apple2.c: * For WR-enable LC RAM, the softswitch REQUIRES two successive reads
apple2.c: *                $C080       ;RD LC RAM bank2, WR-protect LC RAM
apple2.c: * ROMIN      =   $C081       ;RD ROM, WR-enable LC RAM
apple2.c: *                $C082       ;RD ROM, WR-protect LC RAM
apple2.c: * LCBANK2    =   $C083       ;RD LC RAM bank2, WR-enable LC RAM
apple2.c: *                $C088       ;RD LC RAM bank1, WR-protect LC RAM
apple2.c: *                $C089       ;RD ROM, WR-enable LC RAM
apple2.c: *                $C08A       ;RD ROM, WR-protect LC RAM
apple2.c: * LCBANK1    =   $C08B       ;RD LC RAM bank1, WR-enable LC RAM
apple2.c: *  $C084-$C087 are echoes of $C080-$C083
apple2.c: *  $C08C-$C08F are echoes of $C088-$C08B
apple2.c: *  Bank 1 and Bank 2 here are the 4K banks at $D000-$DFFF. The
apple2.c: *  remaining area from $E000-$FFFF is the same for both
apple2.c:    apple2->langcard_writable = addr & 1;
apple2.c:	apple2->langcard_readable = 1;
apple2.c:	apple2->langcard_readable = 0;
apple2.c:	apple2->langcard_low_bank = apple2->langcard_memory;
apple2.c:	apple2->langcard_low_bank = apple2->langcard_memory + 0x1000;
apple2.c:    retval->read = a2_lang_read;
apple2.c:    retval->write = a2_lang_write;
apple2.c:    retval->rom = NULL;
apple2.c:    apple2->langcard_memory = malloc(0x4000);
apple2.c:    if (!apple2->langcard_memory) {
apple2.c:    apple2->langcard_high_bank = apple2->langcard_memory + 0x2000;
apple2.c:    if (apple2->need_reset) {
apple2.c:	apple2->need_reset = 0;
apple2.c:	cpu6502_reset(apple2->cpu);
apple2.c:    a2v_periodic(apple2->vdp);
apple2.c:	event_register(apple2->scheduler, &apple2_events[i]);
apple2.c:    event_register(apple2->scheduler, the_event);
apple2.c:    apple2->need_reset = 1;
apple2.c:	apple2->roms[rom] = NULL;
apple2.c:    apple2->roms[rom] = romfile->data;
apple2.c:    apple2->roms[ROM_D0] = NULL;
apple2.c:    apple2->roms[ROM_D8] = NULL;
apple2.c:    apple2->roms[ROM_E0] = NULL;
apple2.c:    apple2->roms[ROM_E8] = NULL;
apple2.c:    apple2->roms[ROM_F0] = NULL;
apple2.c:    apple2->roms[ROM_F8] = NULL;
apple2.c:    apple2->cards[0] = NULL;
apple2.c:    apple2->cards[1] = NULL;
apple2.c:    apple2->cards[2] = NULL;
apple2.c:    apple2->cards[3] = NULL;
apple2.c:    apple2->cards[4] = NULL;
apple2.c:    apple2->cards[5] = NULL;
apple2.c:    apple2->cards[6] = NULL;
apple2.c:    apple2->cards[7] = NULL;
apple2.c:    apple2->cards[0] = apple2_lang_init(apple2);
apple2.c:    apple2->cards[6] = apple2_disk_init(apple2);
apple2.c:    apple2->cpu = cpu;
apple2.c:    cpu6502_setzpage(cpu, apple2->memory);
apple2.c:    apple2->memory = malloc(APPLE2_MEMORY_SIZE);
apple2.c:    if (!apple2->memory) {
apple2.c:    apple2->langcard_readable = 0;
apple2.c:    apple2->langcard_writable = 0;
apple2.c:    apple2->need_reset = 0;
apple2.c:    apple2->vdp = a2v_init(apple2->memory); /* FIXME: return value? */
apple2.c:    apple2->scheduler = new_event_scheduler(cpu6502_event_delay_callback, apple2->cpu);
apple2.c:    set_timeslice((void (*)(void *)) &event_timeslice, apple2->scheduler);
apple2.c: * added preliminary per-card menu hook
apple2_disk.c:    new_track = disk->cur_track;
apple2_disk.c:	new_track--;
apple2_disk.c:    disk->cur_track = new_track;
apple2_disk.c:    disk->track_data = disk->disk_data + (new_track * NIB_FILE_TRACK_LENGTH);
apple2_disk.c:	    card->disks[card->drive_select].last_phase = addr;
apple2_disk.c:	if ((addr & 4) == (card->disks[card->drive_select].last_phase & 4)) {
apple2_disk.c:	    a2_disk_seek(&card->disks[card->drive_select], DISK_SEEK_OUT);
apple2_disk.c:	    a2_disk_seek(&card->disks[card->drive_select], DISK_SEEK_IN);
apple2_disk.c:	card->motor_on = 0;
apple2_disk.c:	card->motor_on = 1;
apple2_disk.c:	card->drive_select = 0;
apple2_disk.c:	card->drive_select = 1;
apple2_disk.c:	card->qlines &= ~1;
apple2_disk.c:	card->qlines |= 1;
apple2_disk.c:	card->qlines &= ~2;
apple2_disk.c:	card->qlines |= 2;
apple2_disk.c:    cur_disk = &card->disks[card->drive_select];
apple2_disk.c:    switch (card->qlines & 3) {
apple2_disk.c:	if (card->motor_on && cur_disk->is_inserted) {
apple2_disk.c:	    retval = cur_disk->track_data[cur_disk->track_data_index];
apple2_disk.c:	    cur_disk->track_data_index++;
apple2_disk.c:	    cur_disk->track_data_index %= NIB_FILE_TRACK_LENGTH;
apple2_disk.c:	return cur_disk->is_readonly << 7;
apple2_disk.c:	if (card->motor_on && cur_disk->is_inserted && (!cur_disk->is_readonly)) {
apple2_disk.c:	    cur_disk->track_data[cur_disk->track_data_index] = card->write_latch;
apple2_disk.c:	    cur_disk->track_data_index++;
apple2_disk.c:	    cur_disk->track_data_index %= NIB_FILE_TRACK_LENGTH;
apple2_disk.c:    switch (card->qlines & 3) {
apple2_disk.c:	card->write_latch = data;
apple2_disk.c:	if (!j--) {
apple2_disk.c:    for (i = 85; i >= 0; i--) {
apple2_disk.c:    card->disks[0].disk_data = disk2_convert_disk(romfile->data, disk2_do_translate_table);
apple2_disk.c:    card->disks[0].track_data = card->disks[0].disk_data;
apple2_disk.c:    card->disks[0].is_inserted = 1;
apple2_disk.c:    card->disks[1].disk_data = disk2_convert_disk(romfile->data, disk2_do_translate_table);
apple2_disk.c:    card->disks[1].track_data = card->disks[1].disk_data;
apple2_disk.c:    card->disks[1].is_inserted = 1;
apple2_disk.c:    card->disks[1].is_readonly = 0;
apple2_disk.c:    disk->disk_data = disk2_convert_disk(romfile->data, disk2_do_translate_table);
apple2_disk.c:    disk->track_data = disk[0].disk_data;
apple2_disk.c:    disk->cur_track = 0;
apple2_disk.c:    disk->is_inserted = 1;
apple2_disk.c:    disk->is_readonly = 1;
apple2_disk.c:    disk->menu[1].callback = (ui_menu_callback)disk2_remove_disk;
apple2_disk.c:    disk->menu[1].name = "Remove disk";
apple2_disk.c:    menu_rename_item(&disk->menu[1]);
apple2_disk.c:    "ProDOS-order images (*.PO)\0*.po" \
apple2_disk.c:    "DOS-order images (*.DO)\0*.do\0\0"
apple2_disk.c:    disk->is_inserted = 0;
apple2_disk.c:    disk->menu[1].callback = (ui_menu_callback)disk2_insert_disk;
apple2_disk.c:    disk->menu[1].name = "Insert disk";
apple2_disk.c:    menu_rename_item(&disk->menu[1]);
apple2_disk.c:    card->api.rom = romfile->data;
apple2_disk.c:    disk->menu = menu;
apple2_disk.c:    disk2_init_menu(&retval->disks[0], 0);
apple2_disk.c:    disk2_init_menu(&retval->disks[1], 1);
apple2_disk.c:    retval->api.read = (a2_card_read)a2_disk_read;
apple2_disk.c:    retval->api.write = (a2_card_write)a2_disk_write;
apple2_disk.c:    retval->motor_on = 0;
apple2_disk.c:    retval->drive_select = 0;
apple2_disk.c:    retval->qlines = 0;
apple2_disk.c:    retval->disks[0].is_inserted = 0;
apple2_disk.c:    retval->disks[0].is_readonly = 1;
apple2_disk.c:    retval->disks[0].cur_track = 0;
apple2_disk.c:    retval->disks[1].is_inserted = 0;
apple2_disk.c:    retval->disks[1].is_readonly = 1;
apple2_disk.c:    retval->disks[1].cur_track = 0;
apple2_disk.c: * fixed to initialize the per-disk menus (oops)
apple2_disk.c: * started adding preliminary per-disk menus
apple2_vdp.c:	vdp->is_textmode = 0;
apple2_vdp.c:	vdp->is_textmode = 1;
apple2_vdp.c:	vdp->is_mixed = 0;
apple2_vdp.c:	vdp->is_mixed = 1;
apple2_vdp.c:	vdp->is_primary = 1;
apple2_vdp.c:	vdp->is_primary = 0;
apple2_vdp.c:	vdp->is_hires = 0;
apple2_vdp.c:	vdp-> is_hires = 1;
apple2_vdp.c:    cur_vbp = video_get_vbp(vdp->scanline);
apple2_vdp.c:    membase = vdp->memory;
apple2_vdp.c:    if (vdp->is_primary) {
apple2_vdp.c:    membase += a2v_text_membase[vdp->scanline >> 3];
apple2_vdp.c:	chardata = vdp->chargen[((membase[i] & 0x3f) << 3) + (vdp->scanline & 7)];
apple2_vdp.c:	    if ((!(membase[i] & 0x40)) || (vdp->blink_on)) {
apple2_vdp.c:    cur_vbp = video_get_vbp(vdp->scanline);
apple2_vdp.c:    membase = vdp->memory;
apple2_vdp.c:    membase += a2v_text_membase[vdp->scanline >> 3];
apple2_vdp.c:    membase += (vdp->scanline & 7) << 10;
apple2_vdp.c:    if (vdp->is_primary) {
apple2_vdp.c:    cur_vbp = video_get_vbp(vdp->scanline);
apple2_vdp.c:    membase = vdp->memory;
apple2_vdp.c:    if (vdp->is_primary) {
apple2_vdp.c:    membase += a2v_text_membase[vdp->scanline >> 3];
apple2_vdp.c:	if (vdp->scanline & 4) {
apple2_vdp.c:    if (vdp->scanline < 192) {
apple2_vdp.c:	if (vdp->is_textmode) {
apple2_vdp.c:	} else if ((vdp->scanline >= 160) && (vdp->is_mixed)) {
apple2_vdp.c:	} else if (vdp->is_hires) {
apple2_vdp.c:    } else if (vdp->scanline == 262) {
apple2_vdp.c:	vdp->scanline = 0;
apple2_vdp.c:	if (!--vdp->blink_timer) {
apple2_vdp.c:	    vdp->blink_timer = BLINK_TIMER_INTERVAL;
apple2_vdp.c:	    vdp->blink_on ^= 1;
apple2_vdp.c:    vdp->scanline++;
apple2_vdp.c:    vdp->chargen = NULL;
apple2_vdp.c:    vdp->chargen = romfile->data;
apple2_vdp.c:    if (!retval->chargen) {
apple2_vdp.c:    retval->memory = system_memory;
apple2_vdp.c:    retval->blink_timer = BLINK_TIMER_INTERVAL;
apple2_vdp.c:    retval->blink_on = 0;
blit_c.c: * NOTE: the 2-plane blitters are CZT without being declared so in their
blit_c.c: * SMS and PCE was added, which required both CZT and non-CZT 4-plane blits).
build_cpu6280.c:    "    %s = context->zpage[addr];\n",
build_cpu6280.c:    "    context->zpage[addr] = %s;\n",
build_cpu6280.c:    "    u8 addr;\n\n    addr = OPFETCH(context) + context->reg_x;\n",
build_cpu6280.c:    "    %s = context->zpage[addr];\n",
build_cpu6280.c:    "    context->zpage[addr] = %s;\n"
build_cpu6280.c:    "    u8 addr;\n\n    addr = OPFETCH(context) + context->reg_y;\n",
build_cpu6280.c:    "    %s = context->zpage[addr];\n",
build_cpu6280.c:    "    context->zpage[addr] = %s;\n"
build_cpu6280.c:    "    %s = context->readfunc(context->cpu, addr);\n",
build_cpu6280.c:    "    context->writefunc(context->cpu, addr, %s);\n"
build_cpu6280.c:    "    addr += context->reg_x;\n",
build_cpu6280.c:    "    %s = context->readfunc(context->cpu, addr);\n",
build_cpu6280.c:    "    context->writefunc(context->cpu, addr, %s);\n"
build_cpu6280.c:    "    addr += context->reg_y;\n",
build_cpu6280.c:    "    %s = context->readfunc(context->cpu, addr);\n",
build_cpu6280.c:    "    context->writefunc(context->cpu, addr, %s);\n"
build_cpu6280.c:    "    addr2 = context->zpage[addr1++];\n"
build_cpu6280.c:    "    addr2 += context->zpage[addr1] << 8;\n",
build_cpu6280.c:    "    %s = context->readfunc(context->cpu, addr2);\n",
build_cpu6280.c:    "    context->writefunc(context->cpu, addr2, %s);\n"
build_cpu6280.c:    "    addr1 = OPFETCH(context) + context->reg_x;\n"
build_cpu6280.c:    "    addr2 = context->zpage[addr1++];\n"
build_cpu6280.c:    "    addr2 += context->zpage[addr1] << 8;\n",
build_cpu6280.c:    "    %s = context->readfunc(context->cpu, addr2);\n",
build_cpu6280.c:    "    context->writefunc(context->cpu, addr2, %s);\n"
build_cpu6280.c:    "    addr2 = context->zpage[addr1++];\n"
build_cpu6280.c:    "    addr2 += context->zpage[addr1] << 8;\n"
build_cpu6280.c:    "    addr2 += context->reg_y;\n",
build_cpu6280.c:    "    %s = context->readfunc(context->cpu, addr2);\n",
build_cpu6280.c:    "    context->writefunc(context->cpu, addr2, %s);\n"
build_cpu6280.c:    "    %s = context->reg_a;\n",
build_cpu6280.c:    "    context->reg_a = %s;\n",
build_cpu6280.c:    "    %s = context->reg_x;\n",
build_cpu6280.c:    "    context->reg_x = %s;\n",
build_cpu6280.c:    "    %s = context->reg_y;\n",
build_cpu6280.c:    "    context->reg_y = %s;\n",
build_cpu6280.c:	emit("    if (%c(context->zpage[addr] & 0x%02x)) {\n", (i & 8)? ' ': '!', 1 << (i & 7));
build_cpu6280.c:	emit("        context->pc += delta;\n");
build_cpu6280.c:	emit("        context->cycles_left -= 8;\n");
build_cpu6280.c:	emit("        context->pc++;\n");
build_cpu6280.c:	emit("        context->cycles_left -= 6;\n");
build_cpu6280.c:    {0x48, "PHA", 1, 0, 0, "context->reg_a"},
build_cpu6280.c:    {0xda, "PHX", 1, 0, 0, "context->reg_x"},
build_cpu6280.c:    {0x5a, "PHY", 1, 0, 0, "context->reg_y"},
build_cpu6280.c:    {0x68, "PLA", 0, 1, 0, "context->reg_a"},
build_cpu6280.c:    {0xfa, "PLX", 0, 1, 0, "context->reg_x"},
build_cpu6280.c:    {0x7a, "PLY", 0, 1, 0, "context->reg_y"},
build_cpu6280.c:    {0x22, "SAX", "context->reg_a", "context->reg_x", 1, 0},
build_cpu6280.c:    {0x42, "SAY", "context->reg_a", "context->reg_y", 1, 0},
build_cpu6280.c:    {0x02, "SXY", "context->reg_x", "context->reg_y", 1, 0},
build_cpu6280.c:    {0xaa, "TAX", "context->reg_a", "context->reg_x", 0, 1},
build_cpu6280.c:    {0xa8, "TAY", "context->reg_a", "context->reg_y", 0, 1},
build_cpu6280.c:    {0xba, "TSX", "context->reg_s", "context->reg_x", 0, 1},
build_cpu6280.c:    {0x8a, "TXA", "context->reg_x", "context->reg_a", 0, 1},
build_cpu6280.c:    {0x9a, "TXS", "context->reg_x", "context->reg_s", 0, 0},
build_cpu6280.c:    {0x98, "TYA", "context->reg_y", "context->reg_a", 0, 1},
build_cpu6280.c:    {0xc6, "DEC", '-', &amode_zpage},
build_cpu6280.c:    {0xd6, "DEC", '-', &amode_zpagex},
build_cpu6280.c:    {0xce, "DEC", '-', &amode_abs},
build_cpu6280.c:    {0xde, "DEC", '-', &amode_absx},
build_cpu6280.c:    {0x3a, "DEC", '-', &amode_rega},
build_cpu6280.c:    {0xca, "DEX", '-', &amode_regx},
build_cpu6280.c:    {0x88, "DEY", '-', &amode_regy},
build_cpu6280.c:    {0xa2, "LDX", 0, 0, "context->reg_x", &amode_immediate},
build_cpu6280.c:    {0xa6, "LDX", 0, 0, "context->reg_x", &amode_zpage},
build_cpu6280.c:    {0xb6, "LDX", 0, 0, "context->reg_x", &amode_zpagey},
build_cpu6280.c:    {0xae, "LDX", 0, 0, "context->reg_x", &amode_abs},
build_cpu6280.c:    {0xbe, "LDX", 0, 0, "context->reg_x", &amode_absy},
build_cpu6280.c:    {0xa0, "LDY", 0, 0, "context->reg_y", &amode_immediate},
build_cpu6280.c:    {0xa4, "LDY", 0, 0, "context->reg_y", &amode_zpage},
build_cpu6280.c:    {0xb4, "LDY", 0, 0, "context->reg_y", &amode_zpagex},
build_cpu6280.c:    {0xac, "LDY", 0, 0, "context->reg_y", &amode_abs},
build_cpu6280.c:    {0xbc, "LDY", 0, 0, "context->reg_y", &amode_absx},
build_cpu6280.c:    {0x86, "STX", 1, 0, "context->reg_x", &amode_zpage},
build_cpu6280.c:    {0x96, "STX", 1, 0, "context->reg_x", &amode_zpagey},
build_cpu6280.c:    {0x8e, "STX", 1, 0, "context->reg_x", &amode_abs},
build_cpu6280.c:    {0x84, "STY", 1, 0, "context->reg_y", &amode_zpage},
build_cpu6280.c:    {0x94, "STY", 1, 0, "context->reg_y", &amode_zpagex},
build_cpu6280.c:    {0x8c, "STY", 1, 0, "context->reg_y", &amode_abs},
build_cpu6280.c:	emit("    context->zpage[addr] %s%d;\n", (i & 8)? "|= ": "&= ~", 1 << (i & 7));
build_cpu6280.c:	emit("    context->cycles_left -= 7;\n");
build_cpu6280.c:    {0xf3, "TAI", "++", "--", "++", "++"},
build_cpu6280.c:    {0xc3, "TDD", "--", "--", "--", "--"},
build_cpu6280.c:    {0xe3, "TIA", "++", "++", "++", "--"},
build_cpu6280.c:    for (cur_instr = block_instructions; cur_instr->instruction; cur_instr++) {
build_cpu6280.c:	emit_procheader(cur_instr->opcode);
build_cpu6280.c:	emit("    /* %s */\n", cur_instr->instruction);
build_cpu6280.c:	emit("    context->cycles_left -= (17 + (length * 6));\n");
build_cpu6280.c:	emit("        context->writefunc(context->cpu, dest%s, context->readfunc(context->cpu, source%s));\n", cur_instr->dst_op1, cur_instr->src_op1);
build_cpu6280.c:	emit("        if (!--length) break;\n");
build_cpu6280.c:	emit("        context->writefunc(context->cpu, dest%s, context->readfunc(context->cpu, source%s));\n", cur_instr->dst_op2, cur_instr->src_op2);
build_cpu6280.c:	emit("        if (!--length) break;\n");
build_cpu6280.c:     "    context->pc = addr;\n"
build_cpu6280.c:     "    context->cycles_left -= 4;\n"},
build_cpu6280.c:     "    context->pc = context->readfunc(context->cpu, addr++);\n"
build_cpu6280.c:     "    context->pc |= context->readfunc(context->cpu, addr) << 8;\n"
build_cpu6280.c:     "    context->cycles_left -= 7;\n"},
build_cpu6280.c:     "    addr += context->reg_x;\n"
build_cpu6280.c:     "    context->pc = context->readfunc(context->cpu, addr++);\n"
build_cpu6280.c:     "    context->pc |= context->readfunc(context->cpu, addr) << 8;\n"
build_cpu6280.c:     "    context->cycles_left -= 7;\n"},
build_cpu6280.c:     "    PUSH_BYTE(context, context->pc >> 8);\n"
build_cpu6280.c:     "    PUSH_BYTE(context, context->pc & 0xff);\n"
build_cpu6280.c:     "    context->pc = addr;\n"
build_cpu6280.c:     "    context->cycles_left -= 7;\n"},
build_cpu6280.c:     "    PUSH_BYTE(context, context->pc >> 8);\n"
build_cpu6280.c:     "    PUSH_BYTE(context, context->pc & 0xff);\n"
build_cpu6280.c:     "    context->pc += delta;\n"
build_cpu6280.c:     "    context->cycles_left -= 8;\n"},
build_cpu6280.c:     "    context->pc = POP_BYTE(context);\n"
build_cpu6280.c:     "    context->pc |= POP_BYTE(context) << 8;\n"
build_cpu6280.c:     "    context->pc++;\n"
build_cpu6280.c:     "    context->cycles_left -= 7;\n"},
build_cpu6280.c:     "    context->pc = POP_BYTE(context);\n"
build_cpu6280.c:     "    context->pc |= POP_BYTE(context) << 8;\n"
build_cpu6280.c:     "    context->cycles_left -= 7;\n"},
build_cpu6280.c:     "    context->pc++;\n"
build_cpu6280.c:     "    PUSH_BYTE(context, context->pc >> 8);\n"
build_cpu6280.c:     "    PUSH_BYTE(context, context->pc & 0xff);\n"
build_cpu6280.c:     "    context->flags |= FLAG_I;\n"
build_cpu6280.c:     "    context->flags &= ~FLAG_D;\n"
build_cpu6280.c:     "    context->pc = context->readfunc(context->cpu, VECTOR_BRK_LO);\n"
build_cpu6280.c:     "    context->pc |= context->readfunc(context->cpu, VECTOR_BRK_HI) << 8;\n"
build_cpu6280.c:     "    context->cycles_left -= 8;\n"},
build_cpu6280.c:     "    context->cycles_left -= 4;\n"},
build_cpu6280.c:     "    context->cycles_left -= 4;\n"},
build_cpu6280.c:     "    context->cycles_left -= 4;\n"},
build_cpu6280.c:     "    if (i & 0x80) { context->reg_a = context->mpr[7]; }\n"
build_cpu6280.c:     "    if (i & 0x40) { context->reg_a = context->mpr[6]; }\n"
build_cpu6280.c:     "    if (i & 0x20) { context->reg_a = context->mpr[5]; }\n"
build_cpu6280.c:     "    if (i & 0x10) { context->reg_a = context->mpr[4]; }\n"
build_cpu6280.c:     "    if (i & 0x08) { context->reg_a = context->mpr[3]; }\n"
build_cpu6280.c:     "    if (i & 0x04) { context->reg_a = context->mpr[2]; }\n"
build_cpu6280.c:     "    if (i & 0x02) { context->reg_a = context->mpr[1]; }\n"
build_cpu6280.c:     "    if (i & 0x01) { context->reg_a = context->mpr[0]; }\n"
build_cpu6280.c:     "    context->cycles_left -= 4;\n"},
build_cpu6280.c:     "    if (i & 0x80) { context->mpr[7] = context->reg_a; }\n"
build_cpu6280.c:     "    if (i & 0x40) { context->mpr[6] = context->reg_a; }\n"
build_cpu6280.c:     "    if (i & 0x20) { context->mpr[5] = context->reg_a; }\n"
build_cpu6280.c:     "    if (i & 0x10) { context->mpr[4] = context->reg_a; }\n"
build_cpu6280.c:     "    if (i & 0x08) { context->mpr[3] = context->reg_a; }\n"
build_cpu6280.c:     "    if (i & 0x04) { context->mpr[2] = context->reg_a; }\n"
build_cpu6280.c:     "    if (i & 0x02) { context->mpr[1] = context->reg_a; }\n"
build_cpu6280.c:     "    if (i & 0x01) { context->mpr[0] = context->reg_a; }\n"
build_cpu6280.c:     "    context->cycles_left -= 5;\n"},
build_cpu6280.c:     "        tmp = context->reg_a;\n"
build_cpu6280.c:     "        context->reg_a = context->zpage[context->reg_x];\n"
build_cpu6280.c:     "        context->zpage[context->reg_x] = context->reg_a;\n"
build_cpu6280.c:     "        context->reg_a = tmp;\n"
build_cpu6280.c:     "        context->cycles_left -= 5;\n"
build_cpu6280.c:     "        context->cycles_left -= 2;\n"
build_cpu6280.c:    for (cur_instr = misc_instructions; cur_instr->instruction; cur_instr++) {
build_cpu6280.c:	emit_procheader(cur_instr->opcode);
build_cpu6280.c:	emit(cur_instr->instruction);
build_cpu6280.c: * fixed a cycle-counting bug with the PL[APXY] instructions
build_cpu6502.c:    "    %s = context->zpage[addr];\n",
build_cpu6502.c:    "    context->zpage[addr] = %s;\n",
build_cpu6502.c:    "    u8 addr;\n\n    addr = OPFETCH(context) + context->reg_x;\n",
build_cpu6502.c:    "    %s = context->zpage[addr];\n",
build_cpu6502.c:    "    context->zpage[addr] = %s;\n"
build_cpu6502.c:    "    u8 addr;\n\n    addr = OPFETCH(context) + context->reg_y;\n",
build_cpu6502.c:    "    %s = context->zpage[addr];\n",
build_cpu6502.c:    "    context->zpage[addr] = %s;\n"
build_cpu6502.c:    "    %s = context->readfunc(context->cpu, addr);\n",
build_cpu6502.c:    "    context->writefunc(context->cpu, addr, %s);\n"
build_cpu6502.c:    "    addr += context->reg_x;\n"
build_cpu6502.c:    "    if (addr >= 0x100) context->cycles_left--;\n"
build_cpu6502.c:    "    %s = context->readfunc(context->cpu, addr);\n",
build_cpu6502.c:    "    context->writefunc(context->cpu, addr, %s);\n"
build_cpu6502.c:    "    addr += context->reg_y;\n"
build_cpu6502.c:    "    if (addr >= 0x100) context->cycles_left--;\n"
build_cpu6502.c:    "    %s = context->readfunc(context->cpu, addr);\n",
build_cpu6502.c:    "    context->writefunc(context->cpu, addr, %s);\n"
build_cpu6502.c:    "    addr2 = context->zpage[addr1++];\n"
build_cpu6502.c:    "    addr2 += context->zpage[addr1] << 8;\n",
build_cpu6502.c:    "    %s = context->readfunc(context->cpu, addr2);\n",
build_cpu6502.c:    "    context->writefunc(context->cpu, addr2, %s);\n"
build_cpu6502.c:    "    addr1 = OPFETCH(context) + context->reg_x;\n"
build_cpu6502.c:    "    addr2 = context->zpage[addr1++];\n"
build_cpu6502.c:    "    addr2 += context->zpage[addr1] << 8;\n",
build_cpu6502.c:    "    %s = context->readfunc(context->cpu, addr2);\n",
build_cpu6502.c:    "    context->writefunc(context->cpu, addr2, %s);\n"
build_cpu6502.c:    "    addr2 = context->zpage[addr1++];\n"
build_cpu6502.c:    "    addr2 += context->reg_y;\n"
build_cpu6502.c:    "    if (addr2 >= 0x100) context->cycles_left--;\n"
build_cpu6502.c:    "    addr2 += context->zpage[addr1] << 8;\n",
build_cpu6502.c:    "    %s = context->readfunc(context->cpu, addr2);\n",
build_cpu6502.c:    "    context->writefunc(context->cpu, addr2, %s);\n"
build_cpu6502.c:    "    %s = context->reg_a;\n",
build_cpu6502.c:    "    context->reg_a = %s;\n",
build_cpu6502.c:    "    %s = context->reg_x;\n",
build_cpu6502.c:    "    context->reg_x = %s;\n",
build_cpu6502.c:    "    %s = context->reg_y;\n",
build_cpu6502.c:    "    context->reg_y = %s;\n",
build_cpu6502.c:    {0x48, "PHA", 1, 0, 0, "context->reg_a"},
build_cpu6502.c:    {0x68, "PLA", 0, 1, 0, "context->reg_a"},
build_cpu6502.c:    {0xaa, "TAX", "context->reg_a", "context->reg_x", 0, 1},
build_cpu6502.c:    {0xa8, "TAY", "context->reg_a", "context->reg_y", 0, 1},
build_cpu6502.c:    {0xba, "TSX", "context->reg_s", "context->reg_x", 0, 1},
build_cpu6502.c:    {0x8a, "TXA", "context->reg_x", "context->reg_a", 0, 1},
build_cpu6502.c:    {0x9a, "TXS", "context->reg_x", "context->reg_s", 0, 0},
build_cpu6502.c:    {0x98, "TYA", "context->reg_y", "context->reg_a", 0, 1},
build_cpu6502.c:    {0xc6, "DEC", '-', &amode_zpage},
build_cpu6502.c:    {0xd6, "DEC", '-', &amode_zpagex},
build_cpu6502.c:    {0xce, "DEC", '-', &amode_abs},
build_cpu6502.c:    {0xde, "DEC", '-', &amode_absx},
build_cpu6502.c:    {0xca, "DEX", '-', &amode_regx},
build_cpu6502.c:    {0x88, "DEY", '-', &amode_regy},
build_cpu6502.c:    {0xa2, "LDX", 0, 0, "context->reg_x", &amode_immediate},
build_cpu6502.c:    {0xa6, "LDX", 0, 0, "context->reg_x", &amode_zpage},
build_cpu6502.c:    {0xb6, "LDX", 0, 0, "context->reg_x", &amode_zpagey},
build_cpu6502.c:    {0xae, "LDX", 0, 0, "context->reg_x", &amode_abs},
build_cpu6502.c:    {0xbe, "LDX", 0, 0, "context->reg_x", &amode_absy},
build_cpu6502.c:    {0xa0, "LDY", 0, 0, "context->reg_y", &amode_immediate},
build_cpu6502.c:    {0xa4, "LDY", 0, 0, "context->reg_y", &amode_zpage},
build_cpu6502.c:    {0xb4, "LDY", 0, 0, "context->reg_y", &amode_zpagex},
build_cpu6502.c:    {0xac, "LDY", 0, 0, "context->reg_y", &amode_abs},
build_cpu6502.c:    {0xbc, "LDY", 0, 0, "context->reg_y", &amode_absx},
build_cpu6502.c:    {0x86, "STX", 1, 0, "context->reg_x", &amode_zpage},
build_cpu6502.c:    {0x96, "STX", 1, 0, "context->reg_x", &amode_zpagey},
build_cpu6502.c:    {0x8e, "STX", 1, 0, "context->reg_x", &amode_abs},
build_cpu6502.c:    {0x84, "STY", 1, 0, "context->reg_y", &amode_zpage},
build_cpu6502.c:    {0x94, "STY", 1, 0, "context->reg_y", &amode_zpagex},
build_cpu6502.c:    {0x8c, "STY", 1, 0, "context->reg_y", &amode_abs},
build_cpu6502.c:     "    context->pc = addr;\n"
build_cpu6502.c:     "    context->cycles_left -= 3;\n"},
build_cpu6502.c:     "    context->pc = context->readfunc(context->cpu, addr);\n"
build_cpu6502.c:     "    context->pc |= context->readfunc(context->cpu, addr) << 8;\n"
build_cpu6502.c:     "    context->cycles_left -= 5;\n"},
build_cpu6502.c:     "    PUSH_BYTE(context, context->pc >> 8);\n"
build_cpu6502.c:     "    PUSH_BYTE(context, context->pc & 0xff);\n"
build_cpu6502.c:     "    context->pc = addr;\n"
build_cpu6502.c:     "    context->cycles_left -= 6;\n"},
build_cpu6502.c:     "    context->pc = POP_BYTE(context);\n"
build_cpu6502.c:     "    context->pc |= POP_BYTE(context) << 8;\n"
build_cpu6502.c:     "    context->pc++;\n"
build_cpu6502.c:     "    context->cycles_left -= 6;\n"},
build_cpu6502.c:     "    context->pc = POP_BYTE(context);\n"
build_cpu6502.c:     "    context->pc |= POP_BYTE(context) << 8;\n"
build_cpu6502.c:     "    context->cycles_left -= 6;\n"},
build_cpu6502.c:     "    context->pc++;\n"
build_cpu6502.c:     "    PUSH_BYTE(context, context->pc >> 8);\n"
build_cpu6502.c:     "    PUSH_BYTE(context, context->pc & 0xff);\n"
build_cpu6502.c:     "    context->flags |= FLAG_I;\n"
build_cpu6502.c:     "    context->flags &= ~FLAG_D;\n"
build_cpu6502.c:     "    context->pc = context->readfunc(context->cpu, VECTOR_BRK_LO);\n"
build_cpu6502.c:     "    context->pc |= context->readfunc(context->cpu, VECTOR_BRK_HI) << 8;\n"
build_cpu6502.c:     "    context->cycles_left -= 7;\n"},
build_cpu6502.c:    for (cur_instr = misc_instructions; cur_instr->instruction; cur_instr++) {
build_cpu6502.c:	emit_procheader(cur_instr->opcode);
build_cpu6502.c:	emit(cur_instr->instruction);
cal.c:    cpu->runfor(cpu, cycles);
cal.c:    cpu->run(cpu);
cal.c: * removed some now-useless includes
cd_unix.c:    /* NOTE: The FreeBSD 4.0 atapi-cd driver ignores the *_index elements */
cd_unix.c:    playblocks.len = to - from;
coleco.c:    cv_mmu[2].data = cv_memory - 0x6000;
coleco.c:    cv_mmu[3].data = cv_memory - 0x6400;
coleco.c:    cv_mmu[4].data = cv_memory - 0x6800;
coleco.c:    cv_mmu[5].data = cv_memory - 0x6c00;
coleco.c:    cv_mmu[6].data = cv_memory - 0x7000;
coleco.c:    cv_mmu[7].data = cv_memory - 0x7400;
coleco.c:    cv_mmu[8].data = cv_memory - 0x7800;
coleco.c:    cv_mmu[9].data = cv_memory - 0x7c00;
coleco.c:    cv_mmu[10].data = cv_game_rom - 0x8000;
coleco.c:	    cv_cpu->nmi(cv_cpu);
coleco.c:    cv_rom = romfile->data;
coleco.c:    cv_cpu->setmmu0(cv_cpu, cv_mmu);
coleco.c:    cv_cpu->setmmu8(cv_cpu, 0, 0, &cv_readfunc, &cv_writefunc);
coleco.c:    cv_cpu->setiou(cv_cpu, cv_io_read, cv_io_write);
coleco.c:    cv_cpu->reset(cv_cpu);
coleco.c:    cv_game_rom = romfile->data;
cpu6280.c: * CAL interface and non-generated code for the cpu6280 core
cpu6280.c:    (*cpu)->data.d_cpu6280 = calloc(1, sizeof(struct cpu6280_context));
cpu6280.c:    if (!(*cpu)->data.d_cpu6280) {
cpu6280.c:    (*cpu)->reset = cal_cpu6280_reset;
cpu6280.c:    (*cpu)->run = cal_cpu6280_run;
cpu6280.c:    (*cpu)->runfor = cal_cpu6280_runfor;
cpu6280.c:    (*cpu)->irq = cal_cpu6280_irq;
cpu6280.c:    (*cpu)->nmi = cal_cpu6280_nmi;
cpu6280.c:    (*cpu)->setzpage = cal_cpu6280_setzpage;
cpu6280.c:    (*cpu)->timeleft = cal_cpu6280_timeleft;
cpu6280.c:    (*cpu)->setmmu8 = cal_cpu6280_setmmu8;
cpu6280.c:    (*cpu)->data.d_cpu6280->cpu = *cpu;
cpu6280.c:    context = cpu->data.d_cpu6280;
cpu6280.c:    context->reg_a = 0x00;
cpu6280.c:    context->reg_x = 0x00;
cpu6280.c:    context->reg_y = 0x00;
cpu6280.c:    context->reg_s = 0xff;
cpu6280.c:    context->flags = 0x00; /* FIXME: wrong */
cpu6280.c:    context->mpr[0] = 0x00;
cpu6280.c:    context->mpr[1] = 0x00;
cpu6280.c:    context->mpr[2] = 0x00;
cpu6280.c:    context->mpr[3] = 0x00;
cpu6280.c:    context->mpr[4] = 0x00;
cpu6280.c:    context->mpr[5] = 0x00;
cpu6280.c:    context->mpr[6] = 0x00;
cpu6280.c:    context->mpr[7] = 0x00;
cpu6280.c:    context->pc = context->readfunc(cpu, VECTOR_RESET_LO);
cpu6280.c:    context->pc |= context->readfunc(cpu, VECTOR_RESET_HI) << 8;
cpu6280.c:    context = cpu->data.d_cpu6280;
cpu6280.c:    while (context->cycles_left > 0) {
cpu6280.c:    cpu->data.d_cpu6280->cycles_left += cycles;
cpu6280.c:    context = cpu->data.d_cpu6280;
cpu6280.c:    if (context->flags & FLAG_I) {
cpu6280.c:    PUSH_BYTE(context, context->pc >> 8);
cpu6280.c:    PUSH_BYTE(context, context->pc & 0xff);
cpu6280.c:    context->flags |= FLAG_I;
cpu6280.c:    context->flags &= ~FLAG_D;
cpu6280.c:    context->pc = context->readfunc(context->cpu, VECTOR_IRQ2_LO + irqno);
cpu6280.c:    context->pc |= context->readfunc(context->cpu, VECTOR_IRQ2_HI + irqno) << 8;
cpu6280.c:    cpu->data.d_cpu6280->zpage = page0;
cpu6280.c:    return cpu->data.d_cpu6280->cycles_left;
cpu6280.c:    cpu->data.d_cpu6280->readfunc = *rtbl;
cpu6280.c:    cpu->data.d_cpu6280->writefunc = *wtbl;
cpu6280.c:    retval = context->flags;
cpu6280.c:    retval |= context->flag_n & FLAG_N;
cpu6280.c:    retval |= (!context->flag_z) << 1;
cpu6280.c:    retval |= context->flag_c;
cpu6280.c:    retval |= context->flag_v >> 1;
cpu6280.c:    context->flags = flags & ~(FLAG_N | FLAG_Z | FLAG_V | FLAG_C);
cpu6280.c:    context->flag_n = flags;
cpu6280.c:    context->flag_z = !(flags & FLAG_Z);
cpu6280.c:    context->flag_c = flags & FLAG_C;
cpu6280.c:    context->flag_v = (flags & FLAG_V) << 1;
cpu6280.c:    context->pc -= 1;
cpu6280opc.c:    context->flag_c = 0;
cpu6280opc.c:    context->flags &= ~FLAG_C;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->flag_c = 1;
cpu6280opc.c:    context->flags |= FLAG_C;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->flags &= ~FLAG_D;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->flags |= FLAG_D;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->flags &= ~FLAG_I;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->flags |= FLAG_I;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->flag_v = 0;
cpu6280opc.c:    context->flags &= ~FLAG_V;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    addr2 += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a |= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    addr2 += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a &= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    addr2 += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a ^= tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    addr2 += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6280opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6280opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] = context->reg_a;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    context->zpage[addr] = context->reg_a;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->writefunc(context->cpu, addr, context->reg_a);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    context->writefunc(context->cpu, addr, context->reg_a);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    context->writefunc(context->cpu, addr, context->reg_a);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    context->writefunc(context->cpu, addr2, context->reg_a);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    context->writefunc(context->cpu, addr2, context->reg_a);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    addr2 += context->reg_y;
cpu6280opc.c:    context->writefunc(context->cpu, addr2, context->reg_a);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    addr2 += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a = tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    addr2 += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = context->reg_a - tmp;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr2 = context->zpage[addr1++];
cpu6280opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6280opc.c:    addr2 += context->reg_y;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6280opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6280opc.c:    if (context->flags & FLAG_D) {
cpu6280opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6280opc.c:        if (al & 0x10) al -= 6;
cpu6280opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6280opc.c:        if (ah & 0x10) ah -= 6;
cpu6280opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6280opc.c:        context->reg_a = result;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6280opc.c:            context->cycles_left -= 1;
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 3;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:    if (!(context->zpage[addr] & 0x01)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if (!(context->zpage[addr] & 0x02)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if (!(context->zpage[addr] & 0x04)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if (!(context->zpage[addr] & 0x08)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if (!(context->zpage[addr] & 0x10)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if (!(context->zpage[addr] & 0x20)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if (!(context->zpage[addr] & 0x40)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if (!(context->zpage[addr] & 0x80)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if ( (context->zpage[addr] & 0x01)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if ( (context->zpage[addr] & 0x02)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if ( (context->zpage[addr] & 0x04)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if ( (context->zpage[addr] & 0x08)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if ( (context->zpage[addr] & 0x10)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if ( (context->zpage[addr] & 0x20)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if ( (context->zpage[addr] & 0x40)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    if ( (context->zpage[addr] & 0x80)) {
cpu6280opc.c:        context->pc += delta;
cpu6280opc.c:        context->cycles_left -= 8;
cpu6280opc.c:        context->pc++;
cpu6280opc.c:        context->cycles_left -= 6;
cpu6280opc.c:    PUSH_BYTE(context, context->reg_a);
cpu6280opc.c:    context->cycles_left -= 3;
cpu6280opc.c:    context->cycles_left -= 3;
cpu6280opc.c:    PUSH_BYTE(context, context->reg_x);
cpu6280opc.c:    context->cycles_left -= 3;
cpu6280opc.c:    PUSH_BYTE(context, context->reg_y);
cpu6280opc.c:    context->cycles_left -= 3;
cpu6280opc.c:    context->reg_a = POP_BYTE(context);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_a);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->reg_x = POP_BYTE(context);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->reg_y = POP_BYTE(context);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->reg_a;
cpu6280opc.c:    context->reg_a = context->reg_x;
cpu6280opc.c:    context->reg_x = tmp;
cpu6280opc.c:    context->cycles_left -= 3;
cpu6280opc.c:    tmp = context->reg_a;
cpu6280opc.c:    context->reg_a = context->reg_y;
cpu6280opc.c:    context->reg_y = tmp;
cpu6280opc.c:    context->cycles_left -= 3;
cpu6280opc.c:    tmp = context->reg_x;
cpu6280opc.c:    context->reg_x = context->reg_y;
cpu6280opc.c:    context->reg_y = tmp;
cpu6280opc.c:    context->cycles_left -= 3;
cpu6280opc.c:    context->reg_x = context->reg_a;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6280opc.c:    context->reg_y = context->reg_a;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6280opc.c:    context->reg_x = context->reg_s;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6280opc.c:    context->reg_a = context->reg_x;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_a);
cpu6280opc.c:    context->reg_s = context->reg_x;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->reg_a = context->reg_y;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_a);
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 8;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->cycles_left -= 8;
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->zpage[addr] = data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->writefunc(context->cpu, addr, data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->zpage[addr] = data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    u8 reg = context->reg_a;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6280opc.c:    context->flags |= data & 0xc0;
cpu6280opc.c:        context->flags |= FLAG_Z;
cpu6280opc.c:    context->flag_n = data;
cpu6280opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6280opc.c:    context->flag_z = reg & data;
cpu6280opc.c:    context->writefunc(context->cpu, addr, data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    data = context->reg_a;
cpu6280opc.c:    context->reg_a = data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    data = context->reg_x;
cpu6280opc.c:    context->reg_x = data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    data = context->reg_y;
cpu6280opc.c:    context->reg_y = data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    data -= 1;
cpu6280opc.c:    context->zpage[addr] = data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    data = context->zpage[addr];
cpu6280opc.c:    data -= 1;
cpu6280opc.c:    context->zpage[addr] = data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    data -= 1;
cpu6280opc.c:    context->writefunc(context->cpu, addr, data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    data -= 1;
cpu6280opc.c:    context->writefunc(context->cpu, addr, data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    data = context->reg_a;
cpu6280opc.c:    data -= 1;
cpu6280opc.c:    context->reg_a = data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    data = context->reg_x;
cpu6280opc.c:    data -= 1;
cpu6280opc.c:    context->reg_x = data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    data = context->reg_y;
cpu6280opc.c:    data -= 1;
cpu6280opc.c:    context->reg_y = data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->reg_x = OPFETCH(context);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->reg_x = context->zpage[addr];
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_y;
cpu6280opc.c:    context->reg_x = context->zpage[addr];
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->reg_x = context->readfunc(context->cpu, addr);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_y;
cpu6280opc.c:    context->reg_x = context->readfunc(context->cpu, addr);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    context->reg_y = OPFETCH(context);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->reg_y = context->zpage[addr];
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    context->reg_y = context->zpage[addr];
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->reg_y = context->readfunc(context->cpu, addr);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    context->reg_y = context->readfunc(context->cpu, addr);
cpu6280opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    context->reg_a = 0;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->reg_x = 0;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->reg_y = 0;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    context->zpage[addr] = context->reg_x;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_y;
cpu6280opc.c:    context->zpage[addr] = context->reg_x;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->writefunc(context->cpu, addr, context->reg_x);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    context->zpage[addr] = context->reg_y;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    context->zpage[addr] = context->reg_y;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->writefunc(context->cpu, addr, context->reg_y);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    context->zpage[addr] = 0;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    context->zpage[addr] = 0;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->writefunc(context->cpu, addr, 0);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    context->writefunc(context->cpu, addr, 0);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    src_data = context->reg_a;
cpu6280opc.c:    context->reg_a = dst_data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    src_data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = dst_data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    src_data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = dst_data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    src_data = context->reg_a;
cpu6280opc.c:    context->reg_a = dst_data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    src_data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = dst_data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    src_data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = dst_data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    src_data = context->reg_a;
cpu6280opc.c:    context->reg_a = dst_data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    src_data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = dst_data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    src_data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = dst_data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    src_data = context->reg_a;
cpu6280opc.c:    context->reg_a = dst_data;
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    src_data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = dst_data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6280opc.c:    src_data = context->zpage[addr];
cpu6280opc.c:    context->zpage[addr] = dst_data;
cpu6280opc.c:    context->cycles_left -= 6;
cpu6280opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6280opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] &= ~1;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] &= ~2;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] &= ~4;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] &= ~8;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] &= ~16;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] &= ~32;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] &= ~64;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] &= ~128;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] |= 1;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] |= 2;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] |= 4;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] |= 8;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] |= 16;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] |= 32;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] |= 64;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->zpage[addr] |= 128;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    result = context->reg_y - tmp;
cpu6280opc.c:    SET_FLAG_C(context, context->reg_y >= tmp);
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_y - tmp;
cpu6280opc.c:    SET_FLAG_C(context, context->reg_y >= tmp);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_y - tmp;
cpu6280opc.c:    SET_FLAG_C(context, context->reg_y >= tmp);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    result = context->reg_x - tmp;
cpu6280opc.c:    SET_FLAG_C(context, context->reg_x >= tmp);
cpu6280opc.c:    context->cycles_left -= 2;
cpu6280opc.c:    tmp = context->zpage[addr];
cpu6280opc.c:    result = context->reg_x - tmp;
cpu6280opc.c:    SET_FLAG_C(context, context->reg_x >= tmp);
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6280opc.c:    result = context->reg_x - tmp;
cpu6280opc.c:    SET_FLAG_C(context, context->reg_x >= tmp);
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:    context->cycles_left -= (17 + (length * 6));
cpu6280opc.c:        context->writefunc(context->cpu, dest++, context->readfunc(context->cpu, source++));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:        context->writefunc(context->cpu, dest++, context->readfunc(context->cpu, source--));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:    context->cycles_left -= (17 + (length * 6));
cpu6280opc.c:        context->writefunc(context->cpu, dest--, context->readfunc(context->cpu, source--));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:        context->writefunc(context->cpu, dest--, context->readfunc(context->cpu, source--));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:    context->cycles_left -= (17 + (length * 6));
cpu6280opc.c:        context->writefunc(context->cpu, dest++, context->readfunc(context->cpu, source++));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:        context->writefunc(context->cpu, dest--, context->readfunc(context->cpu, source++));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:    context->cycles_left -= (17 + (length * 6));
cpu6280opc.c:        context->writefunc(context->cpu, dest++, context->readfunc(context->cpu, source++));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:        context->writefunc(context->cpu, dest++, context->readfunc(context->cpu, source++));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:    context->cycles_left -= (17 + (length * 6));
cpu6280opc.c:        context->writefunc(context->cpu, dest, context->readfunc(context->cpu, source++));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:        context->writefunc(context->cpu, dest, context->readfunc(context->cpu, source++));
cpu6280opc.c:        if (!--length) break;
cpu6280opc.c:    context->pc = addr;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->pc = context->readfunc(context->cpu, addr++);
cpu6280opc.c:    context->pc |= context->readfunc(context->cpu, addr) << 8;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    addr += context->reg_x;
cpu6280opc.c:    context->pc = context->readfunc(context->cpu, addr++);
cpu6280opc.c:    context->pc |= context->readfunc(context->cpu, addr) << 8;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    PUSH_BYTE(context, context->pc >> 8);
cpu6280opc.c:    PUSH_BYTE(context, context->pc & 0xff);
cpu6280opc.c:    context->pc = addr;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    PUSH_BYTE(context, context->pc >> 8);
cpu6280opc.c:    PUSH_BYTE(context, context->pc & 0xff);
cpu6280opc.c:    context->pc += delta;
cpu6280opc.c:    context->cycles_left -= 8;
cpu6280opc.c:    context->pc = POP_BYTE(context);
cpu6280opc.c:    context->pc |= POP_BYTE(context) << 8;
cpu6280opc.c:    context->pc++;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->pc = POP_BYTE(context);
cpu6280opc.c:    context->pc |= POP_BYTE(context) << 8;
cpu6280opc.c:    context->cycles_left -= 7;
cpu6280opc.c:    context->pc++;
cpu6280opc.c:    PUSH_BYTE(context, context->pc >> 8);
cpu6280opc.c:    PUSH_BYTE(context, context->pc & 0xff);
cpu6280opc.c:    context->flags |= FLAG_I;
cpu6280opc.c:    context->flags &= ~FLAG_D;
cpu6280opc.c:    context->pc = context->readfunc(context->cpu, VECTOR_BRK_LO);
cpu6280opc.c:    context->pc |= context->readfunc(context->cpu, VECTOR_BRK_HI) << 8;
cpu6280opc.c:    context->cycles_left -= 8;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    if (i & 0x80) { context->reg_a = context->mpr[7]; }
cpu6280opc.c:    if (i & 0x40) { context->reg_a = context->mpr[6]; }
cpu6280opc.c:    if (i & 0x20) { context->reg_a = context->mpr[5]; }
cpu6280opc.c:    if (i & 0x10) { context->reg_a = context->mpr[4]; }
cpu6280opc.c:    if (i & 0x08) { context->reg_a = context->mpr[3]; }
cpu6280opc.c:    if (i & 0x04) { context->reg_a = context->mpr[2]; }
cpu6280opc.c:    if (i & 0x02) { context->reg_a = context->mpr[1]; }
cpu6280opc.c:    if (i & 0x01) { context->reg_a = context->mpr[0]; }
cpu6280opc.c:    context->cycles_left -= 4;
cpu6280opc.c:    if (i & 0x80) { context->mpr[7] = context->reg_a; }
cpu6280opc.c:    if (i & 0x40) { context->mpr[6] = context->reg_a; }
cpu6280opc.c:    if (i & 0x20) { context->mpr[5] = context->reg_a; }
cpu6280opc.c:    if (i & 0x10) { context->mpr[4] = context->reg_a; }
cpu6280opc.c:    if (i & 0x08) { context->mpr[3] = context->reg_a; }
cpu6280opc.c:    if (i & 0x04) { context->mpr[2] = context->reg_a; }
cpu6280opc.c:    if (i & 0x02) { context->mpr[1] = context->reg_a; }
cpu6280opc.c:    if (i & 0x01) { context->mpr[0] = context->reg_a; }
cpu6280opc.c:    context->cycles_left -= 5;
cpu6280opc.c:        tmp = context->reg_a;
cpu6280opc.c:        context->reg_a = context->zpage[context->reg_x];
cpu6280opc.c:        context->zpage[context->reg_x] = context->reg_a;
cpu6280opc.c:        context->reg_a = tmp;
cpu6280opc.c:        context->cycles_left -= 5;
cpu6280opc.c:        context->cycles_left -= 2;
cpu6280opc.c:    cpu6280_op_225, cpu6280_op_15, cpu6280_op_114, cpu6280_op_229, /* 0x00 - 0x03 */
cpu6280opc.c:    cpu6280_op_132, cpu6280_op_9, cpu6280_op_172, cpu6280_op_191, /* 0x04 - 0x07 */
cpu6280opc.c:    cpu6280_op_105, cpu6280_op_8, cpu6280_op_171, cpu6280_op_0, /* 0x08 - 0x0b */
cpu6280opc.c:    cpu6280_op_133, cpu6280_op_11, cpu6280_op_174, cpu6280_op_88, /* 0x0c - 0x0f */
cpu6280opc.c:    cpu6280_op_80, cpu6280_op_16, cpu6280_op_14, cpu6280_op_230, /* 0x10 - 0x13 */
cpu6280opc.c:    cpu6280_op_130, cpu6280_op_10, cpu6280_op_173, cpu6280_op_192, /* 0x14 - 0x17 */
cpu6280opc.c:    cpu6280_op_1, cpu6280_op_13, cpu6280_op_138, cpu6280_op_0, /* 0x18 - 0x1b */
cpu6280opc.c:    cpu6280_op_131, cpu6280_op_12, cpu6280_op_175, cpu6280_op_89, /* 0x1c - 0x1f */
cpu6280opc.c:    cpu6280_op_221, cpu6280_op_24, cpu6280_op_112, cpu6280_op_231, /* 0x20 - 0x23 */
cpu6280opc.c:    cpu6280_op_122, cpu6280_op_18, cpu6280_op_177, cpu6280_op_193, /* 0x24 - 0x27 */
cpu6280opc.c:    cpu6280_op_109, cpu6280_op_17, cpu6280_op_176, cpu6280_op_0, /* 0x28 - 0x2b */
cpu6280opc.c:    cpu6280_op_124, cpu6280_op_20, cpu6280_op_179, cpu6280_op_90, /* 0x2c - 0x2f */
cpu6280opc.c:    cpu6280_op_81, cpu6280_op_25, cpu6280_op_23, cpu6280_op_0, /* 0x30 - 0x33 */
cpu6280opc.c:    cpu6280_op_123, cpu6280_op_19, cpu6280_op_178, cpu6280_op_194, /* 0x34 - 0x37 */
cpu6280opc.c:    cpu6280_op_2, cpu6280_op_22, cpu6280_op_145, cpu6280_op_0, /* 0x38 - 0x3b */
cpu6280opc.c:    cpu6280_op_125, cpu6280_op_21, cpu6280_op_180, cpu6280_op_91, /* 0x3c - 0x3f */
cpu6280opc.c:    cpu6280_op_224, cpu6280_op_33, cpu6280_op_113, cpu6280_op_232, /* 0x40 - 0x43 */
cpu6280opc.c:    cpu6280_op_222, cpu6280_op_27, cpu6280_op_182, cpu6280_op_195, /* 0x44 - 0x47 */
cpu6280opc.c:    cpu6280_op_104, cpu6280_op_26, cpu6280_op_181, cpu6280_op_0, /* 0x48 - 0x4b */
cpu6280opc.c:    cpu6280_op_218, cpu6280_op_29, cpu6280_op_184, cpu6280_op_92, /* 0x4c - 0x4f */
cpu6280opc.c:    cpu6280_op_82, cpu6280_op_34, cpu6280_op_32, cpu6280_op_233, /* 0x50 - 0x53 */
cpu6280opc.c:    cpu6280_op_228, cpu6280_op_28, cpu6280_op_183, cpu6280_op_196, /* 0x54 - 0x57 */
cpu6280opc.c:    cpu6280_op_5, cpu6280_op_31, cpu6280_op_107, cpu6280_op_0, /* 0x58 - 0x5b */
cpu6280opc.c:    cpu6280_op_0, cpu6280_op_30, cpu6280_op_185, cpu6280_op_93, /* 0x5c - 0x5f */
cpu6280opc.c:    cpu6280_op_223, cpu6280_op_42, cpu6280_op_158, cpu6280_op_0, /* 0x60 - 0x63 */
cpu6280opc.c:    cpu6280_op_167, cpu6280_op_36, cpu6280_op_187, cpu6280_op_197, /* 0x64 - 0x67 */
cpu6280opc.c:    cpu6280_op_108, cpu6280_op_35, cpu6280_op_186, cpu6280_op_0, /* 0x68 - 0x6b */
cpu6280opc.c:    cpu6280_op_219, cpu6280_op_38, cpu6280_op_189, cpu6280_op_94, /* 0x6c - 0x6f */
cpu6280opc.c:    cpu6280_op_83, cpu6280_op_43, cpu6280_op_41, cpu6280_op_216, /* 0x70 - 0x73 */
cpu6280opc.c:    cpu6280_op_168, cpu6280_op_37, cpu6280_op_188, cpu6280_op_198, /* 0x74 - 0x77 */
cpu6280opc.c:    cpu6280_op_6, cpu6280_op_40, cpu6280_op_111, cpu6280_op_0, /* 0x78 - 0x7b */
cpu6280opc.c:    cpu6280_op_220, cpu6280_op_39, cpu6280_op_190, cpu6280_op_95, /* 0x7c - 0x7f */
cpu6280opc.c:    cpu6280_op_79, cpu6280_op_50, cpu6280_op_159, cpu6280_op_126, /* 0x80 - 0x83 */
cpu6280opc.c:    cpu6280_op_164, cpu6280_op_44, cpu6280_op_161, cpu6280_op_199, /* 0x84 - 0x87 */
cpu6280opc.c:    cpu6280_op_147, cpu6280_op_121, cpu6280_op_118, cpu6280_op_0, /* 0x88 - 0x8b */
cpu6280opc.c:    cpu6280_op_166, cpu6280_op_46, cpu6280_op_163, cpu6280_op_96, /* 0x8c - 0x8f */
cpu6280opc.c:    cpu6280_op_84, cpu6280_op_51, cpu6280_op_49, cpu6280_op_128, /* 0x90 - 0x93 */
cpu6280opc.c:    cpu6280_op_165, cpu6280_op_45, cpu6280_op_162, cpu6280_op_200, /* 0x94 - 0x97 */
cpu6280opc.c:    cpu6280_op_120, cpu6280_op_48, cpu6280_op_119, cpu6280_op_0, /* 0x98 - 0x9b */
cpu6280opc.c:    cpu6280_op_169, cpu6280_op_47, cpu6280_op_170, cpu6280_op_97, /* 0x9c - 0x9f */
cpu6280opc.c:    cpu6280_op_153, cpu6280_op_59, cpu6280_op_148, cpu6280_op_127, /* 0xa0 - 0xa3 */
cpu6280opc.c:    cpu6280_op_154, cpu6280_op_53, cpu6280_op_149, cpu6280_op_201, /* 0xa4 - 0xa7 */
cpu6280opc.c:    cpu6280_op_116, cpu6280_op_52, cpu6280_op_115, cpu6280_op_0, /* 0xa8 - 0xab */
cpu6280opc.c:    cpu6280_op_156, cpu6280_op_55, cpu6280_op_151, cpu6280_op_98, /* 0xac - 0xaf */
cpu6280opc.c:    cpu6280_op_85, cpu6280_op_60, cpu6280_op_58, cpu6280_op_129, /* 0xb0 - 0xb3 */
cpu6280opc.c:    cpu6280_op_155, cpu6280_op_54, cpu6280_op_150, cpu6280_op_202, /* 0xb4 - 0xb7 */
cpu6280opc.c:    cpu6280_op_7, cpu6280_op_57, cpu6280_op_117, cpu6280_op_0, /* 0xb8 - 0xbb */
cpu6280opc.c:    cpu6280_op_157, cpu6280_op_56, cpu6280_op_152, cpu6280_op_99, /* 0xbc - 0xbf */
cpu6280opc.c:    cpu6280_op_207, cpu6280_op_68, cpu6280_op_160, cpu6280_op_214, /* 0xc0 - 0xc3 */
cpu6280opc.c:    cpu6280_op_208, cpu6280_op_62, cpu6280_op_141, cpu6280_op_203, /* 0xc4 - 0xc7 */
cpu6280opc.c:    cpu6280_op_140, cpu6280_op_61, cpu6280_op_146, cpu6280_op_0, /* 0xc8 - 0xcb */
cpu6280opc.c:    cpu6280_op_209, cpu6280_op_64, cpu6280_op_143, cpu6280_op_100, /* 0xcc - 0xcf */
cpu6280opc.c:    cpu6280_op_86, cpu6280_op_69, cpu6280_op_67, cpu6280_op_217, /* 0xd0 - 0xd3 */
cpu6280opc.c:    cpu6280_op_227, cpu6280_op_63, cpu6280_op_142, cpu6280_op_204, /* 0xd4 - 0xd7 */
cpu6280opc.c:    cpu6280_op_3, cpu6280_op_66, cpu6280_op_106, cpu6280_op_0, /* 0xd8 - 0xdb */
cpu6280opc.c:    cpu6280_op_0, cpu6280_op_65, cpu6280_op_144, cpu6280_op_101, /* 0xdc - 0xdf */
cpu6280opc.c:    cpu6280_op_210, cpu6280_op_77, cpu6280_op_0, cpu6280_op_215, /* 0xe0 - 0xe3 */
cpu6280opc.c:    cpu6280_op_211, cpu6280_op_71, cpu6280_op_134, cpu6280_op_205, /* 0xe4 - 0xe7 */
cpu6280opc.c:    cpu6280_op_139, cpu6280_op_70, cpu6280_op_226, cpu6280_op_0, /* 0xe8 - 0xeb */
cpu6280opc.c:    cpu6280_op_212, cpu6280_op_73, cpu6280_op_136, cpu6280_op_102, /* 0xec - 0xef */
cpu6280opc.c:    cpu6280_op_87, cpu6280_op_78, cpu6280_op_76, cpu6280_op_213, /* 0xf0 - 0xf3 */
cpu6280opc.c:    cpu6280_op_234, cpu6280_op_72, cpu6280_op_135, cpu6280_op_206, /* 0xf4 - 0xf7 */
cpu6280opc.c:    cpu6280_op_4, cpu6280_op_75, cpu6280_op_110, cpu6280_op_0, /* 0xf8 - 0xfb */
cpu6280opc.c:    cpu6280_op_0, cpu6280_op_74, cpu6280_op_137, cpu6280_op_103, /* 0xfc - 0xff */
cpu6502.c: * CAL interface and non-generated code for the cpu6502 core
cpu6502.c:    context->cpu = userdata;
cpu6502.c:    context->readfunc = readfunc;
cpu6502.c:    context->writefunc = writefunc;
cpu6502.c:    context->zpage = page0;
cpu6502.c:    context->reg_a = 0x00;
cpu6502.c:    context->reg_x = 0x00;
cpu6502.c:    context->reg_y = 0x00;
cpu6502.c:    context->reg_s = 0xff;
cpu6502.c:    context->pc = context->readfunc(context->cpu, VECTOR_RESET_LO);
cpu6502.c:    context->pc |= context->readfunc(context->cpu, VECTOR_RESET_HI) << 8;
cpu6502.c:    while (context->cycles_left > 0) {
cpu6502.c:    context->cycles_left += cycles;
cpu6502.c:    if (context->flags & FLAG_I) {
cpu6502.c:    PUSH_BYTE(context, context->pc >> 8);
cpu6502.c:    PUSH_BYTE(context, context->pc & 0xff);
cpu6502.c:    context->flags |= FLAG_I;
cpu6502.c:    context->flags &= ~FLAG_D;
cpu6502.c:    context->pc = context->readfunc(context->cpu, VECTOR_IRQ_LO);
cpu6502.c:    context->pc |= context->readfunc(context->cpu, VECTOR_IRQ_HI) << 8;
cpu6502.c:    context->cycles_left -= 7;
cpu6502.c:    PUSH_BYTE(context, context->pc >> 8);
cpu6502.c:    PUSH_BYTE(context, context->pc & 0xff);
cpu6502.c:    context->pc = context->readfunc(context->cpu, VECTOR_NMI_LO);
cpu6502.c:    context->pc |= context->readfunc(context->cpu, VECTOR_NMI_HI) << 8;
cpu6502.c:    context->cycles_left -= 7;
cpu6502.c:    retval = context->flags;
cpu6502.c:    retval |= context->flag_n & FLAG_N;
cpu6502.c:    retval |= (!context->flag_z) << 1;
cpu6502.c:    retval |= context->flag_c;
cpu6502.c:    retval |= context->flag_v >> 1;
cpu6502.c:    context->flags = flags & ~(FLAG_N | FLAG_Z | FLAG_V | FLAG_C);
cpu6502.c:    context->flag_n = flags;
cpu6502.c:    context->flag_z = !(flags & FLAG_Z);
cpu6502.c:    context->flag_c = flags & FLAG_C;
cpu6502.c:    context->flag_v = (flags & FLAG_V) << 1;
cpu6502.c:    context->pc -= 1;
cpu6502.c:    (*cpu)->data.d_cpu6502 = calloc(1, sizeof(struct cpu6502_context));
cpu6502.c:    if (!(*cpu)->data.d_cpu6502) {
cpu6502.c:    (*cpu)->reset = cal_cpu6502_reset;
cpu6502.c:    (*cpu)->run = cal_cpu6502_run;
cpu6502.c:    (*cpu)->runfor = cal_cpu6502_runfor;
cpu6502.c:    (*cpu)->irq = cal_cpu6502_irq;
cpu6502.c:    (*cpu)->nmi = cal_cpu6502_nmi;
cpu6502.c:    (*cpu)->setzpage = cal_cpu6502_setzpage;
cpu6502.c:    (*cpu)->timeleft = cal_cpu6502_timeleft;
cpu6502.c:    (*cpu)->setmmu8 = cal_cpu6502_setmmu8;
cpu6502.c:    (*cpu)->data.d_cpu6502->cpu = *cpu;
cpu6502.c:    cpu6502_reset(cpu->data.d_cpu6502);
cpu6502.c:    cpu6502_run(cpu->data.d_cpu6502);
cpu6502.c:    cpu6502_runfor(cpu->data.d_cpu6502, cycles);
cpu6502.c:    cpu6502_irq(cpu->data.d_cpu6502);
cpu6502.c:    cpu6502_nmi(cpu->data.d_cpu6502);
cpu6502.c:    cpu6502_setzpage(cpu->data.d_cpu6502, page0);
cpu6502.c:    return cpu->data.d_cpu6502->cycles_left;
cpu6502.c:    cpu6502_setmemhandlers(cpu->data.d_cpu6502, *rtbl, *wtbl);
cpu6502opc.c:    context->flag_c = 0;
cpu6502opc.c:    context->flags &= ~FLAG_C;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->flag_c = 1;
cpu6502opc.c:    context->flags |= FLAG_C;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->flags &= ~FLAG_D;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->flags |= FLAG_D;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->flags &= ~FLAG_I;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->flags |= FLAG_I;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->flag_v = 0;
cpu6502opc.c:    context->flags &= ~FLAG_V;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    result = context->reg_a |= tmp;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a |= tmp;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a |= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a |= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a |= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a |= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a |= tmp;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->reg_y;
cpu6502opc.c:    if (addr2 >= 0x100) context->cycles_left--;
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a |= tmp;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    result = context->reg_a &= tmp;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a &= tmp;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a &= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a &= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a &= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a &= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a &= tmp;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->reg_y;
cpu6502opc.c:    if (addr2 >= 0x100) context->cycles_left--;
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a &= tmp;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    result = context->reg_a ^= tmp;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a ^= tmp;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a ^= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a ^= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a ^= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a ^= tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a ^= tmp;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->reg_y;
cpu6502opc.c:    if (addr2 >= 0x100) context->cycles_left--;
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a ^= tmp;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6502opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6502opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6502opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6502opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6502opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6502opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6502opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6502opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6502opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6502opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6502opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6502opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6502opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6502opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->reg_y;
cpu6502opc.c:    if (addr2 >= 0x100) context->cycles_left--;
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a + tmp + (STATUS_CARRY(context));
cpu6502opc.c:    SET_FLAG_V(context, (((result ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = (context->reg_a & 0x0f) + (tmp & 0x0f) + (STATUS_CARRY(context));
cpu6502opc.c:        ah = (context->reg_a >> 4) + (tmp >> 4) + (al > 0x0f);
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    context->zpage[addr] = context->reg_a;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    context->zpage[addr] = context->reg_a;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->writefunc(context->cpu, addr, context->reg_a);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    context->writefunc(context->cpu, addr, context->reg_a);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    context->writefunc(context->cpu, addr, context->reg_a);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    context->writefunc(context->cpu, addr2, context->reg_a);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->reg_y;
cpu6502opc.c:    if (addr2 >= 0x100) context->cycles_left--;
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    context->writefunc(context->cpu, addr2, context->reg_a);
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    result = context->reg_a = tmp;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a = tmp;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a = tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a = tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a = tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a = tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a = tmp;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->reg_y;
cpu6502opc.c:    if (addr2 >= 0x100) context->cycles_left--;
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a = tmp;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    result = context->reg_a - tmp;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a - tmp;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_a - tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a - tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a - tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_a - tmp;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a - tmp;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->reg_y;
cpu6502opc.c:    if (addr2 >= 0x100) context->cycles_left--;
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = context->reg_a - tmp;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:        if (al & 0x10) al -= 6;
cpu6502opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6502opc.c:        if (ah & 0x10) ah -= 6;
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:        if (al & 0x10) al -= 6;
cpu6502opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6502opc.c:        if (ah & 0x10) ah -= 6;
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:        if (al & 0x10) al -= 6;
cpu6502opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6502opc.c:        if (ah & 0x10) ah -= 6;
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:        if (al & 0x10) al -= 6;
cpu6502opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6502opc.c:        if (ah & 0x10) ah -= 6;
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:        if (al & 0x10) al -= 6;
cpu6502opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6502opc.c:        if (ah & 0x10) ah -= 6;
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:        if (al & 0x10) al -= 6;
cpu6502opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6502opc.c:        if (ah & 0x10) ah -= 6;
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr1 = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:        if (al & 0x10) al -= 6;
cpu6502opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6502opc.c:        if (ah & 0x10) ah -= 6;
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr2 = context->zpage[addr1++];
cpu6502opc.c:    addr2 += context->reg_y;
cpu6502opc.c:    if (addr2 >= 0x100) context->cycles_left--;
cpu6502opc.c:    addr2 += context->zpage[addr1] << 8;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr2);
cpu6502opc.c:    result = (context->reg_a - tmp) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:    SET_FLAG_V(context, (((context->reg_a ^ tmp) & (context->reg_a ^ result)) & 0x80));
cpu6502opc.c:    if (context->flags & FLAG_D) {
cpu6502opc.c:        al = ((context->reg_a & 0x0f) - (tmp & 0x0f)) - (1 - (STATUS_CARRY(context)));
cpu6502opc.c:        if (al & 0x10) al -= 6;
cpu6502opc.c:        ah = ((context->reg_a >> 4) - (tmp >> 4)) - ((al & 0x10) >> 4);
cpu6502opc.c:        if (ah & 0x10) ah -= 6;
cpu6502opc.c:        context->reg_a = (ah << 4) | (al & 0x0f);
cpu6502opc.c:        context->reg_a = result;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6502opc.c:            context->cycles_left -= 1;
cpu6502opc.c:        context->pc += delta;
cpu6502opc.c:        context->cycles_left -= 3;
cpu6502opc.c:        context->pc++;
cpu6502opc.c:        context->cycles_left -= 2;
cpu6502opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6502opc.c:            context->cycles_left -= 1;
cpu6502opc.c:        context->pc += delta;
cpu6502opc.c:        context->cycles_left -= 3;
cpu6502opc.c:        context->pc++;
cpu6502opc.c:        context->cycles_left -= 2;
cpu6502opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6502opc.c:            context->cycles_left -= 1;
cpu6502opc.c:        context->pc += delta;
cpu6502opc.c:        context->cycles_left -= 3;
cpu6502opc.c:        context->pc++;
cpu6502opc.c:        context->cycles_left -= 2;
cpu6502opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6502opc.c:            context->cycles_left -= 1;
cpu6502opc.c:        context->pc += delta;
cpu6502opc.c:        context->cycles_left -= 3;
cpu6502opc.c:        context->pc++;
cpu6502opc.c:        context->cycles_left -= 2;
cpu6502opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6502opc.c:            context->cycles_left -= 1;
cpu6502opc.c:        context->pc += delta;
cpu6502opc.c:        context->cycles_left -= 3;
cpu6502opc.c:        context->pc++;
cpu6502opc.c:        context->cycles_left -= 2;
cpu6502opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6502opc.c:            context->cycles_left -= 1;
cpu6502opc.c:        context->pc += delta;
cpu6502opc.c:        context->cycles_left -= 3;
cpu6502opc.c:        context->pc++;
cpu6502opc.c:        context->cycles_left -= 2;
cpu6502opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6502opc.c:            context->cycles_left -= 1;
cpu6502opc.c:        context->pc += delta;
cpu6502opc.c:        context->cycles_left -= 3;
cpu6502opc.c:        context->pc++;
cpu6502opc.c:        context->cycles_left -= 2;
cpu6502opc.c:        if (((context->pc & 0xff) + delta) & 0xff00) {
cpu6502opc.c:            context->cycles_left -= 1;
cpu6502opc.c:        context->pc += delta;
cpu6502opc.c:        context->cycles_left -= 3;
cpu6502opc.c:        context->pc++;
cpu6502opc.c:        context->cycles_left -= 2;
cpu6502opc.c:    PUSH_BYTE(context, context->reg_a);
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    context->reg_a = POP_BYTE(context);
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_a);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->reg_x = context->reg_a;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6502opc.c:    context->reg_y = context->reg_a;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6502opc.c:    context->reg_x = context->reg_s;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6502opc.c:    context->reg_a = context->reg_x;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_a);
cpu6502opc.c:    context->reg_s = context->reg_x;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->reg_a = context->reg_y;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_a);
cpu6502opc.c:    u8 reg = context->reg_a;
cpu6502opc.c:    data = context->zpage[addr];
cpu6502opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6502opc.c:    context->flags |= data & 0xc0;
cpu6502opc.c:        context->flags |= FLAG_Z;
cpu6502opc.c:    context->flag_n = data;
cpu6502opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6502opc.c:    context->flag_z = reg & data;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    u8 reg = context->reg_a;
cpu6502opc.c:    data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->flags &= ~(0xc0 | FLAG_Z);
cpu6502opc.c:    context->flags |= data & 0xc0;
cpu6502opc.c:        context->flags |= FLAG_Z;
cpu6502opc.c:    context->flag_n = data;
cpu6502opc.c:    context->flag_v = (data & FLAG_V) << 1;
cpu6502opc.c:    context->flag_z = reg & data;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = data;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = data;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    data = context->reg_x;
cpu6502opc.c:    context->reg_x = data;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    data = context->reg_y;
cpu6502opc.c:    context->reg_y = data;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    data = context->zpage[addr];
cpu6502opc.c:    data -= 1;
cpu6502opc.c:    context->zpage[addr] = data;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    data = context->zpage[addr];
cpu6502opc.c:    data -= 1;
cpu6502opc.c:    context->zpage[addr] = data;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    data -= 1;
cpu6502opc.c:    context->writefunc(context->cpu, addr, data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    data -= 1;
cpu6502opc.c:    context->writefunc(context->cpu, addr, data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    data = context->reg_x;
cpu6502opc.c:    data -= 1;
cpu6502opc.c:    context->reg_x = data;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    data = context->reg_y;
cpu6502opc.c:    data -= 1;
cpu6502opc.c:    context->reg_y = data;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->reg_x = OPFETCH(context);
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->reg_x = context->zpage[addr];
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_y;
cpu6502opc.c:    context->reg_x = context->zpage[addr];
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->reg_x = context->readfunc(context->cpu, addr);
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_y;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    context->reg_x = context->readfunc(context->cpu, addr);
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_x);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->reg_y = OPFETCH(context);
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    context->reg_y = context->zpage[addr];
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    context->reg_y = context->zpage[addr];
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->reg_y = context->readfunc(context->cpu, addr);
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    context->reg_y = context->readfunc(context->cpu, addr);
cpu6502opc.c:    EVAL_FLAGNZ(context, context->reg_y);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->zpage[addr] = context->reg_x;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_y;
cpu6502opc.c:    context->zpage[addr] = context->reg_x;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->writefunc(context->cpu, addr, context->reg_x);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->zpage[addr] = context->reg_y;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    context->zpage[addr] = context->reg_y;
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->writefunc(context->cpu, addr, context->reg_y);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    src_data = context->reg_a;
cpu6502opc.c:    context->reg_a = dst_data;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    src_data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = dst_data;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    src_data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = dst_data;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    src_data = context->reg_a;
cpu6502opc.c:    context->reg_a = dst_data;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    src_data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = dst_data;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    src_data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = dst_data;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    src_data = context->reg_a;
cpu6502opc.c:    context->reg_a = dst_data;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    src_data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = dst_data;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    src_data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = dst_data;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    src_data = context->reg_a;
cpu6502opc.c:    context->reg_a = dst_data;
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    src_data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = dst_data;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    addr = OPFETCH(context) + context->reg_x;
cpu6502opc.c:    src_data = context->zpage[addr];
cpu6502opc.c:    context->zpage[addr] = dst_data;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    addr += context->reg_x;
cpu6502opc.c:    if (addr >= 0x100) context->cycles_left--;
cpu6502opc.c:    src_data = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->writefunc(context->cpu, addr, dst_data);
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    result = context->reg_y - tmp;
cpu6502opc.c:    SET_FLAG_C(context, context->reg_y >= tmp);
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_y - tmp;
cpu6502opc.c:    SET_FLAG_C(context, context->reg_y >= tmp);
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_y - tmp;
cpu6502opc.c:    SET_FLAG_C(context, context->reg_y >= tmp);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    result = context->reg_x - tmp;
cpu6502opc.c:    SET_FLAG_C(context, context->reg_x >= tmp);
cpu6502opc.c:    context->cycles_left -= 2;
cpu6502opc.c:    tmp = context->zpage[addr];
cpu6502opc.c:    result = context->reg_x - tmp;
cpu6502opc.c:    SET_FLAG_C(context, context->reg_x >= tmp);
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    tmp = context->readfunc(context->cpu, addr);
cpu6502opc.c:    result = context->reg_x - tmp;
cpu6502opc.c:    SET_FLAG_C(context, context->reg_x >= tmp);
cpu6502opc.c:    context->cycles_left -= 4;
cpu6502opc.c:    context->pc = addr;
cpu6502opc.c:    context->cycles_left -= 3;
cpu6502opc.c:    context->pc = context->readfunc(context->cpu, addr);
cpu6502opc.c:    context->pc |= context->readfunc(context->cpu, addr) << 8;
cpu6502opc.c:    context->cycles_left -= 5;
cpu6502opc.c:    PUSH_BYTE(context, context->pc >> 8);
cpu6502opc.c:    PUSH_BYTE(context, context->pc & 0xff);
cpu6502opc.c:    context->pc = addr;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    context->pc = POP_BYTE(context);
cpu6502opc.c:    context->pc |= POP_BYTE(context) << 8;
cpu6502opc.c:    context->pc++;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    context->pc = POP_BYTE(context);
cpu6502opc.c:    context->pc |= POP_BYTE(context) << 8;
cpu6502opc.c:    context->cycles_left -= 6;
cpu6502opc.c:    context->pc++;
cpu6502opc.c:    PUSH_BYTE(context, context->pc >> 8);
cpu6502opc.c:    PUSH_BYTE(context, context->pc & 0xff);
cpu6502opc.c:    context->flags |= FLAG_I;
cpu6502opc.c:    context->flags &= ~FLAG_D;
cpu6502opc.c:    context->pc = context->readfunc(context->cpu, VECTOR_BRK_LO);
cpu6502opc.c:    context->pc |= context->readfunc(context->cpu, VECTOR_BRK_HI) << 8;
cpu6502opc.c:    context->cycles_left -= 7;
cpu6502opc.c:    cpu6502_op_150, cpu6502_op_14, cpu6502_op_0, cpu6502_op_0, /* 0x00 - 0x03 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_9, cpu6502_op_120, cpu6502_op_0, /* 0x04 - 0x07 */
cpu6502opc.c:    cpu6502_op_80, cpu6502_op_8, cpu6502_op_119, cpu6502_op_0, /* 0x08 - 0x0b */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_11, cpu6502_op_122, cpu6502_op_0, /* 0x0c - 0x0f */
cpu6502opc.c:    cpu6502_op_71, cpu6502_op_15, cpu6502_op_0, cpu6502_op_0, /* 0x10 - 0x13 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_10, cpu6502_op_121, cpu6502_op_0, /* 0x14 - 0x17 */
cpu6502opc.c:    cpu6502_op_1, cpu6502_op_13, cpu6502_op_0, cpu6502_op_0, /* 0x18 - 0x1b */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_12, cpu6502_op_123, cpu6502_op_0, /* 0x1c - 0x1f */
cpu6502opc.c:    cpu6502_op_147, cpu6502_op_22, cpu6502_op_0, cpu6502_op_0, /* 0x20 - 0x23 */
cpu6502opc.c:    cpu6502_op_89, cpu6502_op_17, cpu6502_op_125, cpu6502_op_0, /* 0x24 - 0x27 */
cpu6502opc.c:    cpu6502_op_82, cpu6502_op_16, cpu6502_op_124, cpu6502_op_0, /* 0x28 - 0x2b */
cpu6502opc.c:    cpu6502_op_90, cpu6502_op_19, cpu6502_op_127, cpu6502_op_0, /* 0x2c - 0x2f */
cpu6502opc.c:    cpu6502_op_72, cpu6502_op_23, cpu6502_op_0, cpu6502_op_0, /* 0x30 - 0x33 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_18, cpu6502_op_126, cpu6502_op_0, /* 0x34 - 0x37 */
cpu6502opc.c:    cpu6502_op_2, cpu6502_op_21, cpu6502_op_0, cpu6502_op_0, /* 0x38 - 0x3b */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_20, cpu6502_op_128, cpu6502_op_0, /* 0x3c - 0x3f */
cpu6502opc.c:    cpu6502_op_149, cpu6502_op_30, cpu6502_op_0, cpu6502_op_0, /* 0x40 - 0x43 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_25, cpu6502_op_130, cpu6502_op_0, /* 0x44 - 0x47 */
cpu6502opc.c:    cpu6502_op_79, cpu6502_op_24, cpu6502_op_129, cpu6502_op_0, /* 0x48 - 0x4b */
cpu6502opc.c:    cpu6502_op_145, cpu6502_op_27, cpu6502_op_132, cpu6502_op_0, /* 0x4c - 0x4f */
cpu6502opc.c:    cpu6502_op_73, cpu6502_op_31, cpu6502_op_0, cpu6502_op_0, /* 0x50 - 0x53 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_26, cpu6502_op_131, cpu6502_op_0, /* 0x54 - 0x57 */
cpu6502opc.c:    cpu6502_op_5, cpu6502_op_29, cpu6502_op_0, cpu6502_op_0, /* 0x58 - 0x5b */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_28, cpu6502_op_133, cpu6502_op_0, /* 0x5c - 0x5f */
cpu6502opc.c:    cpu6502_op_148, cpu6502_op_38, cpu6502_op_0, cpu6502_op_0, /* 0x60 - 0x63 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_33, cpu6502_op_135, cpu6502_op_0, /* 0x64 - 0x67 */
cpu6502opc.c:    cpu6502_op_81, cpu6502_op_32, cpu6502_op_134, cpu6502_op_0, /* 0x68 - 0x6b */
cpu6502opc.c:    cpu6502_op_146, cpu6502_op_35, cpu6502_op_137, cpu6502_op_0, /* 0x6c - 0x6f */
cpu6502opc.c:    cpu6502_op_74, cpu6502_op_39, cpu6502_op_0, cpu6502_op_0, /* 0x70 - 0x73 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_34, cpu6502_op_136, cpu6502_op_0, /* 0x74 - 0x77 */
cpu6502opc.c:    cpu6502_op_6, cpu6502_op_37, cpu6502_op_0, cpu6502_op_0, /* 0x78 - 0x7b */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_36, cpu6502_op_138, cpu6502_op_0, /* 0x7c - 0x7f */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_45, cpu6502_op_0, cpu6502_op_0, /* 0x80 - 0x83 */
cpu6502opc.c:    cpu6502_op_116, cpu6502_op_40, cpu6502_op_113, cpu6502_op_0, /* 0x84 - 0x87 */
cpu6502opc.c:    cpu6502_op_102, cpu6502_op_0, cpu6502_op_86, cpu6502_op_0, /* 0x88 - 0x8b */
cpu6502opc.c:    cpu6502_op_118, cpu6502_op_42, cpu6502_op_115, cpu6502_op_0, /* 0x8c - 0x8f */
cpu6502opc.c:    cpu6502_op_75, cpu6502_op_46, cpu6502_op_0, cpu6502_op_0, /* 0x90 - 0x93 */
cpu6502opc.c:    cpu6502_op_117, cpu6502_op_41, cpu6502_op_114, cpu6502_op_0, /* 0x94 - 0x97 */
cpu6502opc.c:    cpu6502_op_88, cpu6502_op_44, cpu6502_op_87, cpu6502_op_0, /* 0x98 - 0x9b */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_43, cpu6502_op_0, cpu6502_op_0, /* 0x9c - 0x9f */
cpu6502opc.c:    cpu6502_op_108, cpu6502_op_53, cpu6502_op_103, cpu6502_op_0, /* 0xa0 - 0xa3 */
cpu6502opc.c:    cpu6502_op_109, cpu6502_op_48, cpu6502_op_104, cpu6502_op_0, /* 0xa4 - 0xa7 */
cpu6502opc.c:    cpu6502_op_84, cpu6502_op_47, cpu6502_op_83, cpu6502_op_0, /* 0xa8 - 0xab */
cpu6502opc.c:    cpu6502_op_111, cpu6502_op_50, cpu6502_op_106, cpu6502_op_0, /* 0xac - 0xaf */
cpu6502opc.c:    cpu6502_op_76, cpu6502_op_54, cpu6502_op_0, cpu6502_op_0, /* 0xb0 - 0xb3 */
cpu6502opc.c:    cpu6502_op_110, cpu6502_op_49, cpu6502_op_105, cpu6502_op_0, /* 0xb4 - 0xb7 */
cpu6502opc.c:    cpu6502_op_7, cpu6502_op_52, cpu6502_op_85, cpu6502_op_0, /* 0xb8 - 0xbb */
cpu6502opc.c:    cpu6502_op_112, cpu6502_op_51, cpu6502_op_107, cpu6502_op_0, /* 0xbc - 0xbf */
cpu6502opc.c:    cpu6502_op_139, cpu6502_op_61, cpu6502_op_0, cpu6502_op_0, /* 0xc0 - 0xc3 */
cpu6502opc.c:    cpu6502_op_140, cpu6502_op_56, cpu6502_op_97, cpu6502_op_0, /* 0xc4 - 0xc7 */
cpu6502opc.c:    cpu6502_op_96, cpu6502_op_55, cpu6502_op_101, cpu6502_op_0, /* 0xc8 - 0xcb */
cpu6502opc.c:    cpu6502_op_141, cpu6502_op_58, cpu6502_op_99, cpu6502_op_0, /* 0xcc - 0xcf */
cpu6502opc.c:    cpu6502_op_77, cpu6502_op_62, cpu6502_op_0, cpu6502_op_0, /* 0xd0 - 0xd3 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_57, cpu6502_op_98, cpu6502_op_0, /* 0xd4 - 0xd7 */
cpu6502opc.c:    cpu6502_op_3, cpu6502_op_60, cpu6502_op_0, cpu6502_op_0, /* 0xd8 - 0xdb */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_59, cpu6502_op_100, cpu6502_op_0, /* 0xdc - 0xdf */
cpu6502opc.c:    cpu6502_op_142, cpu6502_op_69, cpu6502_op_0, cpu6502_op_0, /* 0xe0 - 0xe3 */
cpu6502opc.c:    cpu6502_op_143, cpu6502_op_64, cpu6502_op_91, cpu6502_op_0, /* 0xe4 - 0xe7 */
cpu6502opc.c:    cpu6502_op_95, cpu6502_op_63, cpu6502_op_151, cpu6502_op_0, /* 0xe8 - 0xeb */
cpu6502opc.c:    cpu6502_op_144, cpu6502_op_66, cpu6502_op_93, cpu6502_op_0, /* 0xec - 0xef */
cpu6502opc.c:    cpu6502_op_78, cpu6502_op_70, cpu6502_op_0, cpu6502_op_0, /* 0xf0 - 0xf3 */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_65, cpu6502_op_92, cpu6502_op_0, /* 0xf4 - 0xf7 */
cpu6502opc.c:    cpu6502_op_4, cpu6502_op_68, cpu6502_op_0, cpu6502_op_0, /* 0xf8 - 0xfb */
cpu6502opc.c:    cpu6502_op_0, cpu6502_op_67, cpu6502_op_94, cpu6502_op_0, /* 0xfc - 0xff */
dt68000.c:	*buf++ = '-';
dt68000.c:	if ((opword & cur_instr->mask) == cur_instr->pattern) {
dt68000.c:	    if (cur_instr->flags & F_RELJMP) {
dt68000.c:		if (((opword & 0xff) && (!(cur_instr->flags & F_SRCREG)))) {
dt68000.c:		if (cur_instr->flags & F_SRCDST) {
dt68000.c:	    if (cur_instr->flags & F_LOBYTE) {
dt68000.c:	    if ((cur_instr->flags & F_IMDATA) == F_IMBYTE) {
dt68000.c:	    if ((cur_instr->flags & F_IMDATA) == F_IMWORD) {
dt68000.c:	    if ((cur_instr->flags & F_IMDATA) == F_IMLONG) {
dt68000.c:	    if (cur_instr->flags & F_QUICK) {
dt68000.c:	    if (cur_instr->flags & F_SRCREG) {
dt68000.c:	    if (cur_instr->flags & F_SRCREG2) {
dt68000.c:	    if (cur_instr->flags & F_DSTREG) {
dt68000.c:		if (cur_instr->flags & F_SRCDST) {
dt68000.c:	    if (cur_instr->flags & F_DSTREGA) {
dt68000.c:		if (cur_instr->flags & F_SRCDST) {
dt68000.c:	    if (cur_instr->flags & F_AMSRC) {
dt68000.c:		count += handle_amode((cur_instr->flags & F_SRCDST)? buf2: buf1, addr + count, cur_instr->size, opword & 7, (opword >> 3) & 7);
dt68000.c:	    if (cur_instr->flags & F_AMDST) {
dt68000.c:		count += handle_amode(buf2, addr + count, cur_instr->size, (opword >> 9) & 7, (opword >> 6) & 7);
dt68000.c:	    buf += sprintf(buf, "\t%s", cur_instr->name);
dt68000.c:    while (cur_addr <= end_addr) { /* FIXME: breaks on wrap-around */
emu68k.c:#define WRITE_D_REG_BYTE(context, reg, data) {context->regs_d[reg] &= ~0xff; context->regs_d[reg] |= data;}
emu68k.c:#define WRITE_D_REG_WORD(context, reg, data) {context->regs_d[reg] &= ~0xffff; context->regs_d[reg] |= data;}
emu68k.c:#define WRITE_D_REG_LONG(context, reg, data) {context->regs_d[reg] = data;}
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    return context->read8table[(addr >> context->memshift)
emu68k.c:			      & context->memmask](context->cpu, addr);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    return context->read16table[(addr >> context->memshift)
emu68k.c:			       & context->memmask](context->cpu, addr);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    context->write8table[(addr >> context->memshift)
emu68k.c:			& context->memmask](context->cpu, addr, data);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    context->write16table[(addr >> context->memshift)
emu68k.c:			& context->memmask](context->cpu, addr, data);
emu68k.c:    retval = emu68k_read_16(context, context->pc);
emu68k.c:    context->pc += 2;
emu68k.c:    retval = emu68k_read_32(context, context->pc);
emu68k.c:    context->pc += 4;
emu68k.c:    if (context->pc & 1) {
emu68k.c:    while ((opword & cur_instr->mask) != cur_instr->pattern) {
emu68k.c:    cur_instr->handler(context, opword);
emu68k.c:    while (context->cycles_left > 0) {
emu68k.c:    context->regs_a[7] = emu68k_read_32(context, 0);
emu68k.c:    context->pc = emu68k_read_32(context, 4);
emu68k.c:    context->flags = 0x2000; /* FIXME: may be wrong */
emu68k.c:    emu68k_reset(cpu->data.d_junk68k);
emu68k.c:/*      emu68k_step(cpu->data.d_junk68k); */
emu68k.c:    emu68k_run(cpu->data.d_junk68k);
emu68k.c:    cpu->data.d_junk68k->cycles_left += cycles;
emu68k.c:/*     emuz80_IRQ(cpu->data.d_emuz80); */
emu68k.c:/*     emuz80_NMI(cpu->data.d_emuz80); */
emu68k.c:/*     return cpu->data.d_emuz80->cycles_left; */
emu68k.c:    cpu->data.d_junk68k->memshift = shift;
emu68k.c:    cpu->data.d_junk68k->memmask = mask;
emu68k.c:    cpu->data.d_junk68k->read8table = rtbl;
emu68k.c:    cpu->data.d_junk68k->write8table = wtbl;
emu68k.c:    cpu->data.d_junk68k->read16table = rtbl;
emu68k.c:    cpu->data.d_junk68k->write16table = wtbl;
emu68k.c:    (*cpu)->data.d_junk68k = calloc(1, sizeof(struct emu68k_context));
emu68k.c:    if (!(*cpu)->data.d_junk68k) {
emu68k.c:    (*cpu)->reset = cal_junk68k_reset;
emu68k.c:    (*cpu)->run = cal_junk68k_run;
emu68k.c:    (*cpu)->runfor = cal_junk68k_runfor;
emu68k.c:    (*cpu)->irq = cal_junk68k_irq;
emu68k.c:    (*cpu)->nmi = cal_junk68k_nmi;
emu68k.c:    (*cpu)->setzpage = cal_junk68k_setzpage;
emu68k.c:    (*cpu)->timeleft = cal_junk68k_timeleft;
emu68k.c:    (*cpu)->setmmu8 = cal_junk68k_setmmu8;
emu68k.c:    (*cpu)->setmmu16 = cal_junk68k_setmmu16;
emu68k.c:    (*cpu)->data.d_junk68k->cpu = *cpu;
emu68k.c:/*     emuz80_init((*cpu)->data.d_junk68k); */
emu68k.c:#define FLAG_NZ_byte(context, data) {context->flag_z = data; context->flag_n = data; context->flag_c = 0; context->flag_v = 0;}
emu68k.c:#define FLAG_NZ_word(context, data) {context->flag_z = data; context->flag_n = data >> 8; context->flag_c = 0; context->flag_v = 0;}
emu68k.c:#define FLAG_NZ_long(context, data) {context->flag_z = data; context->flag_n = data >> 24; context->flag_c = 0; context->flag_v = 0;}
emu68k.c:#define FLAG_VC_ADD_byte(context, dest, src1, src2) {context->flag_c = (dest < src1); context->flag_v = (((dest) ^ (src1)) & ((dest) ^ (src2)) & 0x80);}
emu68k.c:#define FLAG_VC_ADD_word(context, dest, src1, src2) {context->flag_c = (dest < src1); context->flag_v = (((dest) ^ (src1)) & ((dest) ^ (src2)) & 0x8000);}
emu68k.c:#define FLAG_VC_ADD_long(context, dest, src1, src2) {context->flag_c = (dest < src1); context->flag_v = (((dest) ^ (src1)) & ((dest) ^ (src2)) & 0x80000000);}
emu68k.c:#define FLAG_VC_SUB_byte(context, dest, src1, src2) {context->flag_c = (src1 > src2); context->flag_v = (((dest) ^ (src2)) & ((src1) ^ (src2)) & 0x80);}
emu68k.c:#define FLAG_VC_SUB_word(context, dest, src1, src2) {context->flag_c = (src1 > src2); context->flag_v = (((dest) ^ (src2)) & ((src1) ^ (src2)) & 0x8000);}
emu68k.c:#define FLAG_VC_SUB_long(context, dest, src1, src2) {context->flag_c = (src1 > src2); context->flag_v = (((dest) ^ (src2)) & ((src1) ^ (src2)) & 0x80000000);}
emu68k.c:#define FLAG_X(context) {context->flag_x = context->flag_c;}
emu68k.c:    retval = context->flags & ~0x001f;
emu68k.c:    if (!context->flag_z) {
emu68k.c:    if (context->flag_n & 0x80) {
emu68k.c:    if (context->flag_c) {
emu68k.c:    if (context->flag_x) {
emu68k.c:    if (context->flag_v) {
emu68k.c:    context->flags = flags & ~0x001f;
emu68k.c:    context->flag_z = !(flags & 0x04);
emu68k.c:    context->flag_n = flags << 4;
emu68k.c:    context->flag_x = flags & 0x10;
emu68k.c:    context->flag_c = flags & 0x01;
emu68k.c:    context->flag_v = flags & 0x02;
emu68k.c:    deb_printf("m68k: unimplemented amode (api: 0x%08x).\n", amode->api);
emu68k.c:    return emu68k_read_8(amode->context, amode->data);
emu68k.c:    return emu68k_read_16(amode->context, amode->data);
emu68k.c:    return emu68k_read_32(amode->context, amode->data);
emu68k.c:    emu68k_write_8(amode->context, amode->data, data);
emu68k.c:    emu68k_write_16(amode->context, amode->data, data);
emu68k.c:    emu68k_write_32(amode->context, amode->data, data);
emu68k.c:    amode->context = context;
emu68k.c:    return (u8)amode->context->regs_d[amode->reg];
emu68k.c:    return (u16)amode->context->regs_d[amode->reg];
emu68k.c:    return amode->context->regs_d[amode->reg];
emu68k.c:    WRITE_D_REG_BYTE(amode->context, amode->reg, data);
emu68k.c:    WRITE_D_REG_WORD(amode->context, amode->reg, data);
emu68k.c:    WRITE_D_REG_LONG(amode->context, amode->reg, data);
emu68k.c:    amode->context = context;
emu68k.c:    return (u16)amode->context->regs_a[amode->reg];
emu68k.c:    return amode->context->regs_a[amode->reg];
emu68k.c:    amode->context->regs_a[amode->reg] &= ~0xffff;
emu68k.c:    amode->context->regs_a[amode->reg] |= data;
emu68k.c:    amode->context->regs_a[amode->reg] = data;
emu68k.c:    amode->context = context;
emu68k.c:    amode->data = context->regs_a[amode->reg];
emu68k.c:    amode->context = context;
emu68k.c:	if (amode->reg != 7) {
emu68k.c:	    amode->flags = 1;
emu68k.c:	    amode->flags = 2;
emu68k.c:	amode->flags = 2;
emu68k.c:	amode->flags = 4;
emu68k.c:    amode->data = context->regs_a[amode->reg];
emu68k.c:    return emu68k_read_8(amode->context, amode->data);
emu68k.c:    return emu68k_read_16(amode->context, amode->data);
emu68k.c:    return emu68k_read_32(amode->context, amode->data);
emu68k.c:    emu68k_write_8(amode->context, amode->data, data);
emu68k.c:    emu68k_write_16(amode->context, amode->data, data);
emu68k.c:    emu68k_write_32(amode->context, amode->data, data);
emu68k.c:    amode->context->regs_a[amode->reg] += amode->flags;
emu68k.c:    amode->data += amode->flags;
emu68k.c:    /* FIXME: this may not do the right thing for MOVE.L A7, -(A7) */
emu68k.c:    amode->context = context;
emu68k.c:	if (amode->reg != 7) {
emu68k.c:	    amode->flags = 1;
emu68k.c:	    amode->flags = 2;
emu68k.c:	amode->flags = 2;
emu68k.c:	amode->flags = 4;
emu68k.c:    amode->data = context->regs_a[amode->reg] - amode->flags;
emu68k.c:    amode->context->cycles_left -= 2;
emu68k.c:    return emu68k_read_8(amode->context, amode->data);
emu68k.c:    amode->context->cycles_left -= 2;
emu68k.c:    return emu68k_read_16(amode->context, amode->data);
emu68k.c:    amode->context->cycles_left -= 2;
emu68k.c:    return emu68k_read_32(amode->context, amode->data);
emu68k.c:    emu68k_write_8(amode->context, amode->data, data);
emu68k.c:    emu68k_write_16(amode->context, amode->data, data);
emu68k.c:    emu68k_write_32(amode->context, amode->data, data);
emu68k.c:    amode->context->regs_a[amode->reg] -= amode->flags;
emu68k.c:    amode->data = amode->context->regs_a[amode->reg] - amode->flags;
emu68k.c:    amode->context = context;
emu68k.c:    amode->data = context->regs_a[amode->reg];
emu68k.c:    amode->data += (signed long)data;
emu68k.c:    amode->context = context;
emu68k.c:    amode->data = context->regs_a[amode->reg];
emu68k.c:    amode->data += (s8)data;
emu68k.c:	    amode->data += amode->context->regs_a[(data >> 12) & 7];
emu68k.c:	    amode->data += amode->context->regs_d[(data >> 12) & 7];
emu68k.c:	    amode->data += (s16)amode->context->regs_a[(data >> 12) & 7];
emu68k.c:	    amode->data += (s16)amode->context->regs_d[(data >> 12) & 7];
emu68k.c:    amode->context->cycles_left -= 2;
emu68k.c:    amode->context = context;
emu68k.c:    amode->data = tmp; /* needed for sign extension */
emu68k.c:    amode->context = context;
emu68k.c:    amode->data = emu68k_opfetch_32(context);
emu68k.c:    amode->context = context;
emu68k.c:    amode->data = context->pc; /* FIXME: may be too small by 2 */
emu68k.c:    amode->data += (signed long)data;
emu68k.c:    amode->context = context;
emu68k.c:    amode->data = context->pc;
emu68k.c:    amode->data += (s8)data;
emu68k.c:	    amode->data += amode->context->regs_a[(data >> 12) & 7];
emu68k.c:	    amode->data += amode->context->regs_d[(data >> 12) & 7];
emu68k.c:	    amode->data += (s16)amode->context->regs_a[(data >> 12) & 7];
emu68k.c:	    amode->data += (s16)amode->context->regs_d[(data >> 12) & 7];
emu68k.c:    context->cycles_left -= 2;
emu68k.c:    amode->context = context;
emu68k.c:	amode->data = emu68k_opfetch_16(context);
emu68k.c:	amode->data = emu68k_opfetch_32(context);
emu68k.c:	amode->data = 0;
emu68k.c:    return amode->data & 0xff;
emu68k.c:    return amode->data;
emu68k.c:    return amode->data;
emu68k.c:    deb_printf("m68k: CPU BUG: Write to non-alterable.\n");
emu68k.c:    deb_printf("m68k: CPU BUG: Write to non-alterable.\n");
emu68k.c:    deb_printf("m68k: CPU BUG: Write to non-alterable.\n");
emu68k.c:    {0x0b, 0, 0, 0, NULL, &m68k_amode_api_4},  /* -(An) */
emu68k.c:    context->regs_a[7] -= 2;
emu68k.c:    emu68k_write_16(context, context->regs_a[7], data);
emu68k.c:    retval = emu68k_read_16(context, context->regs_a[7]);
emu68k.c:    context->regs_a[7] += 2;
emu68k.c:    context->regs_a[7] -= 4;
emu68k.c:    emu68k_write_32(context, context->regs_a[7], data);
emu68k.c:    retval = emu68k_read_32(context, context->regs_a[7]);
emu68k.c:    context->regs_a[7] += 4;
emu68k.c:    deb_printf("emu68k: unimplemented opcode 0x%04hx at 0x%06x.\n", opword, context->pc);
emu68k.c:    deb_printf("emu68k: A-Line trap 0x%04hx at 0x%06x.\n", opword, context->pc);
emu68k.c:    /* FIXME: signal a-line trap */
emu68k.c:    deb_printf("emu68k: F-Line trap 0x%04hx at 0x%06x.\n", opword, context->pc);
emu68k.c:    /* FIXME: signal f-line trap */
emu68k.c:    src.api->resolve(&src, context, AMS_##size3); \
emu68k.c:    data = src.api->read##size1(&src); \
emu68k.c:    src.api->after(&src); \
emu68k.c:	context->cycles_left -= cycles; }
emu68k.c:    src.api->write##size(&src, data3);
emu68k.c:ALU_IMMED_FUNCTION(SUBI, byte, u8,  BYTE, 16, -, SUB,  4, DA);
emu68k.c:ALU_IMMED_FUNCTION(SUBI, word, u16, WORD, 16, -, SUB,  4, DA);
emu68k.c:ALU_IMMED_FUNCTION(SUBI, long, u32, LONG, 32, -, SUB,  4, DA);
emu68k.c:ALU_IMMED_FUNCTION(CMPI, byte, u8,  BYTE, 16, -, CMP,  2, DATA);
emu68k.c:ALU_IMMED_FUNCTION(CMPI, word, u16, WORD, 16, -, CMP,  2, DATA);
emu68k.c:ALU_IMMED_FUNCTION(CMPI, long, u32, LONG, 32, -, CMP,  2, DATA);
emu68k.c:    src.api->resolve(&src, context, AMS_##size3); \
emu68k.c:    data = context->regs_d[(opword >> 9) & 7]; \
emu68k.c:    data2 = src.api->read##size1(&src); \
emu68k.c:    src.api->after(&src); \
emu68k.c:	context->cycles_left -= 4; } else { context->cycles_left -= 2; }
emu68k.c:ALU_REG_FUNCTION(SUB, byte, u8,  BYTE, -, SUB,  ANY,  YES);
emu68k.c:ALU_REG_FUNCTION(SUB, word, u16, WORD, -, SUB,  ANY,  YES);
emu68k.c:ALU_REG_FUNCTION(SUB, long, u32, LONG, -, SUB,  ANY,  YES);
emu68k.c:ALU_REG_FUNCTION(CMP, byte, u8,  BYTE, -, CMP,  DATA, NO);
emu68k.c:ALU_REG_FUNCTION(CMP, word, u16, WORD, -, CMP,  DATA, NO);
emu68k.c:ALU_REG_FUNCTION(CMP, long, u32, LONG, -, CMP,  DATA, NO);
emu68k.c:    if (src.type == 9) { /* Dn */ context->cycles_left -= 4; }
emu68k.c:    src.api->resolve(&src, context, AMS_##size3); \
emu68k.c:    data2 = context->regs_d[(opword >> 9) & 7]; \
emu68k.c:    data = src.api->read##size1(&src); \
emu68k.c:    src.api->write##size1(&src, data3); \
emu68k.c:    src.api->after(&src); \
emu68k.c:ALU_MEM_FUNCTION(SUB, byte,  u8, BYTE, -, SUB,  MA);
emu68k.c:ALU_MEM_FUNCTION(SUB, word, u16, WORD, -, SUB,  MA);
emu68k.c:ALU_MEM_FUNCTION(SUB, long, u32, LONG, -, SUB,  MA);
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    dest.api->resolve(&dest, context, AMS_BYTE);
emu68k.c:    data = src.api->readbyte(&src);
emu68k.c:    dest.api->writebyte(&dest, data);
emu68k.c:    src.api->after(&src);
emu68k.c:    dest.api->after(&dest);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    dest.api->resolve(&dest, context, AMS_WORD);
emu68k.c:    data = src.api->readword(&src);
emu68k.c:    dest.api->writeword(&dest, data);
emu68k.c:    src.api->after(&src);
emu68k.c:    dest.api->after(&dest);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data = (s16)src.api->readword(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->regs_a[(opword >> 9) & 7] = data;
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    dest.api->resolve(&dest, context, AMS_LONG);
emu68k.c:    data = src.api->readlong(&src);
emu68k.c:    dest.api->writelong(&dest, data);
emu68k.c:    src.api->after(&src);
emu68k.c:    dest.api->after(&dest);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data = src.api->readlong(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->regs_a[(opword >> 9) & 7] = data;
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    src.api->writebyte(&src, 0);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    src.api->writeword(&src, 0);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    src.api->writelong(&src, 0);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 2;
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    data = src.api->readbyte(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data = src.api->readword(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data = src.api->readlong(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    data = src.api->readbyte(&src);
emu68k.c:    src.api->writebyte(&src, data);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data = src.api->readword(&src);
emu68k.c:    src.api->writeword(&src, data);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data = src.api->readlong(&src);
emu68k.c:    src.api->writelong(&src, data);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 2;
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    data = src.api->readbyte(&src);
emu68k.c:    src.api->writebyte(&src, data | 0x80);
emu68k.c:    src.api->after(&src);
emu68k.c:	context->cycles_left -= 4;
emu68k.c:	context->pc -= 2; /* cheating, but what can you do? */
emu68k.c:	context->pc += offset;
emu68k.c:	context->cycles_left -= 2;
emu68k.c:Bcc_FUNCTION(BHI, (!context->flag_c) && context->flag_z);
emu68k.c:Bcc_FUNCTION(BLS, (context->flag_c) || (!context->flag_z));
emu68k.c:Bcc_FUNCTION(BCC, !context->flag_c);
emu68k.c:Bcc_FUNCTION(BCS, context->flag_c);
emu68k.c:Bcc_FUNCTION(BVC, !context->flag_v);
emu68k.c:Bcc_FUNCTION(BVS, context->flag_v);
emu68k.c:Bcc_FUNCTION(BNE, context->flag_z);
emu68k.c:Bcc_FUNCTION(BEQ, !context->flag_z);
emu68k.c:Bcc_FUNCTION(BGE, (context->flag_n & 0x80)? context->flag_v: !context->flag_v);
emu68k.c:Bcc_FUNCTION(BLT, (context->flag_n & 0x80)? !context->flag_v: context->flag_v);
emu68k.c:Bcc_FUNCTION(BGT, (!context->flag_z)? 0: (context->flag_n & 0x80)? context->flag_v: !context->flag_v);
emu68k.c:Bcc_FUNCTION(BLE, (!context->flag_z)? 1: (context->flag_n & 0x80)? !context->flag_v: context->flag_v);
emu68k.c:Bcc_FUNCTION(BPL, !(context->flag_n & 0x80));
emu68k.c:Bcc_FUNCTION(BMI, context->flag_n & 0x80);
emu68k.c:	m68k_push_long(context, context->pc);
emu68k.c:	m68k_push_long(context, context->pc);
emu68k.c:	context->pc -= 2;
emu68k.c:    context->pc += offset;
emu68k.c:    src.api->resolve(&src, context, AMS_BOGUS);
emu68k.c:    context->regs_a[(opword >> 9) & 7] = src.data;
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_BOGUS);
emu68k.c:    src.api->after(&src);
emu68k.c:    new_pc = context->pc;
emu68k.c:    tmp = context->regs_d[opword & 7] & 0xffff;
emu68k.c:    tmp--;
emu68k.c:	context->pc = new_pc;
emu68k.c:    context->cycles_left -= 2;
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    src.api->writebyte(&src, 0);
emu68k.c:    src.api->after(&src);
emu68k.c:    tmp = context->regs_d[(opword >> 9) & 7];
emu68k.c:	src.api->resolve(&src, context, AMS_LONG);
emu68k.c:	data = src.api->readlong(&src);
emu68k.c:	src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:	data = src.api->readbyte(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->flag_z = (data & (1 << tmp));
emu68k.c:    context->cycles_left -= 2;
emu68k.c:	src.api->resolve(&src, context, AMS_LONG);
emu68k.c:	data = src.api->readlong(&src);
emu68k.c:	src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:	data = src.api->readbyte(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->flag_z = (data & (1 << tmp));
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    data2 = src.api->readbyte(&src);
emu68k.c:    data3 = 0 - data2;
emu68k.c:    src.api->writebyte(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    data3 = 0 - data2;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data2 = src.api->readlong(&src);
emu68k.c:    data3 = 0 - data2;
emu68k.c:    src.api->writelong(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 2; /* FIXME: should only be for register mode */
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data = src.api->readword(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->regs_a[(opword >> 9) & 7] -= data;
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data = src.api->readlong(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->regs_a[(opword >> 9) & 7] -= data;
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    data = src.api->readbyte(&src);
emu68k.c:    data3 = data - data2;
emu68k.c:    src.api->writebyte(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data = src.api->readword(&src);
emu68k.c:    data3 = data - data2;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data = src.api->readlong(&src);
emu68k.c:    data3 = data - data2;
emu68k.c:    src.api->writelong(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    context->regs_a[opword & 7] -= data;
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    src.api->resolve(&src, context, AMS_BYTE);
emu68k.c:    data2 = src.api->readbyte(&src);
emu68k.c:    src.api->writebyte(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data2 = src.api->readlong(&src);
emu68k.c:    src.api->writelong(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data2 = src.api->readlong(&src);
emu68k.c:    src.api->writelong(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data = src.api->readword(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 8;
emu68k.c:    if (!(context->flags & 0x2000)) {
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data = src.api->readword(&src);
emu68k.c:    src.api->after(&src);
emu68k.c:	data2 = context->regs_a[7];
emu68k.c:	context->regs_a[7] = context->other_sp;
emu68k.c:	context->other_sp = data2;
emu68k.c:    context->cycles_left -= 8;
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    src.api->writeword(&src, emu68k_get_flags(context));
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 2;
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:		    data = context->regs_d[(7 - i) & 7];
emu68k.c:		    data = context->regs_a[(7 - i) & 7];
emu68k.c:		src.api->writeword(&src, data);
emu68k.c:		src.api->after(&src);
emu68k.c:		    data = context->regs_a[i & 7];
emu68k.c:		    data = context->regs_d[i & 7];
emu68k.c:		src.api->writeword(&src, data);
emu68k.c:		src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:		    data = context->regs_d[(7 - i) & 7];
emu68k.c:		    data = context->regs_a[(7 - i) & 7];
emu68k.c:		src.api->writelong(&src, data);
emu68k.c:		src.api->after(&src);
emu68k.c:		    data = context->regs_a[i & 7];
emu68k.c:		    data = context->regs_d[i & 7];
emu68k.c:		src.api->writelong(&src, data);
emu68k.c:		src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:	    data = src.api->readword(&src);
emu68k.c:		context->regs_a[i & 7] = data;
emu68k.c:		context->regs_d[i & 7] = data;
emu68k.c:	    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:	    data = src.api->readlong(&src);
emu68k.c:		context->regs_a[i & 7] = data;
emu68k.c:		context->regs_d[i & 7] = data;
emu68k.c:	    src.api->after(&src);
emu68k.c:    if (!context->flags & 0x2000) {
emu68k.c:    context->other_sp = context->regs_a[opword & 7];
emu68k.c:    if (!context->flags & 0x2000) {
emu68k.c:    context->regs_a[opword & 7] = context->other_sp;
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data = context->regs_a[(opword >> 9) & 7];
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    context->regs_a[(opword >> 9) & 7] = data3;
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    src.api->resolve(&src, context, AMS_LONG);
emu68k.c:    data = context->regs_a[(opword >> 9) & 7];
emu68k.c:    data2 = src.api->readlong(&src);
emu68k.c:    context->regs_a[(opword >> 9) & 7] = data3;
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    context->pc = m68k_pop_long(context);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    if (!(context->flags & 0x2000)) {
emu68k.c:    context->pc = m68k_pop_long(context);
emu68k.c:    if ((new_flags ^ context->flags) & 0x2000) {
emu68k.c:	tmp = context->regs_a[7];
emu68k.c:	context->regs_a[7] = context->other_sp;
emu68k.c:	context->other_sp = tmp;
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    data = context->regs_d[reg];
emu68k.c:    context->regs_d[reg] = data;
emu68k.c:    src.api->resolve(&src, context, AMS_BOGUS);
emu68k.c:    context->pc = src.data;
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    src.api->resolve(&src, context, AMS_BOGUS);
emu68k.c:    m68k_push_long(context, context->pc);
emu68k.c:    context->pc = src.data;
emu68k.c:    src.api->after(&src);
emu68k.c:    context->cycles_left -= 4;
emu68k.c:    m68k_push_long(context, context->regs_a[opword & 7]);
emu68k.c:    context->regs_a[opword & 7] = context->regs_a[7];
emu68k.c:    context->regs_a[7] += tmp; /* FIXME: make sure this sign-extends */
emu68k.c:    context->regs_a[7] = context->regs_a[opword & 7];
emu68k.c:    context->regs_a[opword & 7] = m68k_pop_long(context);
emu68k.c:        count = context->regs_d[(opword >> 9) & 7] & 0x3f; \
emu68k.c:    data2 = context->regs_d[opword & 7]; \
emu68k.c:    context->cycles_left -= cycles + (data + data); \
emu68k.c:                                     else context->flag_c = 0;
emu68k.c:                                     else context->flag_c = context->flag_x;
emu68k.c:    if (data2 & (HIGHBIT_##width >> (data - 1))) { \
emu68k.c:        context->flag_c = 1; }
emu68k.c:    if (data2 & (1 << (data - 1))) { \
emu68k.c:	context->flag_c = 1; }
emu68k.c:        context->flag_v = 1; \
emu68k.c:            context->flag_v = 1; \
emu68k.c:	data3 |= (HIGHBYTE_##width << (8 - data)); }
emu68k.c:    data3 |= data2 >> (NUMBITS_##width - data);
emu68k.c:    context->flag_c = data3 & 1;
emu68k.c:    data3 |= data2 << (NUMBITS_##width - data);
emu68k.c:    context->flag_c = data2 & (1 << (data - 1));
emu68k.c:    data3 |= data2 >> ((NUMBITS_##width + 1) - data); \
emu68k.c:    if (context->flag_x) { data3 |= 1 << (data - 1); }
emu68k.c:    if (data2 & (HIGHBIT_##width >> (data - 1))) { \
emu68k.c:	context->flag_c = 1; }
emu68k.c:    if (data == 1) { data3 |= data2 >> (33 - data); } \
emu68k.c:    if (data && context->flag_x) { data3 |= 1 << (data - 1); }
emu68k.c:    data3 |= data2 << ((NUMBITS_##width + 1) - data); \
emu68k.c:    if (context->flag_x) { data3 |= (HIGHBIT_##width >> (data - 1)); }
emu68k.c:    if (data) { context->flag_x = data2 & (1 << (data - 1)); } \
emu68k.c:    context->flag_c = context->flag_x;
emu68k.c:    if (data > 1) { data3 |= data2 << (33 - data); } \
emu68k.c:    if (context->flag_x && data) { data3 |= 0x80000000 >> (data - 1); }
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    if (data2 & (0x8000 >> (data - 1))) {
emu68k.c:	context->flags |= 0x11;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    if (data2 & (1 << (data - 1))) {
emu68k.c:	context->flags |= 0x11;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    if (data2 & (1 << (data - 1))) {
emu68k.c:	context->flags |= 0x11;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    data3 |= data2 >> (16 - data);
emu68k.c:    if (data2 & (0x8000 >> (data - 1))) {
emu68k.c:	context->flags |= 0x11;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    data3 |= data2 << (16 - data);
emu68k.c:    if (data2 & (1 << (data - 1))) {
emu68k.c:	context->flags |= 0x11;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    data3 |= data2 >> (15 - data);
emu68k.c:    if (context->flags & 0x10) {
emu68k.c:	data3 |= 1 << (data - 1);
emu68k.c:    if (data2 & (0x8000 >> (data - 1))) {
emu68k.c:	context->flags |= 0x11;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    src.api->resolve(&src, context, AMS_WORD);
emu68k.c:    data2 = src.api->readword(&src);
emu68k.c:    data3 |= data2 << (15 - data);
emu68k.c:    if (context->flags & 0x10) {
emu68k.c:	data3 |= 0x8000 >> (data - 1);
emu68k.c:    if (data2 & (1 << (data - 1))) {
emu68k.c:	context->flags |= 0x11;
emu68k.c:    src.api->writeword(&src, data3);
emu68k.c:    src.api->after(&src);
emu68k.c:    {0x0fc0, 0x0800, m68k_do_BTST_stat, "BTST-S"},
emu68k.c:    {0x01c0, 0x0100, m68k_do_BTST_dyn, "BTST-D"},
emu68k.c:    {0x0000, 0x0000, m68k_do_alinetrap, "A-TRAP"},
emu68k.c:    {0x0000, 0x0000, m68k_do_flinetrap, "F-TRAP"},
emu68k.c: * added an emu68k_run() function to handle cycle-counted operation
emu68k.c: * made it easy to re-enable all disabled instructions at once
emu68k.c: * fixed 16-bit write cycle cost
emu68k.c: * fixed a bug in the new 32-bit write routine
event.c:    scheduler->top_event->timeleft = scheduler->top_event->duration;
event.c:    cur_event = scheduler->top_event;
event.c:    next_event = cur_event->next;
event.c:    scheduler->top_event = next_event;
event.c:	} else if (cur_event->timeleft <= next_event->timeleft) {
event.c:	    next_event->timeleft -= cur_event->timeleft;
event.c:		prev_event->next = cur_event;
event.c:		scheduler->top_event = cur_event;
event.c:	    cur_event->next = next_event;
event.c:	cur_event->timeleft -= next_event->timeleft;
event.c:	next_event = next_event->next;
event.c:    new_event->next = scheduler->top_event;
event.c:    scheduler->top_event = new_event;
event.c:	scheduler->delay_callback(scheduler->delay_callback_data,
event.c:				  scheduler->top_event->timeleft);
event.c:	if (!scheduler->top_event->callback) {
event.c:	scheduler->top_event->callback();
event.c:    retval->delay_callback = callback;
event.c:    retval->delay_callback_data = callback_data;
event.c:    retval->top_event = NULL;
fds.c:    mapper->drive_has_power = has_power;
fds.c:    mapper->diskptr = 0;
fds.c:    mapper->disk = mapper->romfile->prg_data
fds.c:	+ (65500 * (side % mapper->romfile->prg_size));
fds.c:    mapper->disk_is_inserted = is_inserted;
fds.c:    retval = mapper->dsr0;
fds.c:    mapper->dsr0 &= 0xfe;
fds.c:    if (!mapper->disk_is_inserted) {
fds.c:    return mapper->disk[mapper->diskptr++];
fds.c:	if (mapper->drive_has_power) {
fds.c:	       (data & 0x80)? '*': '-',
fds.c:	       (data & 0x40)? '*': '-',
fds.c:	       (data & 0x20)? '*': '-',
fds.c:	       (data & 0x10)? '*': '-',
fds.c:	       (data & 0x04)? '*': '-',
fds.c:	       (data & 0x02)? '*': '-',
fds.c:	       (data & 0x01)? '*': '-');
fds.c:    mapper->irqflag1 = 0;
fds.c:	mapper->write_skip = 2;
fds.c:    } else if (mapper->reg_4025 & 0x40) {
fds.c:	mapper->diskptr -= 2;
fds.c:	mapper->irqflag1 = 1;
fds.c:    mapper->reg_4025 = data;
fds.c:	    mapper->irq_latch &= 0xff00;
fds.c:	    mapper->irq_latch |= data;
fds.c:	    mapper->irq_latch &= 0x00ff;
fds.c:	    mapper->irq_latch |= (data << 8);
fds.c:	    mapper->irq_counter = mapper->irq_latch;
fds.c:	    mapper->irqflag2 = data;
fds.c:	    if (!(mapper->reg_4025 & 0x04)) {
fds.c:			   mapper->disk[mapper->diskptr - 2],
fds.c:			   mapper->disk[mapper->diskptr - 1],
fds.c:			   mapper->disk[mapper->diskptr],
fds.c:			   mapper->disk[mapper->diskptr + 1],
fds.c:			   mapper->disk[mapper->diskptr + 2]);
fds.c:		if (mapper->write_skip) {
fds.c:		    mapper->write_skip--;
fds.c:		    mapper->disk[mapper->diskptr - 2] = data;
fds.c:    if (mapper->irqflag1) {
fds.c:    if (mapper->irqflag2) {
fds.c:	if (mapper->irq_counter < 113) {
fds.c:	    mapper->irqflag2 = 0;
fds.c:	    mapper->dsr0 |= 1;
fds.c:/* 	    mapper->irq_counter = mapper->irq_latch; */
fds.c:	    mapper->irq_counter -= 113;
fds.c:	mapper->ram[address - 0x8000] = value;
fds.c:    if (mapper->disk_is_inserted) {
fds.c:    side = map14_menu[2].name[9] - '1';
fds.c:    if (side >= mapper->romfile->prg_size) {
fds.c:    for (menu = &map14_menu[1]; menu->name; menu++) {
fds.c:	menu->callback_data = mapper;
fds.c:    mapper->rom = romfile->data;
fds.c:	retval->interface.write = (mapwrite_t)map14_write;
fds.c:	retval->interface.hsync = (maphsync_t)map14_hsync;
fds.c:	retval->romfile = romfile;
fds.c:	retval->ppu = ppu;
fds.c:	retval->reg_4025 = 0;
fds.c:	retval->irqflag2 = 0;
fds.c:	retval->dsr0 = 0;
fds.c:	retval->ram = calloc(1, 0x6000);
fds.c:	bank_8 = retval->ram + 0x0000;
fds.c:	bank_A = retval->ram + 0x2000;
fds.c:	bank_C = retval->ram + 0x4000;
fds.c:	bank_E = retval->rom;
genesis.c: * 000000-3fffff ROM
genesis.c: * 400000-9fffff Reserved
genesis.c: * a00000-afffff Z80/Sound
genesis.c: * b00000-bfffff Reserved
genesis.c: * c00000-dfffff VDP
genesis.c: * e00000-feffff RAM Mirrors
genesis.c: * ff0000-ffffff RAM
genesis.c:	deb_printf("gen_read16_rom: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:	deb_printf("gen_read16_reserved: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:	return genesis_z80_ram[address - 0xa00000];
genesis.c:	deb_printf("gen_read16_misc: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:	deb_printf("gen_read16_vdp: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:	deb_printf("gen_read16_ram: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:	deb_printf("gen_write16_reserved: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:        genesis_z80_ram[address - 0xa00000] = data;
genesis.c:	deb_printf("gen_write16_misc: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:	deb_printf("gen_write16_vdp: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:	deb_printf("gen_write16_ram: CPU BUG: non-aligned 16-bit access.\n");
genesis.c:    newrom = malloc(romfile->size - 0x200);
genesis.c:    while (j < romfile->size) {
genesis.c:	    *cur_ptr++ = romfile->data[j + 0x2000];
genesis.c:	    *cur_ptr++ = romfile->data[j];
genesis.c:    free(romfile->data);
genesis.c:    romfile->data = newrom;
genesis.c:    romfile->size -= 0x200;
genesis.c:    for (i = 262; i && (system_flags == F_NONE); i--) {
genesis.c:	cpu->runfor(cpu, 488);
genesis.c:	    cpu->run(cpu);
genesis.c:	    cpu->irq(cpu, 6);
genesis.c:	if (romfile->size & 0x200) {
genesis.c:	genesis_rom = romfile->data;
genesis.c:	genesis_rom_size = romfile->size;
genesis.c:	genesis_68k->setmmu8(genesis_68k, 20, 15, gen_read8, gen_write8);
genesis.c:	genesis_68k->setmmu16(genesis_68k, 20, 15, gen_read16, gen_write16);
genesis.c:	genesis_68k->reset(genesis_68k);
genesis.c: * enabled debug messages on writes to the 0xa00000-0xafffff area
gen_vdp.c:    if (vdp->address & 0x4000) {
gen_vdp.c:	    retval = vdp->palette[(vdp->address++) & 0x3f];
gen_vdp.c:	    vdp->address &= 0x403f;
gen_vdp.c:	retval = vdp->readahead;
gen_vdp.c:	vdp->readahead = vdp->memory[vdp->address++];
gen_vdp.c:	vdp->address &= 0x3fff;
gen_vdp.c:    vdp->flags &= ~TF_ADDRWRITE;
gen_vdp.c:    if (vdp->flags & TF_PALETTE) {
gen_vdp.c:	*((unsigned short *)(&vdp->palette[vdp->address])) = data;
gen_vdp.c:	    tmp = (vdp->palette[((vdp->address) & 0x7f) | 1] << 3) & 0x30;
gen_vdp.c:	    tmp |= (vdp->palette[(vdp->address) & 0x7e] >> 4) & 0x0c;
gen_vdp.c:	    tmp |= (vdp->palette[(vdp->address) & 0x7e] >> 2) & 0x03;
gen_vdp.c:	    vdp->palette_xlat[((vdp->address) >> 1) & 0x3f] = vid_pre_xlat[tmp];
gen_vdp.c:	vdp->address += 2;
gen_vdp.c:	vdp->address &= 0x7f;
gen_vdp.c:	vdp->readahead = data;
gen_vdp.c:	*((unsigned short *)(&vdp->memory[vdp->address])) = data;
gen_vdp.c:	vdp->address += 2;
gen_vdp.c:	vdp->address &= 0xffff;
gen_vdp.c:    vdp->flags &= ~TF_ADDRWRITE;
gen_vdp.c:    retval = vdp->status;
gen_vdp.c:    vdp->status &= 0xdfff;
gen_vdp.c:    vdp->flags &= ~TF_ADDRWRITE;
gen_vdp.c:    if ((data & 0xc000) && (vdp->flags & TF_ADDRWRITE)) {
gen_vdp.c:	    vdp->regs[(data & 0x3f00) >> 8] = data & 0xff;
gen_vdp.c:	vdp->flags &= ~TF_ADDRWRITE;
gen_vdp.c:	vdp->addrsave = data;
gen_vdp.c:	vdp->flags |= TF_ADDRWRITE;
gen_vdp.c:	vdp->addrsave = data;
gen_vdp.c:	vdp->flags |= TF_ADDRWRITE;
gen_vdp.c:    } else if (vdp->flags & TF_ADDRWRITE) {
gen_vdp.c:	vdp->address = (data << 14) | (vdp->addrsave & 0x3fff);
gen_vdp.c:	if (vdp->addrsave & 0x8000) {
gen_vdp.c:	    vdp->flags |= TF_PALETTE;
gen_vdp.c:	    vdp->flags &= ~TF_PALETTE;
gen_vdp.c:	if (vdp->address & 0x200000) {
gen_vdp.c:	deb_printf("gen_vdp: address set 0x%x.\n", vdp->address);
gen_vdp.c:	vdp->address &= 0xffff; /* FIXME: this is incredibly wrong */
gen_vdp.c:	vdp->flags &= ~TF_ADDRWRITE;
gen_vdp.c:    length = vdp->regs[19] + (vdp->regs[20] << 8);
gen_vdp.c:    source = vdp->regs[21] + (vdp->regs[22] << 8) + (vdp->regs[23] << 16);
gen_vdp.c:    if (vdp->regs[23] & 0x80) {
gen_vdp.c:    if (vdp->regs[23] & 0x40) {
gen_vdp.c:	vdp->address &= 0xffff;
gen_vdp.c:	    *((unsigned short *)&vdp->memory[vdp->address]) = mtoh16(genesis_rom[source++]);
gen_vdp.c:	    vdp->address += 2;
gen_vdp.c:    cur_scanline = vdp->cur_scanline + vdp->regs[9];
gen_vdp.c:	cur_scanline -= 224;
gen_vdp.c:    cur_scanline = vdp->cur_scanline;
gen_vdp.c:/*     cur_pos = (unsigned short *)&vdp->memory[(vdp->regs[2] & 14) << 10]; */
gen_vdp.c:    cur_pos = (unsigned short *)&vdp->memory[0xe000];
gen_vdp.c:    if ((vdp->regs[0] & 0x40) && (cur_scanline < 16)) {
gen_vdp.c:	scroll = 32 - ((vdp->regs[8] + 7) >> 3);
gen_vdp.c:	finescroll = (8 - (vdp->regs[8] & 7)) & 7;
gen_vdp.c:	    tiledata = (((unsigned long *)vdp->memory)[((cur_tile & 0x7ff) << 3) + ((7 - cur_pattern_line))]);
gen_vdp.c:	    tiledata = (((unsigned long *)vdp->memory)[((cur_tile & 0x7ff) << 3) + (cur_pattern_line)]);
gen_vdp.c:	    cur_vbp += (i == 0)? 8 - finescroll: 8;
gen_vdp.c:	    *cur_vbp++ = vdp->palette_xlat[(tiledata >> 12) & 15];
gen_vdp.c:	    *cur_vbp++ = vdp->palette_xlat[(tiledata >> 8) & 15];
gen_vdp.c:	    *cur_vbp++ = vdp->palette_xlat[(tiledata >> 4) & 15];
gen_vdp.c:	    *cur_vbp++ = vdp->palette_xlat[(tiledata) & 15];
gen_vdp.c:	    *cur_vbp++ = vdp->palette_xlat[(tiledata >> 28) & 15];
gen_vdp.c:	    *cur_vbp++ = vdp->palette_xlat[(tiledata >> 24) & 15];
gen_vdp.c:	    *cur_vbp++ = vdp->palette_xlat[(tiledata >> 20) & 15];
gen_vdp.c:	    *cur_vbp++ = vdp->palette_xlat[(tiledata >> 16) & 15];
gen_vdp.c:/* 		    blit_4_8_rev(tiledata[3], tiledata[2], tiledata[1], tiledata[0], 8-finescroll, finescroll, &vdp->palette_xlat[0], cur_vbp); */
gen_vdp.c:/* 		    blit_4_8(tiledata[3], tiledata[2], tiledata[1], tiledata[0], 8-finescroll, finescroll, &vdp->palette_xlat[0], cur_vbp); */
gen_vdp.c:		cur_vbp += (i == 0)? 8 - finescroll: 8;
gen_vdp.c:/* 		    blit_4_8_rev(tiledata[3], tiledata[2], tiledata[1], tiledata[0], finescroll, 0, &vdp->palette_xlat[0], cur_vbp); */
gen_vdp.c:/* 		    blit_4_8(tiledata[3], tiledata[2], tiledata[1], tiledata[0], finescroll, 0, &vdp->palette_xlat[0], cur_vbp); */
gen_vdp.c:/* 		    blit_4_8_rev(tiledata[3], tiledata[2], tiledata[1], tiledata[0], 8, 0, &vdp->palette_xlat[0], cur_vbp); */
gen_vdp.c:/* 		    blit_4_8(tiledata[3], tiledata[2], tiledata[1], tiledata[0], 8, 0, &vdp->palette_xlat[0], cur_vbp); */
gen_vdp.c:/*     sprite_table = &vdp->memory[(vdp->regs[5] & 0x7e) << 7]; */
gen_vdp.c:    sprite_8x16 = (vdp->regs[1] & 2)? 16: 8;
gen_vdp.c:	if ((vdp->cur_scanline >= sprite_table[i]) &&
gen_vdp.c:	    (vdp->cur_scanline < (sprite_table[i] + sprite_8x16))) {
gen_vdp.c:	    cur_pattern_line = vdp->cur_scanline - sprite_table[i];
gen_vdp.c:	    cur_tile = sprite_table[128 + (i << 1) + 1] | ((vdp->regs[6] & 4) << 6);
gen_vdp.c:	    if (vdp->regs[1] & 2) {
gen_vdp.c:/* 	    tiledata[k] = &vdp->memory[(cur_tile << 5) + (cur_pattern_line << 2)]; */
gen_vdp.c:    for (i = k - 1; i >= 0; i--) {
gen_vdp.c:		     8, 0, &vdp->palette_xlat[16],
gen_vdp.c:    video_buffer = video_get_vbp(vdp->cur_scanline);
gen_vdp.c:    if (vdp->regs[1] & 0x40) {
gen_vdp.c:    if (vdp->cur_scanline < 192) {
gen_vdp.c:    } else if (vdp->cur_scanline == 192) {
gen_vdp.c:	vdp->status |= 0x2000;
gen_vdp.c:    if (vdp->cur_scanline == 261) {
gen_vdp.c:	vdp->cur_scanline = 0;
gen_vdp.c:	vdp->linecounter = vdp->regs[10];
gen_vdp.c:	vdp->status = 0;
gen_vdp.c:	vdp->cur_scanline++;
gen_vdp.c:	if ((vdp->cur_scanline < 192) && !vdp->linecounter--) {
gen_vdp.c:	    vdp->status |= 0x40;
gen_vdp.c:	    vdp->linecounter = vdp->regs[10];
gen_vdp.c:    return (((vdp->status & 0x2000) && (vdp->regs[1] & 0x20)));
gen_vdp.c:/* 	    ((vdp->status & 0x40) && (vdp->regs[0] & 0x10))); */
gen_vdp.c:	retval->memory = calloc(1, GEN_VDP_RAMSIZE);
gen_vdp.c:	if (retval->memory) {
keyboard_x.c:     0,  0,  0,  0,  0,  0,  0,  0, /* 00-07 */
keyboard_x.c:     0,  0,  0,  0,  0,  0,  0,  0, /* 08-0f */
keyboard_x.c:     0,  0,  0,  0,  0,  0,  0,  0, /* 10-17 */
keyboard_x.c:     0,  0,  0,  0,  0,  0,  0,  0, /* 18-1f */
keyboard_x.c:    55,  0,  0,  0,  0,  0,  0,  0, /* 20-27 */
keyboard_x.c:     0,  0,  0,  0, 50, 11, 51, 52, /* 28-2f */
keyboard_x.c:    10,  1,  2,  3,  4,  5,  6,  7, /* 30-37 */
keyboard_x.c:     8,  9,  0, 38,  0, 12,  0,  0, /* 38-3f */
keyboard_x.c:     0, 29, 47, 45, 31, 17, 32, 33, /* 40-47 */
keyboard_x.c:    34, 22, 35, 36, 37, 49, 48, 23, /* 48-4f */
keyboard_x.c:    24, 15, 18, 30, 19, 21, 46, 16, /* 50-57 */
keyboard_x.c:    44, 20, 43,  0,  0,  0,  0,  0, /* 58-5f */
keyboard_x.c:     0, 29, 47, 45, 31, 17, 32, 33, /* 60-67 */
keyboard_x.c:    34, 22, 35, 36, 37, 49, 48, 23, /* 68-6f */
keyboard_x.c:    24, 15, 18, 30, 19, 21, 46, 16, /* 70-77 */
keyboard_x.c:    44, 20, 43,  0,  0,  0,  0,  0, /* 78-7f */
keyboard_x.c: * there (as it stands, it's duplicated in every OS-dependant keyboard
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 00 - not used */
keyboard_x.c:    { '-',  '=',  '-',  '='}, /* 12 */
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 13 - reset (not used) */
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 25 - repeat (not used) */
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 27 - ??? (can't find it) */
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 28 - control (not used) */
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 41 - ??? (can't find it) */
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 42 - ??? (can't find it) */
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 53 - ??? (can't find it) */
keyboard_x.c:    {0x00, 0x00, 0x00, 0x00}, /* 54 - ??? (can't find it) */
keyboard_x.c:    if ((event->type != KeyPress) && (event->type != KeyRelease)) {
keyboard_x.c:    modifiers = event->xkey.state & ShiftMask;
keyboard_x.c:    modifiers |= (event->xkey.state & ControlMask) >> 1;
keyboard_x.c:    XtTranslateKeycode(display, event->xkey.keycode, 0, &dummy, &keysym);
keyboard_x.c:	if (event->type == KeyPress) {
keyboard_x.c:	sc3k_keyboard_event(key_index | ((event->type != KeyPress) << 7));
keyboard_x.c:	msx_keyboard_event(key_index | ((event->type != KeyPress) << 7));
mappers.c:    {15,  "100-in-1",           &mapF_init,  2},
mappers.c:    {32,  "Irem G-101",         &map20_init, 1},
mappers.c:    {-1,  NULL,                 NULL,         0},
mappers.c:    for (i = 0; mappers[i].mapper != -1; i++) {
mappers.c:	if ((mappers[i].mapper == romfile->mapper) && (mappers[i].support)) {
mappers.c:		   romfile->mapper, mappers[i].name);
mappers.c:    for (i = 0; mappers[i].mapper != -1; i++) {
mappers.c:	retval->write = map0_write;
mappers.c:	retval->hsync = dummy_hsync;
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:	mapper->data[0] |= 0x0c;
mappers.c:	mapper->accumulator = mapper->data[(address >> 13) & 3];
mappers.c:	mapper->sequence = 5;
mappers.c:	mapper->accumulator |= ((value & 1) << (mapper->sequence));
mappers.c:	mapper->sequence++;
mappers.c:    if ((mapper->sequence) == 5) {
mappers.c:	mapper->data[(address >> 13) & 3] = mapper->accumulator;
mappers.c:	mapper->sequence = 0;
mappers.c:	mapper->accumulator = 0;
mappers.c:	switch (mapper->data[0] & 3) {
mappers.c:	if (mapper->romfile->prg_size == 0x20) { /* 512k cart */
mappers.c:	    bank_select = mapper->data[1] & 0x10;
mappers.c:	if (!(mapper->data[0] & 8)) {
mappers.c:	    nesprg_map_32k(0, (mapper->data[3] & 15) + (bank_select >> 1));
mappers.c:	} else if (mapper->data[0] & 4) {
mappers.c:	    nesprg_map_16k(0, (mapper->data[3] & 15) + bank_select);
mappers.c:	    nesprg_map_16k(1, -1);
mappers.c:	    nesprg_map_16k(1, (mapper->data[3] & 15) + bank_select);
mappers.c:	if (mapper->data[0] & 0x10) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 0, mapper->data[1]);
mappers.c:	    nesppu_map_4k(mapper->ppu, 1, mapper->data[2]);
mappers.c:	    nesppu_map_8k(mapper->ppu, 0, mapper->data[1] >> 1);
mappers.c:	retval->interface.write = (mapwrite_t)map1_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	retval->romfile = romfile;
mappers.c:	retval->data[0] = 0x1f; /* FIXME: may be incorrect */
mappers.c:	retval->data[3] = 0x00;
mappers.c:	/* NOTE: does nothing when not using CHR-ROM */
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:	retval->write = map2_write;
mappers.c:	retval->hsync = dummy_hsync;
mappers.c:	/* NOTE: does nothing when not using CHR-ROM */
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:    nesppu_map_8k(mapper->ppu, 0, value);
mappers.c:	retval->interface.write = (mapwrite_t)map3_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:    if (mapper->command & 0x40) {
mappers.c:	nesprg_map_8k(1, mapper->prg_switch[1]);
mappers.c:	nesprg_map_8k(2, mapper->prg_switch[0]);
mappers.c:	nesprg_map_8k(0, mapper->prg_switch[0]);
mappers.c:	nesprg_map_8k(1, mapper->prg_switch[1]);
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:    if (mapper->command & 0x80) {
mappers.c:	nesppu_map_1k(mapper->ppu, 0, mapper->chr_switch[2]);
mappers.c:	nesppu_map_1k(mapper->ppu, 1, mapper->chr_switch[3]);
mappers.c:	nesppu_map_1k(mapper->ppu, 2, mapper->chr_switch[4]);
mappers.c:	nesppu_map_1k(mapper->ppu, 3, mapper->chr_switch[5]);
mappers.c:	nesppu_map_1k(mapper->ppu, 4, mapper->chr_switch[0]);
mappers.c:	nesppu_map_1k(mapper->ppu, 5, mapper->chr_switch[0] + 1);
mappers.c:	nesppu_map_1k(mapper->ppu, 6, mapper->chr_switch[1]);
mappers.c:	nesppu_map_1k(mapper->ppu, 7, mapper->chr_switch[1] + 1);
mappers.c:	nesppu_map_1k(mapper->ppu, 0, mapper->chr_switch[0]);
mappers.c:	nesppu_map_1k(mapper->ppu, 1, mapper->chr_switch[0] + 1);
mappers.c:	nesppu_map_1k(mapper->ppu, 2, mapper->chr_switch[1]);
mappers.c:	nesppu_map_1k(mapper->ppu, 3, mapper->chr_switch[1] + 1);
mappers.c:	nesppu_map_1k(mapper->ppu, 4, mapper->chr_switch[2]);
mappers.c:	nesppu_map_1k(mapper->ppu, 5, mapper->chr_switch[3]);
mappers.c:	nesppu_map_1k(mapper->ppu, 6, mapper->chr_switch[4]);
mappers.c:	nesppu_map_1k(mapper->ppu, 7, mapper->chr_switch[5]);
mappers.c:        mapper->command = value;
mappers.c:        switch (mapper->command & 7) {
mappers.c:	    mapper->chr_switch[0] = value;
mappers.c:	    mapper->chr_switch[1] = value;
mappers.c:	    mapper->chr_switch[2] = value;
mappers.c:	    mapper->chr_switch[3] = value;
mappers.c:	    mapper->chr_switch[4] = value;
mappers.c:	    mapper->chr_switch[5] = value;
mappers.c:            mapper->prg_switch[0] = value;
mappers.c:            mapper->prg_switch[1] = value;
mappers.c:	mapper->irq_count = value;
mappers.c:	mapper->irq_latch = value;
mappers.c:	mapper->irq_state = 0;
mappers.c:	mapper->irq_state = 1;
mappers.c:    if (display_active && mapper->irq_state && (mapper->irq_count-- == 0)) {
mappers.c:	mapper->irq_count = mapper->irq_latch;
mappers.c:	retval->interface.write = (mapwrite_t)map4_write;
mappers.c:	retval->interface.hsync = (maphsync_t)map4_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	retval->romfile = romfile;
mappers.c:	retval->command = 0;
mappers.c:	retval->prg_switch[0] = 0;
mappers.c:	retval->prg_switch[1] = 1;
mappers.c:	retval->chr_switch[0] = 0;
mappers.c:	retval->chr_switch[1] = 2;
mappers.c:	retval->chr_switch[2] = 4;
mappers.c:	retval->chr_switch[3] = 5;
mappers.c:	retval->chr_switch[4] = 6;
mappers.c:	retval->chr_switch[5] = 7;
mappers.c:	retval->interface.write = (mapwrite_t)map7_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	mapper->latch1.state = 0;
mappers.c:	nesppu_map_4k(mapper->ppu, 0, mapper->latch1.lo_bank);
mappers.c:	mapper->latch1.state = 1;
mappers.c:	nesppu_map_4k(mapper->ppu, 0, mapper->latch1.hi_bank);
mappers.c:	mapper->latch2.state = 0;
mappers.c:	nesppu_map_4k(mapper->ppu, 1, mapper->latch2.lo_bank);
mappers.c:	mapper->latch2.state = 1;
mappers.c:	nesppu_map_4k(mapper->ppu, 1, mapper->latch2.hi_bank);
mappers.c:	mapper->latch1.lo_bank = value;
mappers.c:	if (mapper->latch1.state == 0) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 0, value);
mappers.c:	mapper->latch1.hi_bank = value;
mappers.c:	if (mapper->latch1.state == 1) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 0, value);
mappers.c:	mapper->latch2.lo_bank = value;
mappers.c:	if (mapper->latch2.state == 0) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 1, value);
mappers.c:	mapper->latch2.hi_bank = value;
mappers.c:	if (mapper->latch2.state == 1) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 1, value);
mappers.c:	retval->interface.write = (mapwrite_t)map9_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	retval->latch1.lo_bank = 0;
mappers.c:	retval->latch1.hi_bank = 0;
mappers.c:	retval->latch1.state = 0;
mappers.c:	retval->latch2.lo_bank = 0;
mappers.c:	retval->latch2.hi_bank = 0;
mappers.c:	retval->latch2.state = 0;
mappers.c:	mapper->latch1.state = 0;
mappers.c:	nesppu_map_4k(mapper->ppu, 0, mapper->latch1.lo_bank);
mappers.c:	mapper->latch1.state = 1;
mappers.c:	nesppu_map_4k(mapper->ppu, 0, mapper->latch1.hi_bank);
mappers.c:	mapper->latch2.state = 0;
mappers.c:	nesppu_map_4k(mapper->ppu, 1, mapper->latch2.lo_bank);
mappers.c:	mapper->latch2.state = 1;
mappers.c:	nesppu_map_4k(mapper->ppu, 1, mapper->latch2.hi_bank);
mappers.c:	mapper->latch1.lo_bank = value;
mappers.c:	if (mapper->latch1.state == 0) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 0, value);
mappers.c:	mapper->latch1.hi_bank = value;
mappers.c:	if (mapper->latch1.state == 1) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 0, value);
mappers.c:	mapper->latch2.lo_bank = value;
mappers.c:	if (mapper->latch2.state == 0) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 1, value);
mappers.c:	mapper->latch2.hi_bank = value;
mappers.c:	if (mapper->latch2.state == 1) {
mappers.c:	    nesppu_map_4k(mapper->ppu, 1, value);
mappers.c:	retval->interface.write = (mapwrite_t)mapA_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	retval->latch1.lo_bank = 0;
mappers.c:	retval->latch1.hi_bank = 0;
mappers.c:	retval->latch1.state = 0;
mappers.c:	retval->latch2.lo_bank = 0;
mappers.c:	retval->latch2.hi_bank = 0;
mappers.c:	retval->latch2.state = 0;
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:    nesppu_map_8k(mapper->ppu, 0, vromptr);
mappers.c:	retval->interface.write = (mapwrite_t)mapB_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	retval->write = mapF_write;
mappers.c:	retval->hsync = dummy_hsync;
mappers.c:    value = mapper->bank_regs[bank];
mappers.c:    value |= mapper->bank_regs[bank + 1] << 4;
mappers.c:    nesppu_map_1k(mapper->ppu, bank >> 1, value);
mappers.c:	base = (address >> 10) - 0x2c;
mappers.c:	mapper->bank_regs[base + (address & 3)] = value & 15;
mappers.c:	retval->interface.write = (mapwrite_t)map17_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:	deb_printf("map18_write: unknown write in 0x8001-0x8fff range.\n");
mappers.c:	nesppu_map_1k(mapper->ppu, address & 3, value);
mappers.c:	nesppu_map_1k(mapper->ppu, 4 + (address & 3), value);
mappers.c:	    mapper->irq_latch = value;
mappers.c:	    mapper->irq_state = value;
mappers.c:	    mapper->irq_count = mapper->irq_latch;
mappers.c:	    mapper->irq_state = (mapper->irq_state << 1) | (mapper->irq_state & 1);
mappers.c:    if ((mapper->irq_state & 2) && (++mapper->irq_count == 0)) {
mappers.c:	mapper->irq_count = mapper->irq_latch;
mappers.c:	retval->interface.write = (mapwrite_t)map18_write;
mappers.c:	retval->interface.hsync = (maphsync_t)map18_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:	nesppu_map_1k(mapper->ppu, address & 7, value);
mappers.c:    nesppu_map_8k(mapper->ppu, 0, vromptr);
mappers.c:	retval->interface.write = (mapwrite_t)map42_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:    if (mapper->mirror & 0x10) {
mappers.c:	namebase = mapper->romfile->chr_data + 0x20000;
mappers.c:	switch (mapper->mirror & 3) {
mappers.c:	    PPU_nametables[0] = namebase + (mapper->ppu_a10l << 10);
mappers.c:	    PPU_nametables[1] = namebase + (mapper->ppu_a10h << 10);
mappers.c:	    PPU_nametables[2] = namebase + (mapper->ppu_a10l << 10);
mappers.c:	    PPU_nametables[3] = namebase + (mapper->ppu_a10h << 10);
mappers.c:	    PPU_nametables[0] = namebase + (mapper->ppu_a10l << 10);
mappers.c:	    PPU_nametables[1] = namebase + (mapper->ppu_a10l << 10);
mappers.c:	    PPU_nametables[2] = namebase + (mapper->ppu_a10h << 10);
mappers.c:	    PPU_nametables[3] = namebase + (mapper->ppu_a10h << 10);
mappers.c:	    PPU_nametables[0] = namebase + (mapper->ppu_a10l << 10);
mappers.c:	    PPU_nametables[1] = namebase + (mapper->ppu_a10l << 10);
mappers.c:	    PPU_nametables[2] = namebase + (mapper->ppu_a10l << 10);
mappers.c:	    PPU_nametables[3] = namebase + (mapper->ppu_a10l << 10);
mappers.c:	    PPU_nametables[0] = namebase + (mapper->ppu_a10h << 10);
mappers.c:	    PPU_nametables[1] = namebase + (mapper->ppu_a10h << 10);
mappers.c:	    PPU_nametables[2] = namebase + (mapper->ppu_a10h << 10);
mappers.c:	    PPU_nametables[3] = namebase + (mapper->ppu_a10h << 10);
mappers.c:	switch (mapper->mirror & 3) {
mappers.c:	nesppu_map_2k(mapper->ppu, 0, value);
mappers.c:	nesppu_map_2k(mapper->ppu, 1, value);
mappers.c:	nesppu_map_2k(mapper->ppu, 2, value);
mappers.c:	nesppu_map_2k(mapper->ppu, 3, value);
mappers.c:	mapper->ppu_a10l = value;
mappers.c:	mapper->ppu_a10h = value;
mappers.c:	mapper->mirror = value;
mappers.c:	retval->interface.write = (mapwrite_t)map44_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	retval->romfile = romfile;
mappers.c:	nesprg_map_16k(1, -1);
mappers.c:    nesppu_map_8k(mapper->ppu, 0, vromptr);
mappers.c:	retval->interface.write = (mapwrite_t)map4E_write;
mappers.c:	retval->interface.hsync = dummy_hsync;
mappers.c:	retval->ppu = ppu;
mappers.c:	nesprg_map_16k(1, -1);
mappers.c: * changed hsync functions to use nes_external_irq() instead of cpu->irq()
mappers.c: * converted to use the new PRG-ROM mapping interface
mappers.c: * removed almost all references to romfile->prg_size
mappers.c: * fixed mapper 2 to behave correctly should it ever encounter CHR-ROM
mappers.c: * half-converted mapper 20 (32) (doesn't work)
mappers.c: * stripped out all the vestiges of the old CHR-ROM switching
mappers.c: * stripped out all the so-called "outrange bank compensation" code as
mappers.c: * fixed out-range bank compensation on mappers 11, 7, 3, 2 and 1.
mappers.c: * fixed out-range rom bank compensation on mapper 4.
mappers.c: * added out-range rom bank compensation to mapper 4.
msx.c: * The MSX keyboard is a scan-polled key array, configured as 11 rows of 8
msx.c: *    +---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * | 1| 8 | 9 | - | = | \ | [ | ] | ; |
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * +--+---+---+---+---+---+---+---+---+
msx.c: * FIXME: Need to map the remaining ??? keys, and any non-alphanumeric
msx.c:    0x00, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, /* 0x00 - 0x07 */
msx.c:    0x20, 0x21, 0x10, 0x00, 0x00, 0x00, 0x00, 0x56, /* 0x08 - 0x0f */
msx.c:    0x64, 0x42, 0x57, 0x61, 0x66, 0x62, 0x46, 0x54, /* 0x10 - 0x17 */
msx.c:    0x55, 0x00, 0x87, 0x00, 0x00, 0x36, 0x60, 0x41, /* 0x18 - 0x1f */
msx.c:    0x43, 0x44, 0x45, 0x47, 0x50, 0x51, 0x27, 0x00, /* 0x20 - 0x27 */
msx.c:    0x00, 0x00, 0x00, 0x67, 0x65, 0x40, 0x63, 0x37, /* 0x28 - 0x2f */
msx.c:    0x53, 0x52, 0x32, 0x33, 0x34, 0x00, 0x00, 0x90, /* 0x30 - 0x37 */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x38 - 0x3f */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x40 - 0x47 */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x48 - 0x4f */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x50 - 0x57 */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x58 - 0x5f */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x60 - 0x67 */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x68 - 0x6f */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x70 - 0x77 */
msx.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x78 - 0x7f */
msx.c:    row = (keyposition >> 4) - 1;
msx.c:	    data = msx_rombase - ((i & 2) * 0x4000);
msx.c:    for (map = msx_io_read_map; map->mask; map++) {
msx.c:	if ((address & map->mask) == map->addr) {
msx.c:	    if (map->handler) {
msx.c:		return map->handler(address);
msx.c:    for (map = msx_io_write_map; map->mask; map++) {
msx.c:	if ((address & map->mask) == map->addr) {
msx.c:	    if (map->handler) {
msx.c:		map->handler(address, data);
msx.c:	msx_cpu->irq(msx_cpu, 0xff);
msx.c:    msx_cpu->setmmu0(msx_cpu, msx_mmu);
msx.c:    msx_cpu->setmmu8(msx_cpu, 0, 0, &msx_read_function, &msx_write_function);
msx.c:    msx_cpu->setiou(msx_cpu, msx_io_read, msx_io_write);
msx.c:    msx_cpu->reset(msx_cpu);
msx.c:    msx_rombase = msx_romfile->data;
mz80.c:/** System-Dependent Stuff ***********************************/
mz80.c:/** This is system-dependent code put here to speed things  **/
mz80.c:#define WrZ80(addr, value) (R->writefunc(R->User, addr, value))
mz80.c:#define RdZ80(addr) (R->readfunc(R->User, addr))
mz80.c:    mmu = R->mmu;
mz80.c:    while (mmu->end < R->PC.W) {
mz80.c:    if (mmu->start > R->PC.W) {
mz80.c:    R->cur_ip = mmu->data + R->PC.W;
mz80.c:    R->ip_left = mmu->end - R->PC.W;
mz80.c:    retval = *R->cur_ip++;
mz80.c:    R->PC.W++;
mz80.c:    if (!R->ip_left--) {
mz80.c:    R->PC.W++;
mz80.c:    R->cur_ip++;
mz80.c:    if (!R->ip_left--) {
mz80.c:    R->PC.W+=2;
mz80.c:    if (R->ip_left < 2) {
mz80.c:	R->ip_left -= 2;
mz80.c:	R->cur_ip += 2;
mz80.c:    return RdZ80(R->PC.W++);
mz80.c:    R->PC.W++;
mz80.c:    R->PC.W+=2;
mz80.c:#define S(Fl)        R->AF.B.l|=Fl
mz80.c:#define R(Fl)        R->AF.B.l&=~(Fl)
mz80.c:#define FLAGS(Rg,Fl) R->AF.B.l=Fl|ZSTable[Rg]
mz80.c:  R->AF.B.l=Rg>>7;Rg=(Rg<<1)|R->AF.B.l;R->AF.B.l|=PZSTable[Rg]
mz80.c:  R->AF.B.l=Rg&0x01;Rg=(Rg>>1)|(R->AF.B.l<<7);R->AF.B.l|=PZSTable[Rg]
mz80.c:    Rg=(Rg<<1)|(R->AF.B.l&C_FLAG); \
mz80.c:    R->AF.B.l=PZSTable[Rg]|C_FLAG; \
mz80.c:    Rg=(Rg<<1)|(R->AF.B.l&C_FLAG); \
mz80.c:    R->AF.B.l=PZSTable[Rg];        \
mz80.c:    Rg=(Rg>>1)|(R->AF.B.l<<7);     \
mz80.c:    R->AF.B.l=PZSTable[Rg]|C_FLAG; \
mz80.c:    Rg=(Rg>>1)|(R->AF.B.l<<7);     \
mz80.c:    R->AF.B.l=PZSTable[Rg];        \
mz80.c:  R->AF.B.l=Rg>>7;Rg<<=1;R->AF.B.l|=PZSTable[Rg]
mz80.c:  R->AF.B.l=Rg&C_FLAG;Rg=(Rg>>1)|(Rg&0x80);R->AF.B.l|=PZSTable[Rg]
mz80.c:  R->AF.B.l=Rg>>7;Rg=(Rg<<1)|0x01;R->AF.B.l|=PZSTable[Rg]
mz80.c:  R->AF.B.l=Rg&0x01;Rg>>=1;R->AF.B.l|=PZSTable[Rg]
mz80.c:  R->AF.B.l=(R->AF.B.l&~(N_FLAG|Z_FLAG))|H_FLAG|(Rg&(1<<Bit)? 0:Z_FLAG)
mz80.c:  R->Rg.B.l=RdZ80(R->SP.W++);R->Rg.B.h=RdZ80(R->SP.W++)
mz80.c:  WrZ80(--R->SP.W,R->Rg.B.h);WrZ80(--R->SP.W,R->Rg.B.l)
mz80.c:  WrZ80(--R->SP.W,R->PC.B.h);WrZ80(--R->SP.W,R->PC.B.l); \
mz80.c:  R->PC.W=J.W;mz80_cache_ip(R)
mz80.c:#define M_JP  J.B.l=OpZ80(R);J.B.h=OpZ80(R);R->PC.W=J.W;mz80_cache_ip(R)
mz80.c:#define M_JR  J.B.l=OpZ80(R);R->PC.W+=(offset)J.B.l;mz80_cache_ip(R)
mz80.c:#define M_RET R->PC.B.l=RdZ80(R->SP.W++);R->PC.B.h=RdZ80(R->SP.W++);mz80_cache_ip(R)
mz80.c:  WrZ80(--R->SP.W,R->PC.B.h);WrZ80(--R->SP.W,R->PC.B.l);R->PC.W=Ad;mz80_cache_ip(R)
mz80.c:  R->Rg.B.l=OpZ80(R);R->Rg.B.h=OpZ80(R)
mz80.c:  J.W=R->AF.B.h+Rg;     \
mz80.c:  R->AF.B.l=            \
mz80.c:    (~(R->AF.B.h^Rg)&(Rg^J.B.l)&0x80? V_FLAG:0)| \
mz80.c:    ((R->AF.B.h^Rg^J.B.l)&H_FLAG);               \
mz80.c:  R->AF.B.h=J.B.l       
mz80.c:  J.W=R->AF.B.h-Rg;    \
mz80.c:  R->AF.B.l=           \
mz80.c:    ((R->AF.B.h^Rg)&(R->AF.B.h^J.B.l)&0x80? V_FLAG:0)| \
mz80.c:    N_FLAG|-J.B.h|ZSTable[J.B.l]|                      \
mz80.c:    ((R->AF.B.h^Rg^J.B.l)&H_FLAG);                     \
mz80.c:  R->AF.B.h=J.B.l
mz80.c:  J.W=R->AF.B.h+Rg+(R->AF.B.l&C_FLAG); \
mz80.c:  R->AF.B.l=                           \
mz80.c:    (~(R->AF.B.h^Rg)&(Rg^J.B.l)&0x80? V_FLAG:0)| \
mz80.c:    ((R->AF.B.h^Rg^J.B.l)&H_FLAG);     \
mz80.c:  R->AF.B.h=J.B.l
mz80.c:  J.W=R->AF.B.h-Rg-(R->AF.B.l&C_FLAG); \
mz80.c:  R->AF.B.l=                           \
mz80.c:    ((R->AF.B.h^Rg)&(R->AF.B.h^J.B.l)&0x80? V_FLAG:0)| \
mz80.c:    N_FLAG|-J.B.h|ZSTable[J.B.l]|      \
mz80.c:    ((R->AF.B.h^Rg^J.B.l)&H_FLAG);     \
mz80.c:  R->AF.B.h=J.B.l
mz80.c:  J.W=R->AF.B.h-Rg;    \
mz80.c:  R->AF.B.l=           \
mz80.c:    ((R->AF.B.h^Rg)&(R->AF.B.h^J.B.l)&0x80? V_FLAG:0)| \
mz80.c:    N_FLAG|-J.B.h|ZSTable[J.B.l]|                      \
mz80.c:    ((R->AF.B.h^Rg^J.B.l)&H_FLAG)
mz80.c:#define M_AND(Rg) R->AF.B.h&=Rg;R->AF.B.l=H_FLAG|PZSTable[R->AF.B.h]
mz80.c:#define M_OR(Rg)  R->AF.B.h|=Rg;R->AF.B.l=PZSTable[R->AF.B.h]
mz80.c:#define M_XOR(Rg) R->AF.B.h^=Rg;R->AF.B.l=PZSTable[R->AF.B.h]
mz80.c:#define M_IN(Rg)  Rg=InZ80(R->BC.B.l);R->AF.B.l=PZSTable[Rg]|(R->AF.B.l&C_FLAG)
mz80.c:  R->AF.B.l=            \
mz80.c:    (R->AF.B.l&C_FLAG)|ZSTable[Rg]|           \
mz80.c:  Rg--;                 \
mz80.c:  R->AF.B.l=            \
mz80.c:    N_FLAG|(R->AF.B.l&C_FLAG)|ZSTable[Rg]| \
mz80.c:  J.W=(R->Rg1.W+R->Rg2.W)&0xFFFF;                        \
mz80.c:  R->AF.B.l=                                             \
mz80.c:    (R->AF.B.l&~(H_FLAG|N_FLAG|C_FLAG))|                 \
mz80.c:    ((R->Rg1.W^R->Rg2.W^J.W)&0x1000? H_FLAG:0)|          \
mz80.c:    (((long)R->Rg1.W+(long)R->Rg2.W)&0x10000? C_FLAG:0); \
mz80.c:  R->Rg1.W=J.W
mz80.c:  I=R->AF.B.l&C_FLAG;J.W=(R->HL.W+R->Rg.W+I)&0xFFFF;           \
mz80.c:  R->AF.B.l=                                                   \
mz80.c:    (((long)R->HL.W+(long)R->Rg.W+(long)I)&0x10000? C_FLAG:0)| \
mz80.c:    (~(R->HL.W^R->Rg.W)&(R->Rg.W^J.W)&0x8000? V_FLAG:0)|       \
mz80.c:    ((R->HL.W^R->Rg.W^J.W)&0x1000? H_FLAG:0)|                  \
mz80.c:  R->HL.W=J.W
mz80.c:  I=R->AF.B.l&C_FLAG;J.W=(R->HL.W-R->Rg.W-I)&0xFFFF;           \
mz80.c:  R->AF.B.l=                                                   \
mz80.c:    (((long)R->HL.W-(long)R->Rg.W-(long)I)&0x10000? C_FLAG:0)| \
mz80.c:    ((R->HL.W^R->Rg.W)&(R->HL.W^J.W)&0x8000? V_FLAG:0)|        \
mz80.c:    ((R->HL.W^R->Rg.W^J.W)&0x1000? H_FLAG:0)|                  \
mz80.c:  R->HL.W=J.W
mz80.c:  R->ICount-=z80_CyclesCB[I];
mz80.c:/*       if(R->TrapBadOps) */
mz80.c:/*           (long)(R->User),RdZ80(R->PC.W-1),R->PC.W-2 */
mz80.c:  J.W=R->XX.W+(offset)OpZ80(R);
mz80.c:  R->ICount-=z80_CyclesXXCB[I];
mz80.c:/*       if(R->TrapBadOps) */
mz80.c:/*           (long)(R->User),RdZ80(R->PC.W-2),RdZ80(R->PC.W-1),R->PC.W-4 */
mz80.c:  J.W=R->XX.W+(offset)OpZ80(R);
mz80.c:  R->ICount-=z80_CyclesXXCB[I];
mz80.c:/*       if(R->TrapBadOps) */
mz80.c:/*           (long)R->User,RdZ80(R->PC.W-2),RdZ80(R->PC.W-1),R->PC.W-4 */
mz80.c:  R->ICount-=z80_CyclesED[I];
mz80.c:      R->PC.W--;mz80_cache_ip(R);break;
mz80.c:/*       if(R->TrapBadOps) */
mz80.c:/*           (long)R->User,RdZ80(R->PC.W-1),R->PC.W-2 */
mz80.c:  R->ICount-=z80_CyclesXX[I];
mz80.c:      R->PC.W--;mz80_cache_ip(R);break;
mz80.c:      R->PC.W--;R->IFF|=0x80;R->ICount=0;mz80_cache_ip(R);break;
mz80.c:/*       if(R->TrapBadOps) */
mz80.c:/*           (long)R->User,RdZ80(R->PC.W-1),R->PC.W-2 */
mz80.c:  R->ICount-=z80_CyclesXX[I];
mz80.c:      R->PC.W--;mz80_cache_ip(R);break;
mz80.c:      R->PC.W--;R->IFF|=0x80;R->ICount=0;mz80_cache_ip(R);break;
mz80.c:/*           RdZ80(R->PC.W-1),R->PC.W-2 */
mz80.c:  R->PC.W=0x0000;R->SP.W=0xF000;
mz80.c:  R->AF.W=R->BC.W=R->DE.W=R->HL.W=0x0000;
mz80.c:  R->AF1.W=R->BC1.W=R->DE1.W=R->HL1.W=0x0000;
mz80.c:  R->IX.W=R->IY.W=0x0000;
mz80.c:  R->I=0x00;R->IFF=0x00;
mz80.c:  R->ICount=R->IPeriod;
mz80.c:  R->IRequest=INT_NONE;
mz80.c:  if((R->IFF&0x01)||(Vector==INT_NMI))
mz80.c:    R->IFF=(R->IFF&0x9E)|((R->IFF&0x01)<<6);
mz80.c:    if(R->IFF&0x80) { R->PC.W++;R->IFF&=0x7F; }
mz80.c:    if(Vector==INT_NMI) R->PC.W=INT_NMI;
mz80.c:      if(R->IFF&0x04)
mz80.c:        Vector=(Vector&0xFF)|((word)(R->I)<<8);
mz80.c:        R->PC.B.l=RdZ80(Vector++);
mz80.c:        R->PC.B.h=RdZ80(Vector);
mz80.c:        if(R->IFF&0x02) R->PC.W=INT_IRQ;
mz80.c:        else R->PC.W=Vector;
mz80.c:    R->ICount += R->IPeriod;
mz80.c:    while ((R->ICount > 0) || (R->IFF&0x20)) {
mz80.c:	J.W = R->IRequest;
mz80.c:	R->IRequest = INT_NONE;
mz80.c:	if(R->IFF&0x20) {
mz80.c:	    R->ICount+=R->IBackup-1; /* Restore the ICount       */
mz80.c:	    R->IFF&=0xDF;            /* Done with AfterEI state  */
mz80.c:	if(J.W==INT_QUIT) return(R->PC.W); /* Exit if INT_QUIT */
mz80.c:	if(J.W!=INT_NONE) IntZ80(R,J.W);   /* Int-pt if needed */
mz80.c:	R->ICount-=z80_Cycles[I];
mz80.c:    return(R->PC.W);
mz80.c:    ResetZ80(cpu->data.d_maratz80);
mz80.c:    RunZ80(cpu->data.d_maratz80);
mz80.c:    cpu->data.d_maratz80->IPeriod = cycles;
mz80.c:    cpu->data.d_maratz80->IRequest = INT_IRQ;
mz80.c:    cpu->data.d_maratz80->IRequest = INT_NMI;
mz80.c:    return cpu->data.d_maratz80->ICount;
mz80.c:    cpu->data.d_maratz80->mmu = mmu;
mz80.c:/*     cpu->data.d_maratz80->memshift = shift; */
mz80.c:/*     cpu->data.d_maratz80->memmask = mask; */
mz80.c:/*     cpu->data.d_maratz80->readtable = rtbl; */
mz80.c:/*     cpu->data.d_maratz80->writetable = wtbl; */
mz80.c:    cpu->data.d_maratz80->readfunc = *rtbl;
mz80.c:    cpu->data.d_maratz80->writefunc = *wtbl;
mz80.c:    cpu->data.d_maratz80->io_read = ioread;
mz80.c:    cpu->data.d_maratz80->io_write = iowrite;
mz80.c:    (*cpu)->data.d_maratz80 = calloc(1, sizeof(Z80));
mz80.c:    if (!(*cpu)->data.d_maratz80) {
mz80.c:    (*cpu)->reset = cal_maratz80_reset;
mz80.c:    (*cpu)->run = cal_maratz80_run;
mz80.c:    (*cpu)->runfor = cal_maratz80_runfor;
mz80.c:    (*cpu)->irq = cal_maratz80_irq;
mz80.c:    (*cpu)->nmi = cal_maratz80_nmi;
mz80.c:    (*cpu)->setzpage = cal_maratz80_setzpage;
mz80.c:    (*cpu)->timeleft = cal_maratz80_timeleft;
mz80.c:    (*cpu)->setmmu0 = cal_maratz80_setmmu0;
mz80.c:    (*cpu)->setmmu8 = cal_maratz80_setmmu8;
mz80.c:    (*cpu)->setiou = cal_maratz80_setiou;
mz80.c:    (*cpu)->data.d_maratz80->User = *cpu;
mz80.c: * changed memory access to be non SMS-specific
nes.c:    while ((bank & i) >= (nes_romfile->prg_size << 1)) {
nes.c:    *banks[bank] = nes_romfile->prg_data + (*bank_regs[bank] * 0x2000);
nes.c:    mapper->write(mapper, addr, data);
nes.c:	bank_6 = battery_file->data;
nes.c:    if (nes_romfile->uses_battery) {
nes.c:    retval->file = romfile;
nes.c:    retval->prg_size = romfile->data[4];
nes.c:    retval->chr_size = romfile->data[5];
nes.c:    retval->prg_data = romfile->data + 0x10;
nes.c:    retval->uses_battery = romfile->data[6] & 2;
nes.c:    retval->mirror_vertical = romfile->data[6] & 1;
nes.c:    if (retval->chr_size > 0) { /* this works as is for FDS */
nes.c:	retval->chr_data = retval->prg_data + (retval->prg_size * 0x4000);
nes.c:	retval->chr_data = NULL;
nes.c:    if (romfile->data[0] == 'F') { /* NOTE: Cheap hack */
nes.c:	retval->mapper = 20;
nes.c:	retval->mapper = romfile->data[6] >> 4;
nes.c:	if (*((u32 *)&romfile->data[12])) {
nes.c:	    deb_printf("nes: using 4-bit mapper id.\n");
nes.c:	    deb_printf("nes: using 8-bit mapper id.\n");
nes.c:	    retval->mapper |= romfile->data[7] & 0xf0;
nes.c:    if (!mapper_supported(nes_romfile->mapper)) {
nes.c:	deb_printf("darcnes: mapper #%d unsupported.\n", nes_romfile->mapper);
nes.c:    if (nes_romfile->uses_battery) {
nes.c:	nes_load_battery_file(nes_romfile->file);
nes.c: * added new PRG-ROM mapping interface
nes.c: * added support for 8-bit mapper ids.
nespal.c:    0x68, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x55, /* 00-07 */
nespal.c:    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 08-0f */
nespal.c:    0x98, 0x00, 0x40, 0x00, 0x00, 0xc0, 0xc0, 0xc0, /* 10-17 */
nespal.c:    0x80, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, /* 18-1f */
nespal.c:    0xd0, 0x40, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* 20-27 */
nespal.c:    0xc0, 0x80, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, /* 28-2f */
nespal.c:    0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, /* 30-37 */
nespal.c:    0xff, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, /* 38-3f */
nespal.c:    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 00-07 */
nespal.c:    0x40, 0x00, 0x50, 0x00, 0x40, 0x00, 0x00, 0x00, /* 08-0f */
nespal.c:    0x98, 0x80, 0x40, 0x00, 0x00, 0x00, 0x20, 0x40, /* 10-17 */
nespal.c:    0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, /* 18-1f */
nespal.c:    0xd0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x50, 0x80, /* 20-27 */
nespal.c:    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, /* 28-2f */
nespal.c:    0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, /* 30-37 */
nespal.c:    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, /* 38-3f */
nespal.c:    0x68, 0x80, 0x80, 0x00, 0x00, 0x40, 0x00, 0x00, /* 00-07 */
nespal.c:    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, /* 08-0f */
nespal.c:    0x98, 0xc0, 0xc0, 0x00, 0x00, 0x80, 0x20, 0x00, /* 10-17 */
nespal.c:    0x00, 0x00, 0x00, 0x33, 0x80, 0x00, 0x00, 0x00, /* 18-1f */
nespal.c:    0xd0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x50, 0x40, /* 20-27 */
nespal.c:    0x00, 0x00, 0x00, 0x55, 0xc0, 0x00, 0x00, 0x00, /* 28-2f */
nespal.c:    0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x80, /* 30-37 */
nespal.c:    0x40, 0x00, 0x40, 0x00, 0xff, 0x00, 0x00, 0x00, /* 38-3f */
nes_ppu.c:    if (((ppu->scanline < 240) || (ppu->scanline == 262)) && (ppu->control_2 & 0x18)) {
nes_ppu.c:	ppu->mapper->hsync(ppu->mapper, 1);
nes_ppu.c:	ppu->mapper->hsync(ppu->mapper, 0);
nes_ppu.c:    if (ppu->scanline < 240) {
nes_ppu.c:	ppu->refresh_data &= 0x7be0;
nes_ppu.c:	ppu->refresh_data |= ppu->refresh_temp & 0x041f;
nes_ppu.c:    } else if (ppu->scanline == 240) {
nes_ppu.c:	ppu->status = 0x80;
nes_ppu.c:    ppu->scanline++;
nes_ppu.c:    if (ppu->scanline == 262) {
nes_ppu.c:	ppu->status = 0;
nes_ppu.c:	ppu->scanline = 0;
nes_ppu.c:	ppu->refresh_data = ppu->refresh_temp;
nes_ppu.c:    return (ppu->control_1 & 0x80) && (ppu->scanline == 243);
nes_ppu.c:    nes_ppu_true->romfile = romfile;
nes_ppu.c:    nes_ppu_true->render_palette = new_palette_8(8, 4);
nes_ppu.c:    if (romfile->chr_size) {
nes_ppu.c:	nes_ppu_true->tilecache = malloc(romfile->chr_size * 0x2000 * 4);
nes_ppu.c:	nesppu_cache_chr_rom(romfile->chr_data, romfile->chr_size, nes_ppu_true->tilecache);
nes_ppu.c:	nes_ppu_true->tilecache = calloc(1, 0x2000 * 4);
nes_ppu.c:	nes_ppu_true->pattern_cache[0] = nes_ppu_true->tilecache + 0x0000;
nes_ppu.c:	nes_ppu_true->pattern_cache[1] = nes_ppu_true->tilecache + 0x1000;
nes_ppu.c:	nes_ppu_true->pattern_cache[2] = nes_ppu_true->tilecache + 0x2000;
nes_ppu.c:	nes_ppu_true->pattern_cache[3] = nes_ppu_true->tilecache + 0x3000;
nes_ppu.c:	nes_ppu_true->pattern_cache[4] = nes_ppu_true->tilecache + 0x4000;
nes_ppu.c:	nes_ppu_true->pattern_cache[5] = nes_ppu_true->tilecache + 0x5000;
nes_ppu.c:	nes_ppu_true->pattern_cache[6] = nes_ppu_true->tilecache + 0x6000;
nes_ppu.c:	nes_ppu_true->pattern_cache[7] = nes_ppu_true->tilecache + 0x7000;
nes_ppu.c:    if (romfile->mirror_vertical) {
nes_ppu.c:    nes_ppu_true->chr_is_rom = romfile->chr_size;
nes_ppu.c:    ppu->mapper = mapper;
nes_ppu.c:     * simply anding page with mask - 1, which relies on mask being a power
nes_ppu.c:     * of two (I believe it is in all good dumps of non-pirate games). The
nes_ppu.c:     * dump of Zelda II, which is missing some otherwise unused CHR-ROM
nes_ppu.c:     * hear that, they just want to play their thrice-damned "p1r473 R0MZ".
nes_ppu.c:    return (page & (mask - 1));
nes_ppu.c:    if (ppu->chr_is_rom) {
nes_ppu.c:	num_banks = ppu->romfile->chr_size << 3;
nes_ppu.c:	mem_base = ppu->romfile->chr_data;
nes_ppu.c:	cache_base = ppu->tilecache;
nes_ppu.c:	num_banks = ppu->pageram_size << 3;
nes_ppu.c:	mem_base = ppu->pageram_memory;
nes_ppu.c:	cache_base = ppu->pageram_tilecache;
nes_ppu.c:    ppu->pattern_cache[bank] = cache_base + (masked_page * 0x400 * 4);
nes_ppu.c:    nes_ppu_true->pageram_memory = malloc(num_8k_pages * 0x2000);
nes_ppu.c:    nes_ppu_true->pageram_tilecache = malloc(num_8k_pages * 0x8000);
nes_ppu.c:    nes_ppu_true->pageram_size = num_8k_pages;
nes_ppu.c:	nes_ppu_true->chr_is_rom = 0;
nes_ppu.c:	nes_ppu_true->chr_is_rom = nes_ppu_true->romfile->chr_size;
nes_ppu.c:	if (!nes_ppu_true->chr_is_rom) {
nes_ppu.c:	    nes_ppu_true->pattern_cache[0] = nes_ppu_true->tilecache + 0x0000;
nes_ppu.c:	    nes_ppu_true->pattern_cache[1] = nes_ppu_true->tilecache + 0x1000;
nes_ppu.c:	    nes_ppu_true->pattern_cache[2] = nes_ppu_true->tilecache + 0x2000;
nes_ppu.c:	    nes_ppu_true->pattern_cache[3] = nes_ppu_true->tilecache + 0x3000;
nes_ppu.c:	    nes_ppu_true->pattern_cache[4] = nes_ppu_true->tilecache + 0x4000;
nes_ppu.c:	    nes_ppu_true->pattern_cache[5] = nes_ppu_true->tilecache + 0x5000;
nes_ppu.c:	    nes_ppu_true->pattern_cache[6] = nes_ppu_true->tilecache + 0x6000;
nes_ppu.c:	    nes_ppu_true->pattern_cache[7] = nes_ppu_true->tilecache + 0x7000;
nes_ppu.c:	ppu_latchfunc(ppu->mapper, address);
nes_ppu.c:	    ppu->palette[0x00 + (address & 0x0f)] = value;
nes_ppu.c:	    ppu->palette[0x10 + (address & 0x0f)] = value;
nes_ppu.c:	    ppu->render_palette->set(ppu->render_palette,
nes_ppu.c:	    ppu->render_palette->set(ppu->render_palette,
nes_ppu.c:	    ppu->palette[address & 0x1f] = value;
nes_ppu.c:	    ppu->render_palette->set(ppu->render_palette,
nes_ppu.c:    } else if (!nes_ppu_true->chr_is_rom) {
nes_ppu.c:	cache_bank = ppu->pattern_cache[address >> 10];
nes_ppu.c:	ppu_latchfunc(ppu->mapper, address);
nes_ppu.c:	value = ppu->palette[address & 0x1f];
nes_ppu.c:    cur_ptbl = (ppu->control_1 & 0x08)? 1: 0;
nes_ppu.c:	    cur_pattern_line = (line - (sprites[i].vpos+1)) & (is_8x16? 15: 7);
nes_ppu.c:		cur_pattern_line = (is_8x16? 15: 7) - cur_pattern_line;
nes_ppu.c:		ppu_latchfunc(ppu->mapper, (cur_ptbl << 12) | (cur_tile << 4) | (cur_pattern_line));
nes_ppu.c:		ppu_latchfunc(ppu->mapper, (cur_ptbl << 12) | (cur_tile << 4) | (cur_pattern_line) | 8);
nes_ppu.c:		&(ppu->pattern_cache[(cur_ptbl << 2) + (cur_tile >> 6)]
nes_ppu.c:		ppu->status |= 0x40;
nes_ppu.c:	tiledata--;
nes_ppu.c:    for (i = (num_sprites_line - 1); i >= 0; i--) {
nes_ppu.c:	colors = ppu->render_palette->palettes[4 + (spritecache[i].flags & SFL_COLOR)];
nes_ppu.c:    cur_patternline = (ppu->refresh_data >> 3) & 0x0e00;
nes_ppu.c:    cur_attrbase = (ppu->refresh_data >> 4) & 4;
nes_ppu.c:    cur_ptbl = &ppu->pattern_cache[(ppu->control_1 & 0x10) >> 2];
nes_ppu.c:    cur_bank = PPU_nametables[(ppu->refresh_data >> 10) & 3];
nes_ppu.c:    tile_offset = ppu->refresh_data & 0x1f;
nes_ppu.c:    cur_tile = &cur_bank[(ppu->refresh_data & 0x3e0) + tile_offset];
nes_ppu.c:    cur_attrline = cur_bank + ((ppu->refresh_data >> 4) & 0x38) + 0x3c0 + (tile_offset >> 2);
nes_ppu.c:	    ppu_latchfunc(ppu->mapper, ((ppu->control_1 & 0x10) << 8) | ((*cur_tile) << 4) | cur_patternline);
nes_ppu.c:	    ppu_latchfunc(ppu->mapper, ((ppu->control_1 & 0x10) << 8) | ((*cur_tile) << 4) | cur_patternline | 8);
nes_ppu.c:	attrs[i] = ppu->render_palette->palettes[(*cur_attrline >> cur_attrbase) & 3];
nes_ppu.c:	    cur_bank = PPU_nametables[((ppu->refresh_data >> 10) & 3) ^ 1];
nes_ppu.c:	    cur_tile = &cur_bank[ppu->refresh_data & 0x3e0];
nes_ppu.c:	    cur_attrline = cur_bank + ((ppu->refresh_data >> 4) & 0x38) + 0x3c0;
nes_ppu.c:    if (ppu->control_2 & 0x02) {
nes_ppu.c:    tiledraw_8(cur_vbp, patterns + i, attrs + i, 32 - i, ppu->finescroll);
nes_ppu.c:    cur_vbp = video_get_vbp(ppu->scanline);
nes_ppu.c:    floodfill_8(cur_vbp, 256, ppu->render_palette->palettes[0], 0);
nes_ppu.c:    if (ppu->control_2 & 0x10) {
nes_ppu.c:	PPU_init_spritecache(ppu, ppu->scanline, ppu->control_1 & 0x20);
nes_ppu.c:    if (ppu->control_2 & 0x08) {
nes_ppu.c:    if (ppu->control_2 & 0x10) {
nes_ppu.c:    ppu->refresh_data += 0x1000;
nes_ppu.c:    if (ppu->refresh_data & 0x8000) {
nes_ppu.c:	tmp = (ppu->refresh_data & 0x03e0) + 0x20;
nes_ppu.c:	ppu->refresh_data &= 0x7c1f;
nes_ppu.c:	    ppu->refresh_data ^= 0x0800;
nes_ppu.c:	    ppu->refresh_data |= (tmp & 0x03e0);
nes_ppu.c:	ppu->control_1 = value;
nes_ppu.c:	ppu->refresh_temp &= 0x73ff;
nes_ppu.c:	ppu->refresh_temp |= (value & 3) << 10;
nes_ppu.c:	ppu->control_2 = value;
nes_ppu.c:	ppu->sprite_addy = value;
nes_ppu.c:	PPU_sprite_ram[ppu->sprite_addy++] = value;
nes_ppu.c:	    ppu->refresh_temp &= 0x0c1f;
nes_ppu.c:	    ppu->refresh_temp |= (value & 7) << 12;
nes_ppu.c:	    ppu->refresh_temp |= (value << 2) & 0x03e0;
nes_ppu.c:	    ppu->refresh_temp &= 0x7fe0;
nes_ppu.c:	    ppu->refresh_temp |= value >> 3;
nes_ppu.c:	    ppu->finescroll = value & 7;
nes_ppu.c:	    ppu->address = (ppu->address_latch << 8) | value;
nes_ppu.c:	    ppu->refresh_temp &= 0xff00;
nes_ppu.c:	    ppu->refresh_temp |= value;
nes_ppu.c:	    ppu->refresh_data = ppu->refresh_temp;
nes_ppu.c:	    ppu->address_latch = value;
nes_ppu.c:	    ppu->refresh_temp &= 0x00ff;
nes_ppu.c:	    ppu->refresh_temp |= (value & 0x3f) << 8;
nes_ppu.c:	PPU_write(ppu, ppu->address, value);
nes_ppu.c:	ppu->address += ((ppu->control_1 & 0x04)? 0x20: 1);
nes_ppu.c:	retval = ppu->status;
nes_ppu.c:	ppu->status &= 0x7f;
nes_ppu.c:	retval = ppu->read_latch;
nes_ppu.c:	ppu->read_latch = PPU_read(ppu, ppu->address);
nes_ppu.c:	ppu->address += ((ppu->control_1 & 0x04)? 0x20: 1);
nes_ppu.c:    return 0; /* gcc -O2 is a chode. */
nes_ppu.c: * removed the call to ppu->mapper->vsync() in nesppu_periodic()
nes_ppu.c: * fixed stupid mistake with CHR-RAM tile cache
nes_ppu.c: * fixed tile cache to work with CHR-RAM games
nes_ppu.c: * added preliminary tile cache (only works on CHR-ROM games)
nes_ppu.c: * rebuilt chr-rom mapping to automatically handle page out of range conditions
nes_ppu.c: * rebuilt chr-rom mapping to ignore mapping when using chr-ram
nes_ppu.c: * changed ppu_io_write so that a mid-hblank write to $2000 can only
nes_ppu.c: * removed mid-hblank write detection logic from ppu_w_2006().
nes_ppu.c: * re-added the assignment to ppu_saved_nametable in ppu_enter_cpu().
nes_ppu.c: * added support for left-clipped background.
nes_ppu.c: * re-added (preliminary) support for ppu reads.
nes_ppu.c: * Added preliminary support for Mid-HBlank PPU address writes.
nes_ppu.c: * cleaned up the right-clip blit case in PPU_render_background.
nes_ppu.c: * more cleanup of the left-clip blit case in PPU_render_background.
nes_ppu.c: * cleaned up the left-clip blit cases in PPU_render_background.
nes_ppu.c: *   left-side blitters
nes_ppu.c: *   right-side blitters
nes_ppu.c: * added support for one-screen mirroring
nes_psg.c:    if (channel->a & 0x10) {
nes_psg.c:	return channel->a & 0x0f;
nes_psg.c:	return envelope->decay_counter;
nes_psg.c:    if (envelope->rate_counter--) return;
nes_psg.c:    envelope->rate_counter = channel->a & 0x0f;
nes_psg.c:    if (envelope->decay_counter--) return;
nes_psg.c:    envelope->decay_counter = (channel->a & 0x20)? 0x0f: 0;
nes_psg.c:    return channel->b & 0x80;
nes_psg.c:    return channel->b & 7;
nes_psg.c:    return channel->b & 0x08;
nes_psg.c:    channel->c = freq;
nes_psg.c:    channel->d &= ~7;
nes_psg.c:    channel->d |= (freq >> 8) & 7;
nes_psg.c:	freq -= freq >> sweep_unit_shift_count(channel);
nes_psg.c:	    freq--;
nes_psg.c:    if ((*sweep_clock)--) return;
nes_psg.c:    *sweep_clock = (channel->b >> 3) & 0x0e;
nes_psg.c:	nes_psg_c4_atl--;
nes_psg.c:    if (!length_counter_clock--) {
nes_psg.c:		wave_1_length_counter--;
nes_psg.c:		wave_2_length_counter--;
nes_psg.c:		wave_3_length_counter--;
nes_psg.c:	    nes_psg_quality--;
nes_psg.c: * fixed another "minor" bug triggered when -DSOUND isn't present
nes_psg.c: * fixed minor bug with compiling without -DSOUND
nes_psg.c: * broke all os-dependant sound code out to separate files
palette.c:    ((PALETTE_TYPE *)this->base_palette)[index] = ((PALETTE_TYPE *)this->translate)[value];
palette.c:    retval->set = SET_PALETTE_FUNCTION;
palette.c:    retval->translate = vid_pre_xlat;
palette.c:    retval->base_palette = &retval->palettes[num_palettes];
palette.c:	retval->palettes[i] = &(((PALETTE_TYPE *)retval->base_palette)[palette_size * i]);
pce.c: * contains PC-Engine specific code and data.
pce.c:#include "cpu6280int.h" /* FIXME: technically a no-no */
pce.c:	if ((pce_rom_file->size == 0x280200)
pce.c:	    || (pce_rom_file->size == 0x280000)) {
pce.c:		    pce_mmap[i] = pce_mmap[i-1] + 0x2000;
pce.c:	pce_cpu->irq(pce_cpu, 2);
pce.c:    if (!pce_timer.value--) {
pce.c:	pce_cpu->irq(pce_cpu, 4);
pce.c:    for (i = 0; i < pce_rom_file->size; i++) {
pce.c:	pce_rom_file->data[i] = bitswizzle[pce_rom_file->data[i]];
pce.c:    romsize = pce_rom_file->size;
pce.c:    romimage = pce_rom_file->data;
pce.c:	printf("pce_init_mmap(): compensating for 512-byte header.\n");
pce.c:	pce_mmap[i] = pce_ram + ((i - 0xf8) * 0x2000);
pce.c:/*      pce_mpr = pce_cpu->data.d_marat6280->mpr; */
pce.c:    pce_mpr = pce_cpu->data.d_cpu6280->mpr;
pce.c:	pce_cpu->setzpage(pce_cpu, pce_ram);
pce.c:	pce_cpu->setmmu8(pce_cpu, 0, 0, pce_memread, pce_memwrite);
pce.c:	pce_cpu->reset(pce_cpu);
pce.c: * added another split-rom compensator to pce_init_mmap()
pce.c: * re-enabled interrupt generation
pce.c: * added compensation for 512-byte header in pce_init_mmap()
pce_cd.c: * PC-Engine cd support.
pce_cd.c: *  convert logical_block_address to m-s-f_number (3 bytes only)
pce_cd.c:    retval -= CD_BLOCK_OFFSET;
pce_cd.c:    pce_cd_sectorcnt--;
pce_cd.c:    pce_cd_command.args_left--;
pce_cd.c:	pce_cd_read_datacnt--;
pce_cd.c:	    /* FIXME: The full sequence is 0->3->2->0 on the low 2 bits */
pce_cd.c:	pce_mmap[i] = pce_mmap[i-1] + 0x2000;
pce_cd.c:	pce_mmap[i] = pce_mmap[i-1] + 0x2000;
pce_vdp.c:	    retval = vdp->palette_h[vdp->palette_addr];
pce_vdp.c:	    vdp->palette_addr += 1;
pce_vdp.c:	    vdp->palette_addr &= 0x1ff;
pce_vdp.c:	    return vdp->palette_l[vdp->palette_addr];
pce_vdp.c:#define PCE_COLOR_XLAT(x) vid_pre_xlat[((vdp->palette_l[x] & 0x6) >> 1) | ((vdp->palette_l[x] & 0x30) >> 2) | ((vdp->palette_l[x] & 0x80) >> 3) | ((vdp->palette_h[x] & 1) << 5)]
pce_vdp.c:	vdp->palette_addr &= 0x100;
pce_vdp.c:	vdp->palette_addr |= data;
pce_vdp.c:	    vdp->palette_addr |= 0x100;
pce_vdp.c:	    vdp->palette_addr &= 0xff;
pce_vdp.c:	vdp->palette_l[vdp->palette_addr] = data;
pce_vdp.c:	vdp->palette_xlat[vdp->palette_addr] = PCE_COLOR_XLAT(vdp->palette_addr);
pce_vdp.c:	vdp->palette_h[vdp->palette_addr] = data & 1;
pce_vdp.c:	vdp->palette_xlat[vdp->palette_addr] = PCE_COLOR_XLAT(vdp->palette_addr);
pce_vdp.c:	vdp->palette_addr += 1;
pce_vdp.c:	vdp->palette_addr &= 0x1ff;
pce_vdp.c:	retval = vdp->status;
pce_vdp.c:	vdp->status &= ~0x24; /* clear vblank bit */ /* FIXME: may be wrong */
pce_vdp.c:	if (vdp->cur_reg != 2) {
pce_vdp.c:	    deb_printf("pce_vdp: r1l cur_reg %d.\n", vdp->cur_reg);
pce_vdp.c:	    return vdp->memory[(vdp->mem_read_addr << 1) + 0];
pce_vdp.c:	if (vdp->cur_reg != 2) {
pce_vdp.c:	    deb_printf("pce_vdp: r1h cur_reg %d.\n", vdp->cur_reg);
pce_vdp.c:	    return vdp->memory[(vdp->mem_read_addr++ << 1) + 1];
pce_vdp.c:	vdp->cur_reg = data & 0x1f;
pce_vdp.c:	switch (vdp->cur_reg) {
pce_vdp.c:	    vdp->mem_write_addr &= 0xff00;
pce_vdp.c:	    vdp->mem_write_addr |= data;
pce_vdp.c:	    vdp->mem_read_addr &= 0xff00;
pce_vdp.c:	    vdp->mem_read_addr |= data;
pce_vdp.c:	    vdp->memory[((vdp->mem_write_addr & 0x7fff) << 1) + 0] = data;
pce_vdp.c:	    pce_tilecache_dirty[(vdp->mem_write_addr & 0x7fff) >> 4] = 1;
pce_vdp.c:	    vdp->regs_l[5] = data;
pce_vdp.c:	    vdp->regs_l[6] = data;
pce_vdp.c:	case 7: /* BG X-Scroll */
pce_vdp.c:	    vdp->regs_l[7] = data;
pce_vdp.c:	case 8: /* BG Y-Scroll */
pce_vdp.c:/*  	    deb_printf("pce_vdp: BYR low set 0x%02x, %d.\n", data, vdp->cur_scanline); */
pce_vdp.c:	    vdp->regs_l[8] = data;
pce_vdp.c:	    vdp->y_scroll &= 0xff00;
pce_vdp.c:	    vdp->y_scroll |= data;
pce_vdp.c:	    vdp->regs_l[9] = data;
pce_vdp.c:	    vdp->regs_l[11] = data;
pce_vdp.c:	    vdp->regs_l[19] = data;
pce_vdp.c:	    deb_printf("pce_vdp: regwrite %d l = 0x%02x.\n", vdp->cur_reg, data);
pce_vdp.c:	switch (vdp->cur_reg) {
pce_vdp.c:	    vdp->mem_write_addr &= 0x00ff;
pce_vdp.c:	    vdp->mem_write_addr |= (data << 8);
pce_vdp.c:	    vdp->mem_read_addr &= 0x00ff;
pce_vdp.c:	    vdp->mem_read_addr |= (data << 8);
pce_vdp.c:	    vdp->memory[((vdp->mem_write_addr & 0x7fff) << 1) + 1] = data;
pce_vdp.c:	    pce_tilecache_dirty[(vdp->mem_write_addr & 0x7fff) >> 4] = 1;
pce_vdp.c:	    vdp->mem_write_addr += (1 << ((vdp->regs_h[5] & 0x18)? ((vdp->regs_h[5] & 0x18) >> 3) + 4: 0)); /* FIXME: is this right? */
pce_vdp.c:	    switch (vdp->regs_h[5] & 0x18) {
pce_vdp.c:		vdp->mem_write_addr += 1;
pce_vdp.c:		vdp->mem_write_addr += 32;
pce_vdp.c:		vdp->mem_write_addr += 64;
pce_vdp.c:		vdp->mem_write_addr += 128;
pce_vdp.c:	    vdp->regs_h[5] = data;
pce_vdp.c:	    vdp->regs_h[6] = data;
pce_vdp.c:	case 7: /* BG X-Scroll */
pce_vdp.c:	    vdp->regs_h[7] = data;
pce_vdp.c:	case 8: /* BG Y-Scroll */
pce_vdp.c:/*  	    deb_printf("pce_vdp: BYR high set 0x%02x, %d.\n", data, vdp->cur_scanline); */
pce_vdp.c:	    vdp->regs_h[8] = data;
pce_vdp.c:	    vdp->y_scroll &= 0x00ff;
pce_vdp.c:	    vdp->y_scroll |= (data << 8);
pce_vdp.c:	    vdp->regs_h[19] = data;
pce_vdp.c:	    deb_printf("pce_vdp: regwrite %d h = 0x%02x.\n", vdp->cur_reg, data);
pce_vdp.c:    tiledata = &vdp->memory[tile << 5];
pce_vdp.c:    for (i = 8; i; i--) {
pce_vdp.c:    cur_scanline = (vdp->y_scroll) & ((vdp->regs_l[9] & 0x40)? 511: 255);
pce_vdp.c:    if ((vdp->regs_l[9] & 0x30) == 0x00) {
pce_vdp.c:	linebase = &((unsigned short *)vdp->memory)[(cur_scanline & 0x3f8) << 2];
pce_vdp.c:    } else if ((vdp->regs_l[9] & 0x30) == 0x10) {
pce_vdp.c:	linebase = &((unsigned short *)vdp->memory)[(cur_scanline & 0x3f8) << 3];
pce_vdp.c:	linebase = &((unsigned short *)vdp->memory)[(cur_scanline & 0x3f8) << 4];
pce_vdp.c:    cur_pos = (vdp->regs_l[7] >> 3) + ((vdp->regs_h[7] & 3) << 5);
pce_vdp.c:    finescroll = vdp->regs_l[7] & 7;
pce_vdp.c:    for (i = 0; i <= vdp->last_width + 1; i++) {
pce_vdp.c:	palette = &vdp->palette_xlat[(cur_tile >> 8) & 0xf0];
pce_vdp.c:    tiledraw_8(cur_vbp, pce_cached_patterns, pce_cached_palettes, vdp->last_width + 1, finescroll);
pce_vdp.c:    if (position < -8) {
pce_vdp.c:	blit_4_8_czt(pat0, pat1, pat2, pat3, 8 + position, -position, palette, vbp);
pce_vdp.c:	blit_4_8_czt(pat0, pat1, pat2, pat3, width - position, 0, palette, vbp + position);
pce_vdp.c:    if (position < -8) {
pce_vdp.c:	blit_4_8_czt_rev(pat0, pat1, pat2, pat3, 8 + position, -position, palette, vbp);
pce_vdp.c:	blit_4_8_czt_rev(pat0, pat1, pat2, pat3, width - position, 0, palette, vbp + position);
pce_vdp.c:    satb = (struct satb_entry *)(((unsigned short *)vdp->memory) + (((vdp->regs_h[19] & 0x7f) << 8) + vdp->regs_l[19]));
pce_vdp.c:    for (i = 63; i >= 0; i--) {
pce_vdp.c:	if ((cur_sprite.ypos & 0x3ff) > (vdp->cur_scanline + 64)) {
pce_vdp.c:	cur_pattern_line = (vdp->cur_scanline + 64) - (cur_sprite.ypos & 0x3ff);
pce_vdp.c:	/* v-size check */
pce_vdp.c:	/* y-flip check */
pce_vdp.c:	    cur_pattern_line = (sprite_vsize - 1) - cur_pattern_line;
pce_vdp.c:	cur_pattern = &vdp->memory[(cur_sprite.pattern & 0x3ff) << 6];
pce_vdp.c:	palette = &vdp->palette_xlat[0x100 + ((cur_sprite.flags & SF_PALETTE) << 4)];
pce_vdp.c:	    pce_vdp_draw_sprite(cur_vbp, cur_pattern, palette, (cur_sprite.xpos & 0x3ff) - 32, vdp->display_width);
pce_vdp.c:		pce_vdp_draw_sprite(cur_vbp, cur_pattern, palette, (cur_sprite.xpos & 0x3ff) - 16, vdp->display_width);
pce_vdp.c:		pce_vdp_draw_sprite_rev(cur_vbp, cur_pattern, palette, (cur_sprite.xpos & 0x3ff) - 32, vdp->display_width);
pce_vdp.c:		pce_vdp_draw_sprite_rev(cur_vbp, cur_pattern, palette, (cur_sprite.xpos & 0x3ff) - 16, vdp->display_width);
pce_vdp.c:		pce_vdp_draw_sprite_rev(cur_vbp, cur_pattern, palette, (cur_sprite.xpos & 0x3ff) - 32, vdp->display_width);
pce_vdp.c:    cur_vbp = video_get_vbp(vdp->cur_scanline);
pce_vdp.c:    memset(cur_vbp, vdp->palette_xlat[0], vdp->display_width);
pce_vdp.c:    if (vdp->regs_l[5] & 0x40) {
pce_vdp.c:    if (vdp->regs_l[5] & 0x80) {
pce_vdp.c:    if (vdp->regs_l[5] & 0x40) {
pce_vdp.c:    if ((vdp->cur_scanline + 0x40) == (vdp->regs_l[6] + (vdp->regs_h[6] << 8))) {
pce_vdp.c:/*  	deb_printf("pce_vdp: RCR! (%d)\n", vdp->cur_scanline); */
pce_vdp.c:	vdp->status |= 0x04;
pce_vdp.c:	vdp->status &= ~0x04;
pce_vdp.c:    if (vdp->cur_scanline < 256) {
pce_vdp.c:	vdp->y_scroll++;
pce_vdp.c:    if (vdp->cur_scanline == 256) {
pce_vdp.c:	vdp->status |= 0x20; /* FIXME: I'm not sure about this. */
pce_vdp.c:    if (vdp->cur_scanline == 261) {
pce_vdp.c:	vdp->cur_scanline = 0;
pce_vdp.c:	vdp->y_scroll = ((vdp->regs_h[8] << 8) + vdp->regs_l[8]);
pce_vdp.c:	if ((vdp->regs_l[11] & 0x7f) != vdp->last_width) {
pce_vdp.c:	    vdp->last_width = vdp->regs_l[11] & 0x7f;
pce_vdp.c:	    vdp->display_width = (vdp->last_width + 1) << 3;
pce_vdp.c:	    video_setsize(vdp->display_width, 256);
pce_vdp.c:	vdp->cur_scanline++;
pce_vdp.c:    return ((vdp->regs_l[5] & 0x08) && (vdp->status & 0x20)) ||
pce_vdp.c:	((vdp->regs_l[5] & 0x04) && (vdp->status & 0x04));
pce_vdp.c:    return ((vdp->regs_l[5] & 0x08) && (vdp->status & 0x20)); /* FIXME: may be wrong. */
pce_vdp.c:	retval->memory = calloc(1, PCE_VDP_RAMSIZE);
pce_vdp.c:	if (retval->memory) {
pce_vdp.c:	    retval->last_width = 31;
pce_vdp.c:	    retval->display_width = 256;
pce_vdp.c:	    retval->last_height = 0;
pce_vdp.c:	    retval->regs_l[11] = 31;
pce_vdp.c: * re-inserted the line of code I removed in 1.49 (broke puzznic)
pce_vdp.c: * removed a useless-looking line of code from the vblank end code
pce_vdp.c: * Fixed some V-scroll problems relating to raster splits
pce_vdp.c: * removed non-tilecache renderer
pce_vdp.c: * fixed pce_vdp_render_background() to not v-wrap the playfield too soon
pce_vdp.c: * fixed some v-scroll problems
pce_vdp.c: * added horizontal-reversed sprite support
pce_vdp.c: * offset the sprites by -32x-64 so they appear in the right place
pce_vdp.c: * added preliminary support for memory-width register (reg 9)
sg1000.c:    sg1k_mmu[0].end = sg1k_romsize - 1;
sg1000.c:    sg1k_mmu[2].data = sg1k_memory - 0xa000;
sg1000.c:    sg1k_mmu[3].data = sg1k_memory - 0xc000;
sg1000.c:    sg1k_mmu[4].data = sg1k_memory - 0xe000;
sg1000.c: * The sc3k keyboard is a scan-polled key array, configured as 7 rows (the
sg1000.c: *    +---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * | 8| 8 | 9 | 0 | - | ^ |Yen|???|
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c: * +--+---+---+---+---+---+---+---+
sg1000.c:    0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, /* 0x00 - 0x07 */
sg1000.c:    0x18, 0x28, 0x38, 0x00, 0x00, 0x00, 0x00, 0x11, /* 0x08 - 0x0f */
sg1000.c:    0x21, 0x31, 0x41, 0x51, 0x61, 0x71, 0x17, 0x27, /* 0x10 - 0x17 */
sg1000.c:    0x37, 0x00, 0x66, 0x00, 0x00, 0x12, 0x22, 0x32, /* 0x18 - 0x1f */
sg1000.c:    0x42, 0x52, 0x62, 0x72, 0x16, 0x26, 0x36, 0x00, /* 0x20 - 0x27 */
sg1000.c:    0x00, 0x00, 0x00, 0x13, 0x23, 0x33, 0x43, 0x53, /* 0x28 - 0x2f */
sg1000.c:    0x63, 0x73, 0x15, 0x25, 0x35, 0x00, 0x00, 0x00, /* 0x30 - 0x37 */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x38 - 0x3f */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x40 - 0x47 */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x48 - 0x4f */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x50 - 0x57 */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x58 - 0x5f */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x60 - 0x67 */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x68 - 0x6f */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x70 - 0x77 */
sg1000.c:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x78 - 0x7f */
sg1000.c:    row = (keyposition >> 4) - 1;
sg1000.c:    sc3k_mmu[0].end = sg1k_romsize - 1;
sg1000.c:    sc3k_mmu[2].data = sg1k_memory - 0x8000;
sg1000.c:    for (map = sega_io_read_map; map->mask; map++) {
sg1000.c:	if ((address & map->mask) == map->addr) {
sg1000.c:	    if (map->handler) {
sg1000.c:		return map->handler(address);
sg1000.c:    for (map = sega_io_write_map; map->mask; map++) {
sg1000.c:	if ((address & map->mask) == map->addr) {
sg1000.c:	    if (map->handler) {
sg1000.c:		map->handler(address, data);
sg1000.c:	sg1k_cpu->irq(sg1k_cpu, 0xff);
sg1000.c:	    sg1k_cpu->nmi(sg1k_cpu);
sg1000.c:    sg1k_cpu->setmmu0(sg1k_cpu, system->mmu);
sg1000.c:    sg1k_cpu->setmmu8(sg1k_cpu, 0, 0, &system->memread, &system->memwrite);
sg1000.c:    sg1k_cpu->setiou(sg1k_cpu, sega_io_read, sega_io_write);
sg1000.c:    sg1k_cpu->reset(sg1k_cpu);
sg1000.c:    sg1k_memory = calloc(1, system->ram_size);
sg1000.c:    sg1k_rombase = romfile->data;
sg1000.c:    sg1k_romsize = romfile->size;
sg1000.c:    sega_io_read_map = system->io_read_map;
sg1000.c:    sega_io_write_map = system->io_write_map;
sg1000.c:    system->mmu_init();
sg1000.c:    if (system->io_init) {
sg1000.c:	system->io_init();
sg1000.c: * changed the design for easier support of different 8-bit sega systems
sms9918.c:    if (vdp->address & 0x4000) {
sms9918.c:	if (!(vdp->flags & TF_GAMEGEAR)) {
sms9918.c:	    retval = vdp->palette[(vdp->address++) & 0x1f];
sms9918.c:	    vdp->address &= 0x401f;
sms9918.c:	    retval = vdp->palette[(vdp->address++) & 0x3f];
sms9918.c:	    vdp->address &= 0x403f;
sms9918.c:	retval = vdp->readahead;
sms9918.c:	vdp->readahead = vdp->memory[vdp->address++];
sms9918.c:	vdp->address &= 0x3fff;
sms9918.c:    vdp->flags &= ~TF_ADDRWRITE;
sms9918.c:    if (vdp->address & 0x4000) {
sms9918.c:	if (!(vdp->flags & TF_GAMEGEAR)) {
sms9918.c:	    vdp->palette_xlat[(vdp->address) & 0x1f] = vid_pre_xlat[data&0x3f];
sms9918.c:	    vdp->palette[(vdp->address++) & 0x1f] = data;
sms9918.c:	    vdp->address &= 0x401f;
sms9918.c:	    vdp->palette[(vdp->address) & 0x3f] = data;
sms9918.c:	    tmp = (vdp->palette[((vdp->address) & 0x3f) | 1] << 2) & 0x30;
sms9918.c:	    tmp |= (vdp->palette[(vdp->address) & 0x3e] >> 4) & 0x0c;
sms9918.c:	    tmp |= (vdp->palette[(vdp->address) & 0x3e] >> 2) & 0x03;
sms9918.c:	    vdp->palette_xlat[((vdp->address) >> 1) & 0x1f] = vid_pre_xlat[tmp];
sms9918.c:	    vdp->address++;
sms9918.c:	    vdp->address &= 0x403f;
sms9918.c:	vdp->readahead = data;
sms9918.c:	vdp->memory[vdp->address] = data;
sms9918.c:	sms9918_cache_tile(vdp, vdp->address);
sms9918.c:	sms9918_cache_name(vdp, vdp->address);
sms9918.c:	vdp->address++;
sms9918.c:	vdp->address &= 0x3fff;
sms9918.c:    vdp->flags &= ~TF_ADDRWRITE;
sms9918.c:    retval = vdp->status;
sms9918.c:    vdp->status &= 0x3f;
sms9918.c:    vdp->flags &= ~TF_ADDRWRITE;
sms9918.c:    vdp->regs[reg] = data;
sms9918.c:	vdp->nametable = &sms9918_namecache[(data & 14) << 9];
sms9918.c:	vdp->coarsescroll = (32 - ((data + 7) >> 3)) & 0x1f;
sms9918.c:	vdp->finescroll = (8 - (data & 7)) & 7;
sms9918.c:    if (vdp->flags & TF_ADDRWRITE) {
sms9918.c:		if (!(vdp->flags & TF_GAMEGEAR)) {
sms9918.c:		    vdp->address = (vdp->addrsave | (data << 8)) & 0x401f;
sms9918.c:		    vdp->address = (vdp->addrsave | (data << 8)) & 0x403f;
sms9918.c:		sms9918_write_register(vdp, data & 15, vdp->addrsave);
sms9918.c:	    vdp->address = (vdp->addrsave | (data << 8)) & 0x3fff;
sms9918.c:		vdp->readahead = vdp->memory[vdp->address++];
sms9918.c:		vdp->address &= 0x3fff;
sms9918.c:	vdp->flags &= ~TF_ADDRWRITE;
sms9918.c:	vdp->addrsave = data;
sms9918.c:	vdp->flags |= TF_ADDRWRITE;
sms9918.c:    return (vdp->cur_scanline < 192)? vdp->cur_scanline: 255;
sms9918.c:    tiledata = &vdp->memory[addr & ~3];
sms9918.c:    cur_tile = ltoh16(*((unsigned short *)(&vdp->memory[addr & ~1])));
sms9918.c:	namecache->is_vflip = 1;
sms9918.c:	namecache->is_vflip = 0;
sms9918.c:	namecache->back_tile = NULL;
sms9918.c:	namecache->front_tile = tiledata;
sms9918.c:	namecache->back_tile = tiledata;
sms9918.c:	namecache->front_tile = NULL;
sms9918.c:	namecache->palette = &vdp->palette_xlat[16];
sms9918.c:	namecache->palette = &vdp->palette_xlat[0];
sms9918.c:    cur_scanline = vdp->cur_scanline + vdp->regs[9];
sms9918.c:	cur_scanline -= 224;
sms9918.c:    pattern_offset_rev = (7 - cur_pattern_line) << 3;
sms9918.c:    cur_pos = vdp->nametable;
sms9918.c:    if ((vdp->regs[0] & 0x40) && (cur_scanline < 16)) {
sms9918.c:	scroll = vdp->coarsescroll;
sms9918.c:	sms_back_finescroll = vdp->finescroll;
sms9918.c:	sms_back_tiles[i] = cur_tile->back_tile;
sms9918.c:	sms_front_tiles[i] = cur_tile->front_tile;
sms9918.c:	sms_back_palettes[i] = cur_tile->palette;
sms9918.c:	if (cur_tile->is_vflip) {
sms9918.c:    sprite_table = &vdp->memory[(vdp->regs[5] & 0x7e) << 7];
sms9918.c:    sprite_8x16 = (vdp->regs[1] & 2)? 16: 8;
sms9918.c:	cur_pattern_line = vdp->cur_scanline - sprite_table[i];
sms9918.c:	cur_tile = sprite_table[128 + (i << 1) + 1] | ((vdp->regs[6] & 4) << 6);
sms9918.c:	if (vdp->regs[1] & 2) {
sms9918.c:    for (i = num_sprites - 1; i >= 0; i--) {
sms9918.c:				     &vdp->palette_xlat[16], 256-sprite_x[i]);
sms9918.c:	    sms9918_draw_sprite_line(&cur_vbp[0], tiledata[i]+(256-sprite_x[i]),
sms9918.c:				     &vdp->palette_xlat[16], 8-(256-sprite_x[i]));
sms9918.c:				     &vdp->palette_xlat[16], 8);
sms9918.c:    for (i = num_sprites - 1; i >= 0; i--) {
sms9918.c:	    sms9918_draw_sprite_line(&cur_vbp[0], tiledata[i]-(sprite_x[i]-48),
sms9918.c:				     &vdp->palette_xlat[16], sprite_x[i]-40);
sms9918.c:	    sms9918_draw_sprite_line(&cur_vbp[sprite_x[i]-48], tiledata[i],
sms9918.c:				     &vdp->palette_xlat[16], 8);
sms9918.c:	    sms9918_draw_sprite_line(&cur_vbp[sprite_x[i]-48], tiledata[i],
sms9918.c:				     &vdp->palette_xlat[16], 208-sprite_x[i]);
sms9918.c:    video_buffer = video_get_vbp(vdp->cur_scanline);
sms9918.c:    if (vdp->regs[1] & 0x40) {
sms9918.c:	if (vdp->regs[0] & 0x20) {
sms9918.c:    video_buffer = video_get_vbp(vdp->cur_scanline - 24);
sms9918.c:    if (vdp->regs[1] & 0x40) {
sms9918.c:    if ((!(vdp->flags & TF_GAMEGEAR)) && (vdp->cur_scanline < 192)) {
sms9918.c:    } else if ((vdp->flags & TF_GAMEGEAR) && (vdp->cur_scanline >= 24) && (vdp->cur_scanline < 168)) {
sms9918.c:    } else if (vdp->cur_scanline == 192) {
sms9918.c:	vdp->status |= 0x80;
sms9918.c:    if (vdp->cur_scanline == 261) {
sms9918.c:	vdp->cur_scanline = 0;
sms9918.c:	vdp->linecounter = vdp->regs[10];
sms9918.c:	vdp->cur_scanline++;
sms9918.c:	if ((vdp->cur_scanline < 192) && (!(vdp->linecounter--))) {
sms9918.c:	    vdp->status |= 0x40;
sms9918.c:	    vdp->linecounter = vdp->regs[10];
sms9918.c:    return (((vdp->status & 0x80) && (vdp->regs[1] & 0x20)) ||
sms9918.c:	    ((vdp->status & 0x40) && (vdp->regs[0] & 0x10)));
sms9918.c:	vdp->flags = TF_GAMEGEAR;
sms9918.c:	retval->memory = calloc(1, SMS_VDP_RAMSIZE);
sms9918.c:	if (!retval->memory) {
sms9918.c: * re-restructured the tilecache (reversed part of revision 1.35)
sms9918.c: * applied some strength reductions (loop-invariant code motion) to the renderer
sms9918.c: * re-added the left column display disable
sms9918.c: * fixed broken scrolling of leftmost 0-7 pixels of the background
sms9918.c: * removed non-tilecache renderer code
sms9918.c: * right side while h-scrolling.
sms.c:    sms_bank0 = &sms_rombase[(sms_pageregs[1] << 14) & (sms_romsize - 1)];
sms.c:    sms_bank1 = &sms_rombase[(sms_pageregs[2] << 14) & (sms_romsize - 1)];
sms.c:	sms_bank2 = &sms_rombase[(sms_pageregs[3] << 14) & (sms_romsize - 1)];
sms.c:    sms_mmu[2].data = sms_bank1 - 0x4000;
sms.c:    sms_mmu[3].data = sms_bank2 - 0x8000;
sms.c:    if (romfile->size & 0x200) {
sms.c:	sms_rombase = romfile->data + 0x200;
sms.c:	sms_romsize = romfile->size - 0x200;
sms.c:	sms_rombase = romfile->data;
sms.c:	sms_romsize = romfile->size;
sms.c:	/* Okay, who the heck thought up the 64-byte footer? */
sms.c:	deb_printf("64-byte footer detected, ignoring.\n");
sms.c:	sms_romsize -= 0x40;
sms.c:    sms_mmu[4].data = sms_memory - 0xc000;
sms.c:    sms_mmu[5].data = sms_memory - 0xe000;
sms.c:    sms_cpu->setmmu0(sms_cpu, sms_mmu);
sms.c:    sms_cpu->setmmu8(sms_cpu, 0, 0, &sms_readfunc, &sms_writefunc);
sms.c:    sms_cpu->setiou(sms_cpu, sms_io_read, sms_io_write);
sms.c:    sms_cpu->reset(sms_cpu);
sms.c:	sms_cpu->irq(sms_cpu, 0xff);
sms.c:	    sms_cpu->nmi(sms_cpu);
sms.c:	sms_cart_memory = sms_battery_file->data;
sms.c: * added code to detect ROMs with a 64-byte footer and handle them correctly
sms.c: * removed aliasing of bankswitch regs to 0xdffc-0xdfff
sms.c: * added aliasing of bankswitch regs to 0xdffc-0xdfff.
sms.c: * added code to prevent non-extant banks on rom from being swapped in.
sms_psg.c:	    sms_psg.vols[(data >> 5) & 3] = (15 - (data & 15)) * 0x11;
sms_psg.c:	    nes_psg_quality--;
sms_psg.c: * broke all os-dependant sound code out to separate files
snd_allegro.c:	while (!final_wave) { /* Wheee... Primitive Framesync. :-) */
snd_unix.c:	    if (write(sound_fd, &final_wave[(wavflag - 1) << 10], 1024) < 1024) {
snd_unix.c:    printf("setting unsigned 8-bit format...");
snd_unix.c:    printf("setting unsigned 8-bit format...");
test_6280.c:    context->reg_a = 0x00;
test_6280.c:    context->reg_x = 0x00;
test_6280.c:    context->reg_y = 0x00;
test_6280.c:    context->reg_s = 0xff;
test_6280.c:    context->pc = 0;
test_6280.c:    context->flags = 0;
test_6280.c:    context->cycles_left = 0;
test_6280.c:	reg = &context->reg_a;
test_6280.c:	reg = &context->reg_x;
test_6280.c:	reg = &context->reg_y;
test_6280.c:	reg = &context->reg_s;
test_6280.c:    context->cycles_left = strtol(buf, NULL, 0);
test_6280.c:    context->pc = strtoul(buf, NULL, 0);
test_6280.c:    for (cur_match = set_line_types; cur_match->match; cur_match++) {
test_6280.c:	match_len = strlen(cur_match->match);
test_6280.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_6280.c:	    return cur_match->handler(bufptr);
test_6280.c:	reg = &context->reg_a;
test_6280.c:	reg = &context->reg_x;
test_6280.c:	reg = &context->reg_y;
test_6280.c:	reg = &context->reg_s;
test_6280.c:    if (data != context->cycles_left) {
test_6280.c:	printf("check cycles: expected 0x%04x, found 0x%04x.\n", data, context->cycles_left);
test_6280.c:    if (data != context->pc) {
test_6280.c:	printf("check pc: expected 0x%04hx, found 0x%04hx.\n", data, context->pc);
test_6280.c:    for (cur_match = check_line_types; cur_match->match; cur_match++) {
test_6280.c:	match_len = strlen(cur_match->match);
test_6280.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_6280.c:	    return cur_match->handler(bufptr);
test_6280.c:    for (cur_match = line_types; cur_match->match; cur_match++) {
test_6280.c:	match_len = strlen(cur_match->match);
test_6280.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_6280.c:	    return cur_match->handler(bufptr);
test_6280.c:	if (buf[strlen(buf) - 1] == '\n') {
test_6280.c:	    buf[strlen(buf) - 1] = '\0';
test_6280.c:    context = test_cpu->data.d_cpu6280;
test_6280.c:    test_cpu->setmmu8(test_cpu, 0, 0, read8table, write8table);
test_6280.c:    test_cpu->setzpage(test_cpu, page_0);
test_6502.c:    context->reg_a = 0x00;
test_6502.c:    context->reg_x = 0x00;
test_6502.c:    context->reg_y = 0x00;
test_6502.c:    context->reg_s = 0xff;
test_6502.c:    context->pc = 0;
test_6502.c:    context->flags = 0;
test_6502.c:    context->cycles_left = 0;
test_6502.c:	reg = &context->reg_a;
test_6502.c:	reg = &context->reg_x;
test_6502.c:	reg = &context->reg_y;
test_6502.c:	reg = &context->reg_s;
test_6502.c:    context->cycles_left = strtol(buf, NULL, 0);
test_6502.c:    context->pc = strtoul(buf, NULL, 0);
test_6502.c:    for (cur_match = set_line_types; cur_match->match; cur_match++) {
test_6502.c:	match_len = strlen(cur_match->match);
test_6502.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_6502.c:	    return cur_match->handler(bufptr);
test_6502.c:	reg = &context->reg_a;
test_6502.c:	reg = &context->reg_x;
test_6502.c:	reg = &context->reg_y;
test_6502.c:	reg = &context->reg_s;
test_6502.c:    if (data != context->cycles_left) {
test_6502.c:	printf("check cycles: expected 0x%04x, found 0x%04x.\n", data, context->cycles_left);
test_6502.c:    if (data != context->pc) {
test_6502.c:	printf("check pc: expected 0x%04hx, found 0x%04hx.\n", data, context->pc);
test_6502.c:    for (cur_match = check_line_types; cur_match->match; cur_match++) {
test_6502.c:	match_len = strlen(cur_match->match);
test_6502.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_6502.c:	    return cur_match->handler(bufptr);
test_6502.c:    for (cur_match = line_types; cur_match->match; cur_match++) {
test_6502.c:	match_len = strlen(cur_match->match);
test_6502.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_6502.c:	    return cur_match->handler(bufptr);
test_6502.c:	if (buf[strlen(buf) - 1] == '\n') {
test_6502.c:	    buf[strlen(buf) - 1] = '\0';
test_68k.c:	context->regs_a[i] = 0;
test_68k.c:	context->regs_d[i] = 0;
test_68k.c:    context->pc = 0;
test_68k.c:/*      context->flags = 0; */
test_68k.c:    context->other_sp = 0;
test_68k.c:    context->cycles_left = 0;
test_68k.c:    context->read8table = read8table;
test_68k.c:    context->write8table = write8table;
test_68k.c:    context->read16table = read16table;
test_68k.c:    context->write16table = write16table;
test_68k.c:    context->memshift = 0;
test_68k.c:    context->memmask = 0;
test_68k.c:    context->cpu = NULL;
test_68k.c:	regset = context->regs_a;
test_68k.c:	regset = context->regs_d;
test_68k.c:    reg = buf[1] - '0';
test_68k.c:/*      context->flags = strtoul(buf, NULL, 0); */
test_68k.c:    context->other_sp = strtoul(buf, NULL, 0);
test_68k.c:    context->cycles_left = strtol(buf, NULL, 0);
test_68k.c:    context->pc = strtoul(buf, NULL, 0);
test_68k.c:    for (cur_match = set_line_types; cur_match->match; cur_match++) {
test_68k.c:	match_len = strlen(cur_match->match);
test_68k.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_68k.c:	    return cur_match->handler(bufptr);
test_68k.c:	regset = context->regs_a;
test_68k.c:	regset = context->regs_d;
test_68k.c:    reg = buf[1] - '0';
test_68k.c:    if (data != context->other_sp) {
test_68k.c:	printf("check other_sp: expected 0x%08lx, found 0x%08lx.\n", data, context->other_sp);
test_68k.c:    if (cycles != context->cycles_left) {
test_68k.c:	printf("check cycles: expected 0x%04hx, found 0x%04hx.\n", cycles, context->cycles_left);
test_68k.c:    if (pc != (context->pc & 0xffffff)) {
test_68k.c:	printf("check pc: expected 0x%06lx, found 0x%06lx.\n", pc, context->pc & 0x00ffffff);
test_68k.c:    for (cur_match = check_line_types; cur_match->match; cur_match++) {
test_68k.c:	match_len = strlen(cur_match->match);
test_68k.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_68k.c:	    return cur_match->handler(bufptr);
test_68k.c:    for (cur_match = line_types; cur_match->match; cur_match++) {
test_68k.c:	match_len = strlen(cur_match->match);
test_68k.c:	if (!strncmp(bufptr, cur_match->match, match_len)) {
test_68k.c:	    return cur_match->handler(bufptr);
test_68k.c:	if (buf[strlen(buf) - 1] == '\n') {
test_68k.c:	    buf[strlen(buf) - 1] = '\0';
tiledraw.c:	cur_vbp += (8 - finescroll);
tiledraw.c:    for (i = num_tiles; i > 1; i--) {
tms9918.c:    retval = vdp->readahead;
tms9918.c:    vdp->readahead = vdp->memory[vdp->address++];
tms9918.c:    vdp->address &= 0x3fff;
tms9918.c:    vdp->flags &= ~TF_ADDRWRITE;
tms9918.c:    retval = vdp->status;
tms9918.c:    vdp->status &= 0x1f;
tms9918.c:    vdp->flags &= ~TF_ADDRWRITE;
tms9918.c:    vdp->readahead = data;
tms9918.c:    vdp->memory[vdp->address++] = data;
tms9918.c:    vdp->address &= 0x3fff;
tms9918.c:    vdp->flags &= ~TF_ADDRWRITE;
tms9918.c:    if (vdp->flags & TF_ADDRWRITE) {
tms9918.c:/* 	    deb_printf("tms9918: register write %d = %02x.\n", data & 7, vdp->addrsave); */
tms9918.c:	    vdp->regs[data & 7] = vdp->addrsave;
tms9918.c:	    vdp->address = (vdp->addrsave | (data << 8)) & 0x3fff;
tms9918.c:		vdp->readahead = vdp->memory[vdp->address++];
tms9918.c:		vdp->address &= 0x3fff;
tms9918.c:	vdp->flags &= ~TF_ADDRWRITE;
tms9918.c:	vdp->addrsave = data;
tms9918.c:	vdp->flags |= TF_ADDRWRITE;
tms9918.c:    sprites = (struct sprite_data *)&vdp->memory[(vdp->regs[5] & 0x7f) << 7];
tms9918.c:    pattern_table = &vdp->memory[(vdp->regs[6] & 0x07) << 11];
tms9918.c:	if (sprites[i].y_pos >= vdp->scanline) {
tms9918.c:	if ((sprites[i].y_pos + sprite_size) < vdp->scanline) {
tms9918.c:	    vdp->status |= 0x40; /* fifth sprite flag */
tms9918.c:	    cache[num_sprites].x_pos -= 32;
tms9918.c:	cache[num_sprites].pattern += vdp->scanline - (sprites[i].y_pos + 1);
tms9918.c:    vdp->status &= 0xe0;
tms9918.c:    vdp->status |= i;
tms9918.c:	if (((cache[3].x_pos - cache[2].x_pos) & 0x1ff) < sprite_size) {
tms9918.c:	if (((cache[3].x_pos - cache[1].x_pos) & 0x1ff) < sprite_size) {
tms9918.c:	if (((cache[3].x_pos - cache[0].x_pos) & 0x1ff) < sprite_size) {
tms9918.c:	if (((cache[2].x_pos - cache[1].x_pos) & 0x1ff) < sprite_size) {
tms9918.c:	if (((cache[2].x_pos - cache[0].x_pos) & 0x1ff) < sprite_size) {
tms9918.c:	if (((cache[1].x_pos - cache[0].x_pos) & 0x1ff) < sprite_size) {
tms9918.c:    sprite_size = (vdp->regs[1] & 0x02)? 16: 8;
tms9918.c:	vdp->status |= 0x20; /* sprite collision flag */
tms9918.c:    for (i = num_sprites - 1; i >= 0; i--) {
tms9918.c:	color = vdp->palette[cache[i].color];
tms9918.c:	    data &= 0xffff >> -cache[i].x_pos;
tms9918.c:    cur_vbp = video_get_vbp(vdp->scanline);
tms9918.c:    nametable = vdp->memory + ((vdp->regs[2] & 0x0f) << 10);
tms9918.c:    patterntable = vdp->memory + ((vdp->regs[4] & 0x07) << 11);
tms9918.c:    patterntable += vdp->scanline & 7;
tms9918.c:    nametable += (vdp->scanline & ~7) << 2;
tms9918.c:    colortable = vdp->memory + (vdp->regs[3] << 6);
tms9918.c:	color0 = vdp->palette[colortable[nametable[i] >> 3] & 15];
tms9918.c:	color1 = vdp->palette[colortable[nametable[i] >> 3] >> 4];
tms9918.c:    cur_vbp = video_get_vbp(vdp->scanline);
tms9918.c:    nametable = vdp->memory + ((vdp->regs[2] & 0x0f) << 10);
tms9918.c:    patterntable = vdp->memory + ((vdp->regs[4] & 0x07) << 11);
tms9918.c:    patterntable += vdp->scanline & 7;
tms9918.c:    nametable += (vdp->scanline & ~7) * 5;
tms9918.c:    color0 = vdp->palette[vdp->regs[7] & 15];
tms9918.c:    color1 = vdp->palette[vdp->regs[7] >> 4];
tms9918.c:    cur_vbp = video_get_vbp(vdp->scanline);
tms9918.c:    nametable = vdp->memory + ((vdp->regs[2] & 0x0f) << 10);
tms9918.c:    patterntable = vdp->memory + ((vdp->regs[4] & 0x04)? 0x2000: 0);
tms9918.c:    colortable = vdp->memory + ((vdp->regs[3] & 0x80)? 0x2000: 0);
tms9918.c:    patterntable += vdp->scanline & 7;
tms9918.c:    colortable += vdp->scanline & 7;
tms9918.c:    if (vdp->scanline >= 0x80) {
tms9918.c:	if (vdp->regs[4] & 0x02) {
tms9918.c:    } else if (vdp->scanline >= 0x40) {
tms9918.c:	if (vdp->regs[4] & 0x01) {
tms9918.c:    nametable += (vdp->scanline & ~7) << 2;
tms9918.c:	color0 = vdp->palette[colortable[nametable[i] << 3] & 0x0f];
tms9918.c:	color1 = vdp->palette[colortable[nametable[i] << 3] >> 4];
tms9918.c:    cur_vbp = video_get_vbp(vdp->scanline);
tms9918.c:    nametable = vdp->memory + ((vdp->regs[2] & 0x0f) << 10);
tms9918.c:    patterntable = vdp->memory + ((vdp->regs[4] & 0x07) << 11);
tms9918.c:    patterntable += (vdp->scanline & 28) >> 2;
tms9918.c:    nametable += (vdp->scanline & ~7) << 2;
tms9918.c:	color0 = vdp->palette[pattern & 15];
tms9918.c:	color1 = vdp->palette[pattern >> 4];
tms9918.c:	       (vdp->regs[1] & 0x10)? '1': '-',
tms9918.c:	       (vdp->regs[0] & 0x02)? '2': '-',
tms9918.c:	       (vdp->regs[1] & 0x08)? '3': '-');
tms9918.c:    cur_vbp = video_get_vbp(vdp->scanline);
tms9918.c:    if (vdp->regs[7] & 0x0f) {
tms9918.c:	vdp->palette[0] = vdp->palette[vdp->regs[7] & 0x0f];
tms9918.c:	vdp->palette[0] = vdp->palette[1];
tms9918.c:    if (!(vdp->regs[1] & 0x40)) {
tms9918.c:	memset(cur_vbp, vdp->palette[1], 256);
tms9918.c:    if (vdp->regs[1] & 0x10) {
tms9918.c:    if (vdp->regs[0] & 0x02) {
tms9918.c:    if (vdp->regs[1] & 0x08) {
tms9918.c:    if (vdp->scanline < 192) {
tms9918.c:    } else if (vdp->scanline == 192) {
tms9918.c:	vdp->status |= 0x80; /* signal vblank */
tms9918.c:    if (vdp->scanline == 261) {
tms9918.c:	vdp->scanline = 0;
tms9918.c:	vdp->scanline++;
tms9918.c:    return (vdp->status & 0x80) && (vdp->regs[1] & 0x20);
tms9918.c:	vdp->palette[i] = vid_pre_xlat[i];
tms9918.c:	retval->memory = calloc(1, TMS_RAMSIZE);
tms9918.c:	if (retval->memory) {
tms9918.c:	    retval->scanline = 0;
tms9918.c: * fixed obi-wan error in the sprite renderer
tool.c:	retval->filename = NULL;
tool.c:	retval->data = NULL;
tool.c:	retval->size = ftell(file);
tool.c:	retval->filename = strdup(filename);
tool.c:	retval->data = malloc(retval->size);
tool.c:	error = !(retval->data && retval->filename);
tool.c:	numread = fread(retval->data, 1, retval->size, file);
tool.c:	error = (numread != retval->size);
tool.c:	if (retval->filename) {
tool.c:	    free(retval->filename);
tool.c:	if (retval->data) {
tool.c:	    free(retval->data);
tool.c:    if (romfile->filename) {
tool.c:	free(romfile->filename);
tool.c:    if (romfile->data) {
tool.c:	free(romfile->data);
tool.c:    retval->filename = get_battery_filename(romfile->filename);
tool.c:    retval->data = malloc(size);
tool.c:    retval->size = size;
tool.c:    /* FIXME: retval->data and retval->filename can both be NULL right now */
tool.c:    file = fopen(retval->filename, "rb");
tool.c:    fread(retval->data, 1, retval->size, file);
tool.c:    batfile = fopen(batteryfile->filename, "wb");
tool.c:	fwrite(batteryfile->data, batteryfile->size, 1, batfile);
tool.c:    len_filename = strlen(romfile->filename);
tool.c:	string_offset = len_filename - len_suffix;
tool.c:	if (!strcasecmp(romfile->filename + string_offset, system_detect[i].file_suffix)) {
tool.c:    {ST_PCENGINE,  "pc-engine"},
tool.c:    {ST_PCENGINE,  "turbografx-16"},
tool.c: * fixed to compile with C++-fixed tool.h
tool.c: * made the cheap hack used for the battery filename endian-independant
tool.c: * enabled PC-Engine emulation
torr_cpu.c: * CAL interface and non-generated code for torrigion core
torr_cpu.c:    (*cpu)->data.d_junk68k = calloc(1, sizeof(struct emu68k_context));
torr_cpu.c:    if (!(*cpu)->data.d_junk68k) {
torr_cpu.c:    (*cpu)->reset = cal_torr68k_reset;
torr_cpu.c:    (*cpu)->run = cal_torr68k_run;
torr_cpu.c:    (*cpu)->runfor = cal_torr68k_runfor;
torr_cpu.c:    (*cpu)->irq = cal_torr68k_irq;
torr_cpu.c:    (*cpu)->nmi = cal_torr68k_nmi;
torr_cpu.c:    (*cpu)->setzpage = cal_torr68k_setzpage;
torr_cpu.c:    (*cpu)->timeleft = cal_torr68k_timeleft;
torr_cpu.c:    (*cpu)->setmmu8 = cal_torr68k_setmmu8;
torr_cpu.c:    (*cpu)->setmmu16 = cal_torr68k_setmmu16;
torr_cpu.c:    (*cpu)->data.d_junk68k->cpu = *cpu;
torr_cpu.c:    emu68k_reset(cpu->data.d_junk68k);
torr_cpu.c:    context = cpu->data.d_junk68k;
torr_cpu.c:    opword = context->read16table[(context->pc >> context->memshift) & context->memmask](context->cpu, context->pc);
torr_cpu.c:    context->pc += 2;
torr_cpu.c:	    deb_printf("torrigion: executing opword 0x%04hx from 0x%06lx.\n", opword, context->pc - 2);
torr_cpu.c:	    deb_printf("torrigion: stopping execution at infinite loop at 0x%06x.\n", context->pc - 2);
torr_cpu.c:/* 	deb_printf("torrigion: executing opword 0x%04hx from 0x%06lx.\n", opword, context->pc - 2); */
torr_cpu.c:	torrigion_decode[opword](cpu->data.d_junk68k, opword);
torr_cpu.c:	printf("torrigion: unimplemented opword 0x%04hx at 0x%06lx.\n", opword, context->pc);
torr_cpu.c:/*     cpu->data.d_emuz80->cycles_left += cycles; */
torr_cpu.c:/*     emuz80_IRQ(cpu->data.d_emuz80); */
torr_cpu.c:    context = cpu->data.d_junk68k;
torr_cpu.c:/*     deb_printf("torr_68k: SR = 0x%04hx.\n", context->flags); */
torr_cpu.c:    if ((context->flags & 0x0700) < (irqno << 8)) {
torr_cpu.c:	new_sr = context->flags;
torr_cpu.c:	if ((new_sr ^ context->flags) & 0x2000) {
torr_cpu.c:	m68k_push_long(context, context->pc);
torr_cpu.c:	context->regs_a[7] -= 2;
torr_cpu.c:	context->write16table[(context->regs_a[7] >> context->memshift) & context->memmask](cpu, context->regs_a[7], context->flags);
torr_cpu.c:	context->flags = new_sr;
torr_cpu.c:	tmp1 = context->read16table[(tmp_sp >> context->memshift) & context->memmask](context->cpu, tmp_sp);
torr_cpu.c:	tmp2 = context->read16table[(tmp_sp >> context->memshift) & context->memmask](context->cpu, tmp_sp);
torr_cpu.c:	context->pc = (tmp1 << 16) | tmp2;
torr_cpu.c:/*     emuz80_NMI(cpu->data.d_emuz80); */
torr_cpu.c:/*     return cpu->data.d_emuz80->cycles_left; */
torr_cpu.c:    cpu->data.d_junk68k->memshift = shift;
torr_cpu.c:    cpu->data.d_junk68k->memmask = mask;
torr_cpu.c:    cpu->data.d_junk68k->read8table = rtbl;
torr_cpu.c:    cpu->data.d_junk68k->write8table = wtbl;
torr_cpu.c:    cpu->data.d_junk68k->read16table = rtbl;
torr_cpu.c:    cpu->data.d_junk68k->write16table = wtbl;
ui_allegro.c:	switch (ui_joypad->button_template->num_buttons) {
ui_allegro.c:		ui_joypad->data |= ui_joypad->button_template->buttons[7];
ui_allegro.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[7];
ui_allegro.c:		ui_joypad->data |= ui_joypad->button_template->buttons[6];
ui_allegro.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[6];
ui_allegro.c:		ui_joypad->data |= ui_joypad->button_template->buttons[5];
ui_allegro.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[5];
ui_allegro.c:		ui_joypad->data |= ui_joypad->button_template->buttons[4];
ui_allegro.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[4];
ui_allegro.c:		ui_joypad->data |= ui_joypad->button_template->buttons[3];
ui_allegro.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[3];
ui_allegro.c:		ui_joypad->data |= ui_joypad->button_template->buttons[2];
ui_allegro.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[2];
ui_allegro.c:		ui_joypad->data |= ui_joypad->button_template->buttons[1];
ui_allegro.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[1];
ui_allegro.c:		ui_joypad->data |= ui_joypad->button_template->buttons[0];
ui_allegro.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[0];
ui_allegro.c:/* per-driver menus */
ui_allegro.c: * added dummy implementation of the per-driver menu interface
ui_gtk.c: * GTK front-end/blitter for DarcNES
ui_gtk.c:/* These can have any bit depth. Use image->bpp to get bit depth. */
ui_gtk.c:/* These always carry 8-bit index values. */
ui_gtk.c:/* Our palette for any 16-bit drawing. */
ui_gtk.c:  visual = gdk_window_get_visual( nes_gtk_window->window );
ui_gtk.c:  gc = gdk_gc_new( nes_gtk_window->window );
ui_gtk.c:  color_map = gdk_window_get_colormap( nes_gtk_window->window );
ui_gtk.c:  gtk_signal_connect( GTK_OBJECT( GTK_FILE_SELECTION( open_dialog )->ok_button ), "clicked",
ui_gtk.c:  gtk_signal_connect_object( GTK_OBJECT( GTK_FILE_SELECTION( open_dialog )->cancel_button ),
ui_gtk.c:/* per-driver menus */
ui_gtk.c:  switch( visual->depth )
ui_gtk.c:	     visual->depth );
ui_gtk.c: * The video buffer is always indexed--the GdkImage however
ui_gtk.c:  switch( cur_image->bpp )
ui_gtk.c:    buffer_16 = (unsigned short*) cur_image->mem;
ui_gtk.c:    buffer_16 = (unsigned short*) cur_image->mem;
ui_gtk.c:    for( i = 0; i < num_pixels - 1; ++i )
ui_gtk.c:	     cur_image->bpp );
ui_gtk.c:  gdk_draw_image( nes_gtk_window->window, gc, cur_image, 0, 0, 0, 0, 
ui_gtk.c:    switch (e->keyval) {
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 4)) {
ui_gtk.c:	    ui_joypad->data |= ui_joypad->button_template->buttons[4];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 5)) {
ui_gtk.c:	    ui_joypad->data |= ui_joypad->button_template->buttons[5];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 6)) {
ui_gtk.c:	    ui_joypad->data |= ui_joypad->button_template->buttons[6];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 7)) {
ui_gtk.c:	    ui_joypad->data |= ui_joypad->button_template->buttons[7];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 0)) {
ui_gtk.c:	    ui_joypad->data |= ui_joypad->button_template->buttons[0];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 1)) {
ui_gtk.c:	    ui_joypad->data |= ui_joypad->button_template->buttons[1];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 2)) {
ui_gtk.c:	    ui_joypad->data |= ui_joypad->button_template->buttons[2];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 3)) {
ui_gtk.c:	    ui_joypad->data |= ui_joypad->button_template->buttons[3];
ui_gtk.c:    switch (e->keyval) {
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 4)) {
ui_gtk.c:	    ui_joypad->data &= ~ui_joypad->button_template->buttons[4];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 5)) {
ui_gtk.c:	    ui_joypad->data &= ~ui_joypad->button_template->buttons[5];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 6)) {
ui_gtk.c:	    ui_joypad->data &= ~ui_joypad->button_template->buttons[6];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 7)) {
ui_gtk.c:	    ui_joypad->data &= ~ui_joypad->button_template->buttons[7];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 0)) {
ui_gtk.c:	    ui_joypad->data &= ~ui_joypad->button_template->buttons[0];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 1)) {
ui_gtk.c:	    ui_joypad->data &= ~ui_joypad->button_template->buttons[1];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 2)) {
ui_gtk.c:	    ui_joypad->data &= ~ui_joypad->button_template->buttons[2];
ui_gtk.c:	if (ui_joypad && (ui_joypad->button_template->num_buttons > 3)) {
ui_gtk.c:	    ui_joypad->data &= ~ui_joypad->button_template->buttons[3];
ui_gtk.c: * added dummy implementation of the per-driver menu interface
ui_svga.c:    printf("usage: %s <romfile> [-m #] [-h] [--nosound]\n", argv[0]);
ui_svga.c:	printf("    %d - %s %s\n", x, modelist[x].name,
ui_svga.c:        exit(-1);
ui_svga.c:/*     middle_x = (vga_getxdim() / 2) - (BUFFER_X/2); */
ui_svga.c:/*     middle_y = (vga_getydim() / 2) - (BUFFER_Y/2); */
ui_svga.c:	exit(-1);
ui_svga.c:	if (argv[x][0] != '-') {
ui_svga.c:		    exit(-1);
ui_svga.c:	} else if (!strcasecmp(argv[x], "--nosound")) {
ui_svga.c:	} else { /* It's a switch! ----------------------- */
ui_svga.c:		    exit(-1);
ui_svga.c:		    printf("Video mode undefined. Try \"%s -h\" for a list of available modes\n", argv[0]);
ui_svga.c:		    exit(-1);
ui_svga.c:			   "Try \"%s -h\" for a list of available modes\n", argv[0]);
ui_svga.c:		    exit(-1);
ui_svga.c:	sprintf(temp, "gunzip -c %s >"TEMP_FILENAME, filename);
ui_svga.c:	    exit(-1);
ui_svga.c:/* per-driver menus */
ui_svga.c: * added dummy implementation of the per-driver menu interface
ui_svga.c: * added --nosound option
ui_x.c:    item->callback(item->callback_data);
ui_x.c:    item_widget = item->ui_data;
ui_x.c:    XtVaSetValues(item_widget, XtNlabel, item->name, NULL);
ui_x.c:    printf("usage: %s [--system=<system>] [--nosound] [filename]\n", progname);
ui_x.c:	if (!strncasecmp(argv[i], "--system=", 9)) {
ui_x.c:	} else if (!strcasecmp(argv[i], "--nosound")) {
ui_x.c:	    printf("rom file \"%s\" already loaded, ignoring \"%s\"\n", romfile->filename, argv[i]);
ui_x.c: * added per-driver menu interface
ui_x.c: * fixed --nosound option (silly bug in args parser)
ui_x.c: * added --nosound option
ui_x.c: * rebuilt the command argument parser (added "--system=" option)
ui_x.c: * disabled file->nes.
ui_x.c: * disabled file->zarzon.
ui_x.c: * fixed file->quit to call exit(3).
video_allegro.c:    deblevel--;
video_allegro.c:    return nes_image->line[line];
video_svga.c:    middle_x = (vga_getxdim() - x) / 2;
video_svga.c:    middle_y = (vga_getydim() - y) / 2;
video_svga.c:	offset_x = -middle_x;
video_svga.c:	offset_y = -middle_y;
video_svga.c:	exit(-1);
video_svga.c:    deblevel--;
video_svga.c:	switch (ui_joypad->button_template->num_buttons) {
video_svga.c:		ui_joypad->data |= ui_joypad->button_template->buttons[7];
video_svga.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[7];
video_svga.c:		ui_joypad->data |= ui_joypad->button_template->buttons[6];
video_svga.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[6];
video_svga.c:		ui_joypad->data |= ui_joypad->button_template->buttons[5];
video_svga.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[5];
video_svga.c:		ui_joypad->data |= ui_joypad->button_template->buttons[4];
video_svga.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[4];
video_svga.c:		ui_joypad->data |= ui_joypad->button_template->buttons[3];
video_svga.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[3];
video_svga.c:		ui_joypad->data |= ui_joypad->button_template->buttons[2];
video_svga.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[2];
video_svga.c:		ui_joypad->data |= ui_joypad->button_template->buttons[1];
video_svga.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[1];
video_svga.c:		ui_joypad->data |= ui_joypad->button_template->buttons[0];
video_svga.c:		ui_joypad->data &= ~ui_joypad->button_template->buttons[0];
video_x.c:/* FIXME: ui_x.c interface -- move to separate header. */
video_x.c:    buffer->data = malloc(x * y * bytes_per_pixel);
video_x.c:    buffer->image = XCreateImage(display, DefaultVisualOfScreen(nes_screen),
video_x.c:				 bit_depth, ZPixmap, 0, buffer->data, x, y, 8, 0);
video_x.c:    buffer->is_shm = 0;
video_x.c:    if (BadAccess == e->error_code) {
video_x.c:    shm_info->shmid = shmget(IPC_PRIVATE, width * height * bytes_per_pixel,
video_x.c:    if (shm_info->shmid < 0) {
video_x.c:    shm_info->shmaddr = (char *)shmat(shm_info->shmid, 0, 0);
video_x.c:    shm_info->readOnly = False;
video_x.c:    if ((char *) -1 == shm_info->shmaddr) {
video_x.c:	if (shmctl(shm_info->shmid, IPC_RMID, NULL) < 0) {
video_x.c:    if (shmctl(shm_info->shmid, IPC_RMID, NULL) < 0) {
video_x.c:	shmdt(shm_info->shmaddr);
video_x.c:    buffer->data = shm_info->shmaddr;
video_x.c:    buffer->image = XShmCreateImage(display, DefaultVisualOfScreen(screen), depth,
video_x.c:				    ZPixmap, shm_info->shmaddr, shm_info, width, height);
video_x.c:    buffer->is_shm = 1;
video_x.c:	vidxlate(cur_image_buffer->data, buffer_x * buffer_y);
video_x.c:    if (cur_image_buffer->is_shm) {
video_x.c:	XShmPutImage(display, nes_window, nes_gc, cur_image_buffer->image,
video_x.c:	XPutImage(display, nes_window, nes_gc, cur_image_buffer->image, 0, 0, 0, 0, buffer_x, buffer_y);
video_x.c:    for (i=15; i >= 0; i--) {
video_x.c:    ui_joypad->data=0;
video_x.c:    switch (ui_joypad->button_template->num_buttons) {
video_x.c:	    ui_joypad->data = ui_joypad->button_template->buttons[7];
video_x.c:	    //ui_joypad->data &= ~ui_joypad->button_template->buttons[7];
video_x.c:	    ui_joypad->data = ui_joypad->button_template->buttons[6];
video_x.c:	    //ui_joypad->data &= ~ui_joypad->button_template->buttons[6];
video_x.c:	    ui_joypad->data = ui_joypad->button_template->buttons[5];
video_x.c:	    //ui_joypad->data &= ~ui_joypad->button_template->buttons[5];
video_x.c:	    ui_joypad->data = ui_joypad->button_template->buttons[4];
video_x.c:	    //ui_joypad->data &= ~ui_joypad->button_template->buttons[4];
video_x.c:	    ui_joypad->data = ui_joypad->button_template->buttons[3];
video_x.c:	    //ui_joypad->data &= ~ui_joypad->button_template->buttons[3];
video_x.c:	    ui_joypad->data = ui_joypad->button_template->buttons[2];
video_x.c:	    //ui_joypad->data &= ~ui_joypad->button_template->buttons[2];
video_x.c:	    ui_joypad->data = ui_joypad->button_template->buttons[1];
video_x.c:	    //ui_joypad->data &= ~ui_joypad->button_template->buttons[1];
video_x.c:	    ui_joypad->data = ui_joypad->button_template->buttons[0];
video_x.c:	    //ui_joypad->data &= ~ui_joypad->button_template->buttons[0];
video_x.c:    printf("ui joypad data %d",ui_joypad->data);
video_x.c:    for (i = (sizeof(keypad_keys) / sizeof(keypad_keys[0])) - 1; i >= 0; i--) {
video_x.c:    ui_keypad->data = keypad_data;
video_x.c:    XtTranslateKeycode(display, event->xkey.keycode, event->xkey.state, &dummy, &keysym);
video_x.c:    handle_joypad_key(event->type, keysym);
video_x.c:    handle_keypad_key(event->type, keysym);
video_x.c:    for (i = size; i > 0; i--) {
video_x.c:	*(((short *)dest)+(i-1)) = xlatepal[(int) *(dest+(i-1))];
video_x.c:    for (i = size; i > 0; i--) {
video_x.c:	*(((long *)dest)+(i-1)) = xlatepal2[(int) *(dest+(i-1))];
video_x.c:    return cur_image_buffer->data + (line * buffer_x);
video_x.c: * removed double-buffering code
video_x.c: * switched to a double-buffered video system. added routines to support
video_x.c: * the PPU writing directly into the video buffers. eliminated the 8-bit
video_x.c: * added an identity vid_pre_xlat table for use in 16-bitplane modes.
video_x.c: * could be done by the PPU. also moved the 8-bit color translation to
video_x.c: * the PPU and set the 8-bit xlatfinc to be memcpy. (maybe I should
video_x.c: * removed two commented-out printf statements in the input handler.
